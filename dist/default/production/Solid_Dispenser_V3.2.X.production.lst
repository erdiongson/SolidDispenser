

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jun 01 13:49:08 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F65J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 2.05
    58                           ; Generated 20/12/2018 GMT
    59                           ; 
    60                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F65J50 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  0017AC                     __pidataCOMRAM:
    94                           	opt callstack 0
    95                           
    96                           ;initializer for _errorcounter
    97  0017AC  001E               	dw	30
    98  0017AE  0000               	dw	0
    99                           
   100                           ;initializer for _Vmotor_Time
   101  0017B0  07D0               	dw	2000
   102                           
   103                           ;initializer for _PWM_reg
   104  0017B2  3F                 	db	63
   105  0000                     _TMR1	set	4046
   106  0000                     _LATGbits	set	3983
   107  0000                     _T4CONbits	set	3958
   108  0000                     _CCPR4L	set	3956
   109  0000                     _CCP4CON	set	3955
   110  0000                     _T4CON	set	3958
   111  0000                     _T3CONbits	set	3961
   112  0000                     _PR4	set	3959
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _ANCON0bits	set	4033
   115  0000                     _ADCON1bits	set	4033
   116  0000                     _ADCON0bits	set	4034
   117  0000                     _TRISG	set	3992
   118  0000                     _TRISF	set	3991
   119  0000                     _TRISE	set	3990
   120  0000                     _TRISD	set	3989
   121  0000                     _TRISC	set	3988
   122  0000                     _TRISB	set	3987
   123  0000                     _TRISA	set	3986
   124  0000                     _RCREG1	set	4015
   125  0000                     _TXREG1	set	4014
   126  0000                     _SPBRGH1	set	3967
   127  0000                     _SPBRG1	set	4016
   128  0000                     _PIE1bits	set	3997
   129  0000                     _BAUDCON1bits	set	3966
   130  0000                     _TXSTA1bits	set	4013
   131  0000                     _TRISCbits	set	3988
   132  0000                     _SSP2BUF	set	3951
   133  0000                     _SSP2STAT	set	3949
   134  0000                     _SSP2ADD	set	3950
   135  0000                     _SSP2CON2	set	3947
   136  0000                     _SSP2CON1	set	3948
   137  0000                     _T1CON	set	4045
   138  0000                     _RCSTA1bits	set	4012
   139  0000                     _PIR1bits	set	3998
   140  0000                     _PORTAbits	set	3968
   141  0000                     _PORTBbits	set	3969
   142  0000                     _LATDbits	set	3980
   143  0000                     _WDTCONbits	set	4032
   144  0000                     _INTCONbits	set	4082
   145  0000                     _IPR1bits	set	3999
   146  0000                     _RCONbits	set	4048
   147  0000                     _LATAbits	set	3977
   148  0000                     _LATCbits	set	3979
   149  0000                     _ACKEN2	set	31580
   150  0000                     _ACKDT2	set	31581
   151  0000                     _RCEN2	set	31579
   152  0000                     _PEN2	set	31578
   153  0000                     _RSEN2	set	31577
   154  0000                     _SEN2	set	31576
   155  0000                     _TRISD6	set	31918
   156  0000                     _TRISD5	set	31917
   157  0000                     _TMR1IE	set	31976
   158  0000                     _TMR1IF	set	31984
   159  0000                     _GIE	set	32663
   160                           
   161                           ; #config settings
   162  0000                     
   163                           	psect	cinit
   164  00152E                     __pcinit:
   165                           	opt callstack 0
   166  00152E                     start_initialization:
   167                           	opt callstack 0
   168  00152E                     __initialization:
   169                           	opt callstack 0
   170                           
   171                           ; Initialize objects allocated to COMRAM (7 bytes)
   172                           ; load TBLPTR registers with __pidataCOMRAM
   173  00152E  0EAC               	movlw	low __pidataCOMRAM
   174  001530  6EF6               	movwf	tblptrl,c
   175  001532  0E17               	movlw	high __pidataCOMRAM
   176  001534  6EF7               	movwf	tblptrh,c
   177  001536  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   178  001538  6EF8               	movwf	tblptru,c
   179  00153A  EE00  F052         	lfsr	0,__pdataCOMRAM
   180  00153E  EE10 F007          	lfsr	1,7
   181  001542                     copy_data0:
   182  001542  0009               	tblrd		*+
   183  001544  CFF5 FFEE          	movff	tablat,postinc0
   184  001548  50E5               	movf	postdec1,w,c
   185  00154A  50E1               	movf	fsr1l,w,c
   186  00154C  E1FA               	bnz	copy_data0
   187                           
   188                           ; Clear objects allocated to BANK0 (32 bytes)
   189  00154E  EE00  F060         	lfsr	0,__pbssBANK0
   190  001552  0E20               	movlw	32
   191  001554                     clear_0:
   192  001554  6AEE               	clrf	postinc0,c
   193  001556  06E8               	decf	wreg,f,c
   194  001558  E1FD               	bnz	clear_0
   195                           
   196                           ; Clear objects allocated to COMRAM (53 bytes)
   197  00155A  EE00  F001         	lfsr	0,__pbssCOMRAM
   198  00155E  0E35               	movlw	53
   199  001560                     clear_1:
   200  001560  6AEE               	clrf	postinc0,c
   201  001562  06E8               	decf	wreg,f,c
   202  001564  E1FD               	bnz	clear_1
   203  001566                     end_of_initialization:
   204                           	opt callstack 0
   205  001566                     __end_of__initialization:
   206                           	opt callstack 0
   207  001566  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   208  001568  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   209  00156A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   210  00156C  6EF8               	movwf	tblptru,c
   211  00156E  0100               	movlb	0
   212  001570  EFC5  F000         	goto	_main	;jump to C main() function
   213                           
   214                           	psect	bssCOMRAM
   215  000001                     __pbssCOMRAM:
   216                           	opt callstack 0
   217  000001                     _Serial_Buffer:
   218                           	opt callstack 0
   219  000001                     	ds	16
   220  000011                     _IR_SENSORF:
   221                           	opt callstack 0
   222  000011                     	ds	2
   223  000013                     _i:
   224                           	opt callstack 0
   225  000013                     	ds	2
   226  000015                     _NUM_REC:
   227                           	opt callstack 0
   228  000015                     	ds	2
   229  000017                     _NUM:
   230                           	opt callstack 0
   231  000017                     	ds	2
   232  000019                     _Motor_Pause_Time:
   233                           	opt callstack 0
   234  000019                     	ds	2
   235  00001B                     _Device_ID:
   236                           	opt callstack 0
   237  00001B                     	ds	2
   238  00001D                     _Motor_Stop_Delay_Time:
   239                           	opt callstack 0
   240  00001D                     	ds	2
   241  00001F                     _Motor_Speed:
   242                           	opt callstack 0
   243  00001F                     	ds	2
   244  000021                     _ETemp:
   245                           	opt callstack 0
   246  000021                     	ds	2
   247  000023                     _EAdd_Low:
   248                           	opt callstack 0
   249  000023                     	ds	2
   250  000025                     _EAdd_High:
   251                           	opt callstack 0
   252  000025                     	ds	2
   253  000027                     _Serial_Count:
   254                           	opt callstack 0
   255  000027                     	ds	2
   256  000029                     _TMR1IF_triggered:
   257                           	opt callstack 0
   258  000029                     	ds	1
   259  00002A                     _PWM_Duty_Cycle:
   260                           	opt callstack 0
   261  00002A                     	ds	1
   262  00002B                     _delay_motor_stop_time:
   263                           	opt callstack 0
   264  00002B                     	ds	1
   265  00002C                     _vib_Time:
   266                           	opt callstack 0
   267  00002C                     	ds	1
   268  00002D                     _pause_Time:
   269                           	opt callstack 0
   270  00002D                     	ds	1
   271  00002E                     _OpMode:
   272                           	opt callstack 0
   273  00002E                     	ds	1
   274  00002F                     _data:
   275                           	opt callstack 0
   276  00002F                     	ds	1
   277  000030                     _vibration_mode:
   278                           	opt callstack 0
   279  000030                     	ds	1
   280  000031                     _Busy:
   281                           	opt callstack 0
   282  000031                     	ds	1
   283  000032                     _motor_status:
   284                           	opt callstack 0
   285  000032                     	ds	1
   286  000033                     _Stop:
   287                           	opt callstack 0
   288  000033                     	ds	1
   289  000034                     _Serial_GData:
   290                           	opt callstack 0
   291  000034                     	ds	1
   292  000035                     _Serial_Flag:
   293                           	opt callstack 0
   294  000035                     	ds	1
   295                           
   296                           	psect	dataCOMRAM
   297  000052                     __pdataCOMRAM:
   298                           	opt callstack 0
   299  000052                     _errorcounter:
   300                           	opt callstack 0
   301  000052                     	ds	4
   302  000056                     _Vmotor_Time:
   303                           	opt callstack 0
   304  000056                     	ds	2
   305  000058                     _PWM_reg:
   306                           	opt callstack 0
   307  000058                     	ds	1
   308                           
   309                           	psect	bssBANK0
   310  000060                     __pbssBANK0:
   311                           	opt callstack 0
   312  000060                     _Serial_Buffer_Out:
   313                           	opt callstack 0
   314  000060                     	ds	16
   315  000070                     _Serial_Temp_Buffer:
   316                           	opt callstack 0
   317  000070                     	ds	16
   318                           
   319                           	psect	cstackCOMRAM
   320  000036                     __pcstackCOMRAM:
   321                           	opt callstack 0
   322  000036                     Read1USART@result:
   323                           	opt callstack 0
   324  000036                     i2Write1USART@data:
   325                           	opt callstack 0
   326                           
   327                           ; 1 bytes @ 0x0
   328  000036                     	ds	1
   329  000037                     ??_high_isr:
   330                           
   331                           ; 1 bytes @ 0x1
   332  000037                     	ds	2
   333  000039                     high_isr@Temp:
   334                           	opt callstack 0
   335                           
   336                           ; 1 bytes @ 0x3
   337  000039                     	ds	1
   338  00003A                     high_isr@c:
   339                           	opt callstack 0
   340                           
   341                           ; 1 bytes @ 0x4
   342  00003A                     	ds	1
   343  00003B                     high_isr@i:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0x5
   347  00003B                     	ds	1
   348  00003C                     ??_STLED316s_SPI_SendData:
   349  00003C                     ??_i2c_Wait:
   350  00003C                     ?_Read_IR:
   351                           	opt callstack 0
   352  00003C                     ?___awdiv:
   353                           	opt callstack 0
   354  00003C                     ?___awmod:
   355                           	opt callstack 0
   356  00003C                     ?___aldiv:
   357                           	opt callstack 0
   358  00003C                     Write1USART@data:
   359                           	opt callstack 0
   360  00003C                     delay_1ms@time:
   361                           	opt callstack 0
   362  00003C                     flush@i:
   363                           	opt callstack 0
   364  00003C                     flushOut@i:
   365                           	opt callstack 0
   366  00003C                     Get7Seg@Digit:
   367                           	opt callstack 0
   368  00003C                     ___awdiv@dividend:
   369                           	opt callstack 0
   370  00003C                     ___awmod@dividend:
   371                           	opt callstack 0
   372  00003C                     ___aldiv@dividend:
   373                           	opt callstack 0
   374                           
   375                           ; 4 bytes @ 0x6
   376  00003C                     	ds	1
   377  00003D                     ?_i2c_Read:
   378                           	opt callstack 0
   379  00003D                     i2c_Write@data:
   380                           	opt callstack 0
   381  00003D                     i2c_Address@mode:
   382                           	opt callstack 0
   383                           
   384                           ; 1 bytes @ 0x7
   385  00003D                     	ds	1
   386  00003E                     ??_delay_1ms:
   387  00003E                     ??_Get7Seg:
   388  00003E                     STLED316s_SPI_SendData@Data:
   389                           	opt callstack 0
   390  00003E                     i2c_Address@address:
   391                           	opt callstack 0
   392  00003E                     readWeighingData@i:
   393                           	opt callstack 0
   394  00003E                     ___awdiv@divisor:
   395                           	opt callstack 0
   396  00003E                     ___awmod@divisor:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x8
   400  00003E                     	ds	1
   401  00003F                     STLED316s_SPI_SendData@temp:
   402                           	opt callstack 0
   403  00003F                     i2c_Address@l_address:
   404                           	opt callstack 0
   405  00003F                     i2c_Read@ack:
   406                           	opt callstack 0
   407                           
   408                           ; 1 bytes @ 0x9
   409  00003F                     	ds	1
   410  000040                     STLED316s_SPI_SendData@i:
   411                           	opt callstack 0
   412  000040                     Get7Seg@Data:
   413                           	opt callstack 0
   414  000040                     i2c_Read@i2cReadData:
   415                           	opt callstack 0
   416  000040                     ___awdiv@counter:
   417                           	opt callstack 0
   418  000040                     ___awmod@counter:
   419                           	opt callstack 0
   420  000040                     ___aldiv@divisor:
   421                           	opt callstack 0
   422                           
   423                           ; 4 bytes @ 0xA
   424  000040                     	ds	1
   425  000041                     STLED316s_SPI_SendData@t:
   426                           	opt callstack 0
   427  000041                     ___awdiv@sign:
   428                           	opt callstack 0
   429  000041                     ___awmod@sign:
   430                           	opt callstack 0
   431                           
   432                           ; 1 bytes @ 0xB
   433  000041                     	ds	1
   434  000042                     ??_InitSTLED316:
   435  000042                     ??_WriteSTLED316SErr:
   436  000042                     ??_WriteSTLED316SMode:
   437  000042                     WriteSTLED316SVibMode@v_mode:
   438                           	opt callstack 0
   439  000042                     ___awdiv@quotient:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0xC
   443  000042                     	ds	2
   444  000044                     InitSTLED316@Brightness:
   445                           	opt callstack 0
   446  000044                     WriteSTLED316SMode@msg:
   447                           	opt callstack 0
   448  000044                     WriteSTLED316SErr@msg:
   449                           	opt callstack 0
   450  000044                     ___aldiv@counter:
   451                           	opt callstack 0
   452  000044                     WriteSTLED316SData@number:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0xE
   456  000044                     	ds	1
   457  000045                     ??_MotorPosition_Init:
   458  000045                     ??_Homing_Again_Auto:
   459  000045                     ___aldiv@sign:
   460                           	opt callstack 0
   461                           
   462                           ; 1 bytes @ 0xF
   463  000045                     	ds	1
   464  000046                     WriteSTLED316SData@v_mode:
   465                           	opt callstack 0
   466  000046                     ___aldiv@quotient:
   467                           	opt callstack 0
   468                           
   469                           ; 4 bytes @ 0x10
   470  000046                     	ds	1
   471  000047                     WriteSTLED316SData@NUM_DIG0:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x11
   475  000047                     	ds	2
   476  000049                     WriteSTLED316SData@NUM_DIG1:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x13
   480  000049                     	ds	1
   481  00004A                     ?_read_i2c:
   482                           	opt callstack 0
   483  00004A                     write_i2c@address:
   484                           	opt callstack 0
   485  00004A                     read_i2c@address:
   486                           	opt callstack 0
   487                           
   488                           ; 4 bytes @ 0x14
   489  00004A                     	ds	1
   490  00004B                     WriteSTLED316SData@data3:
   491                           	opt callstack 0
   492                           
   493                           ; 1 bytes @ 0x15
   494  00004B                     	ds	1
   495  00004C                     WriteSTLED316SData@data4:
   496                           	opt callstack 0
   497                           
   498                           ; 1 bytes @ 0x16
   499  00004C                     	ds	1
   500  00004D                     ??_Homing_Again_Manual:
   501                           
   502                           ; 1 bytes @ 0x17
   503  00004D                     	ds	1
   504  00004E                     write_i2c@data:
   505                           	opt callstack 0
   506  00004E                     read_i2c@read_byte:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x18
   510  00004E                     	ds	2
   511  000050                     ??_main:
   512                           
   513                           ; 1 bytes @ 0x1A
   514  000050                     	ds	2
   515                           
   516 ;;
   517 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   518 ;;
   519 ;; *************** function _main *****************
   520 ;; Defined at:
   521 ;;		line 119 in file "main.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;Total ram usage:        2 bytes
   540 ;; Hardware stack levels required when called:    6
   541 ;; This function calls:
   542 ;;		_Homing_Again_Auto
   543 ;;		_Homing_Again_Manual
   544 ;;		_InitSTLED316
   545 ;;		_InitTimer1
   546 ;;		_MotorPosition_Init
   547 ;;		_ToggleVIB_Mode
   548 ;;		_Write1USART
   549 ;;		_WriteSTLED316SData
   550 ;;		_WriteSTLED316SErr
   551 ;;		_WriteSTLED316SVibMode
   552 ;;		_flush
   553 ;;		_flushOut
   554 ;;		_i2c_Init
   555 ;;		_init
   556 ;;		_initMotor
   557 ;;		_initUSART
   558 ;;		_read_i2c
   559 ;;		_write_i2c
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text0
   566  00018A                     __ptext0:
   567                           	opt callstack 0
   568  00018A                     _main:
   569                           	opt callstack 25
   570                           
   571                           ;main.c: 121:     GIE = 0;
   572                           
   573                           ;incstack = 0
   574  00018A  9EF2               	bcf	4082,7,c	;volatile
   575                           
   576                           ;main.c: 122:     init();
   577  00018C  EC4C  F00A         	call	_init	;wreg free
   578                           
   579                           ;main.c: 123:     InitSTLED316(0x77);
   580  000190  0E77               	movlw	119
   581  000192  ECC7  F008         	call	_InitSTLED316
   582                           
   583                           ;main.c: 124:     initMotor();
   584  000196  EC9D  F00B         	call	_initMotor	;wreg free
   585                           
   586                           ;main.c: 125:     i2c_Init();
   587  00019A  EC7F  F00B         	call	_i2c_Init	;wreg free
   588                           
   589                           ;main.c: 126:     initUSART();
   590  00019E  EC37  F00B         	call	_initUSART	;wreg free
   591                           
   592                           ;main.c: 127:     InitTimer1();
   593  0001A2  EC67  F00B         	call	_InitTimer1	;wreg free
   594                           
   595                           ;main.c: 129:     LATCbits.LATC1 = 0;
   596  0001A6  928B               	bcf	3979,1,c	;volatile
   597                           
   598                           ;main.c: 130:     LATAbits.LATA2 = 0;
   599  0001A8  9489               	bcf	3977,2,c	;volatile
   600                           
   601                           ;main.c: 131:     errorcounter = 30;
   602  0001AA  0E1E               	movlw	30
   603  0001AC  6E52               	movwf	_errorcounter,c	;volatile
   604  0001AE  0E00               	movlw	0
   605  0001B0  6E53               	movwf	_errorcounter+1,c	;volatile
   606  0001B2  0E00               	movlw	0
   607  0001B4  6E54               	movwf	_errorcounter+2,c	;volatile
   608  0001B6  0E00               	movlw	0
   609  0001B8  6E55               	movwf	_errorcounter+3,c	;volatile
   610                           
   611                           ;main.c: 135:    RCONbits.IPEN = 1;
   612  0001BA  8ED0               	bsf	4048,7,c	;volatile
   613                           
   614                           ;main.c: 138:    IPR1bits.RCIP = 1;
   615  0001BC  8A9F               	bsf	3999,5,c	;volatile
   616                           
   617                           ;main.c: 141:    INTCONbits.GIEH = 1;
   618  0001BE  8EF2               	bsf	4082,7,c	;volatile
   619                           
   620                           ;main.c: 142:     INTCONbits.GIE=1;
   621  0001C0  8EF2               	bsf	4082,7,c	;volatile
   622                           
   623                           ;main.c: 147:     WDTCONbits.SWDTEN = 0;
   624  0001C2  90C0               	bcf	4032,0,c	;volatile
   625                           
   626                           ;main.c: 149:     LATDbits.LATD0 = 1;
   627  0001C4  808C               	bsf	3980,0,c	;volatile
   628                           
   629                           ;main.c: 150:     LATDbits.LATD1 = 0;
   630  0001C6  928C               	bcf	3980,1,c	;volatile
   631                           
   632                           ;main.c: 152:     WriteSTLED316SData(32, 0xFF);
   633  0001C8  0E00               	movlw	0
   634  0001CA  6E45               	movwf	WriteSTLED316SData@number+1,c
   635  0001CC  0E20               	movlw	32
   636  0001CE  6E44               	movwf	WriteSTLED316SData@number,c
   637  0001D0  0EFF               	movlw	255
   638  0001D2  6E46               	movwf	WriteSTLED316SData@v_mode,c
   639  0001D4  EC7E  F008         	call	_WriteSTLED316SData	;wreg free
   640                           
   641                           ;main.c: 153:     _delay((unsigned long)((100)*(8000000/4000.0)));
   642  0001D8  0E02               	movlw	2
   643  0001DA  6E51               	movwf	(??_main+1)& (0+255),c
   644  0001DC  0E04               	movlw	4
   645  0001DE  6E50               	movwf	??_main& (0+255),c
   646  0001E0  0EBA               	movlw	186
   647  0001E2                     u2667:
   648  0001E2  2EE8               	decfsz	wreg,f,c
   649  0001E4  D7FE               	bra	u2667
   650  0001E6  2E50               	decfsz	??_main& (0+255),f,c
   651  0001E8  D7FC               	bra	u2667
   652  0001EA  2E51               	decfsz	(??_main+1)& (0+255),f,c
   653  0001EC  D7FA               	bra	u2667
   654  0001EE  D000               	nop2	
   655                           
   656                           ;main.c: 162:     INTCONbits.GIE=0;
   657  0001F0  9EF2               	bcf	4082,7,c	;volatile
   658                           
   659                           ;main.c: 163:     ETemp = read_i2c(0x0010);
   660  0001F2  0E10               	movlw	16
   661  0001F4  6E4A               	movwf	read_i2c@address,c
   662  0001F6  0E00               	movlw	0
   663  0001F8  6E4B               	movwf	read_i2c@address+1,c
   664  0001FA  0E00               	movlw	0
   665  0001FC  6E4C               	movwf	read_i2c@address+2,c
   666  0001FE  0E00               	movlw	0
   667  000200  6E4D               	movwf	read_i2c@address+3,c
   668  000202  ECC8  F009         	call	_read_i2c	;wreg free
   669  000206  C04A  F021         	movff	?_read_i2c,_ETemp
   670  00020A  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
   671                           
   672                           ;main.c: 164:     INTCONbits.GIE=1;
   673  00020E  8EF2               	bsf	4082,7,c	;volatile
   674                           
   675                           ;main.c: 166:     vibration_mode = ETemp & 0x00FF;
   676  000210  C021  F030         	movff	_ETemp,_vibration_mode
   677                           
   678                           ;main.c: 167:     if(vibration_mode>1)
   679  000214  0E01               	movlw	1
   680  000216  6430               	cpfsgt	_vibration_mode,c
   681  000218  D011               	goto	l3523
   682                           
   683                           ;main.c: 168:     {;main.c: 169:         vibration_mode = 1;
   684  00021A  0E01               	movlw	1
   685  00021C  6E30               	movwf	_vibration_mode,c
   686                           
   687                           ;main.c: 171:         INTCONbits.GIE=0;
   688  00021E  9EF2               	bcf	4082,7,c	;volatile
   689                           
   690                           ;main.c: 172:         write_i2c(0x0010, vibration_mode);
   691  000220  0E10               	movlw	16
   692  000222  6E4A               	movwf	write_i2c@address,c
   693  000224  0E00               	movlw	0
   694  000226  6E4B               	movwf	write_i2c@address+1,c
   695  000228  0E00               	movlw	0
   696  00022A  6E4C               	movwf	write_i2c@address+2,c
   697  00022C  0E00               	movlw	0
   698  00022E  6E4D               	movwf	write_i2c@address+3,c
   699  000230  C030  F04E         	movff	_vibration_mode,write_i2c@data
   700  000234  6A4F               	clrf	write_i2c@data+1,c
   701  000236  EC72  F00A         	call	_write_i2c	;wreg free
   702                           
   703                           ;main.c: 173:         INTCONbits.GIE=1;
   704  00023A  8EF2               	bsf	4082,7,c	;volatile
   705  00023C                     l3523:
   706                           
   707                           ;main.c: 176:     NUM = 1;
   708  00023C  0E00               	movlw	0
   709  00023E  6E18               	movwf	_NUM+1,c
   710  000240  0E01               	movlw	1
   711  000242  6E17               	movwf	_NUM,c
   712                           
   713                           ;main.c: 177:     WriteSTLED316SData(NUM, vibration_mode);
   714  000244  C017  F044         	movff	_NUM,WriteSTLED316SData@number
   715  000248  C018  F045         	movff	_NUM+1,WriteSTLED316SData@number+1
   716  00024C  C030  F046         	movff	_vibration_mode,WriteSTLED316SData@v_mode
   717  000250  EC7E  F008         	call	_WriteSTLED316SData	;wreg free
   718                           
   719                           ;main.c: 178:     NUM_REC = 1;
   720  000254  0E00               	movlw	0
   721  000256  6E16               	movwf	_NUM_REC+1,c
   722  000258  0E01               	movlw	1
   723  00025A  6E15               	movwf	_NUM_REC,c
   724                           
   725                           ;main.c: 183:     INTCONbits.GIE=0;
   726  00025C  9EF2               	bcf	4082,7,c	;volatile
   727                           
   728                           ;main.c: 184:     ETemp = read_i2c(0x0020);
   729  00025E  0E20               	movlw	32
   730  000260  6E4A               	movwf	read_i2c@address,c
   731  000262  0E00               	movlw	0
   732  000264  6E4B               	movwf	read_i2c@address+1,c
   733  000266  0E00               	movlw	0
   734  000268  6E4C               	movwf	read_i2c@address+2,c
   735  00026A  0E00               	movlw	0
   736  00026C  6E4D               	movwf	read_i2c@address+3,c
   737  00026E  ECC8  F009         	call	_read_i2c	;wreg free
   738  000272  C04A  F021         	movff	?_read_i2c,_ETemp
   739  000276  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
   740                           
   741                           ;main.c: 185:     INTCONbits.GIE=1;
   742  00027A  8EF2               	bsf	4082,7,c	;volatile
   743                           
   744                           ;main.c: 187:     Device_ID = ETemp & 0x00FF;
   745  00027C  5021               	movf	_ETemp,w,c
   746  00027E  6E1B               	movwf	_Device_ID,c
   747  000280  6A1C               	clrf	_Device_ID+1,c
   748                           
   749                           ;main.c: 188:     if(Device_ID<0x31 || Device_ID>0x3A)
   750  000282  501C               	movf	_Device_ID+1,w,c
   751  000284  E104               	bnz	u2030
   752  000286  0E31               	movlw	49
   753  000288  5C1B               	subwf	_Device_ID,w,c
   754  00028A  A0D8               	btfss	status,0,c
   755  00028C  D006               	goto	u2040
   756  00028E                     u2030:
   757  00028E  501C               	movf	_Device_ID+1,w,c
   758  000290  E104               	bnz	u2040
   759  000292  0E3B               	movlw	59
   760  000294  5C1B               	subwf	_Device_ID,w,c
   761  000296  A0D8               	btfss	status,0,c
   762  000298  D014               	goto	l3545
   763  00029A                     u2040:
   764                           
   765                           ;main.c: 189:     {;main.c: 190:         Device_ID=0x31;
   766  00029A  0E00               	movlw	0
   767  00029C  6E1C               	movwf	_Device_ID+1,c
   768  00029E  0E31               	movlw	49
   769  0002A0  6E1B               	movwf	_Device_ID,c
   770                           
   771                           ;main.c: 192:         INTCONbits.GIE=0;
   772  0002A2  9EF2               	bcf	4082,7,c	;volatile
   773                           
   774                           ;main.c: 193:         write_i2c(0x0020, Device_ID);
   775  0002A4  0E20               	movlw	32
   776  0002A6  6E4A               	movwf	write_i2c@address,c
   777  0002A8  0E00               	movlw	0
   778  0002AA  6E4B               	movwf	write_i2c@address+1,c
   779  0002AC  0E00               	movlw	0
   780  0002AE  6E4C               	movwf	write_i2c@address+2,c
   781  0002B0  0E00               	movlw	0
   782  0002B2  6E4D               	movwf	write_i2c@address+3,c
   783  0002B4  C01B  F04E         	movff	_Device_ID,write_i2c@data
   784  0002B8  C01C  F04F         	movff	_Device_ID+1,write_i2c@data+1
   785  0002BC  EC72  F00A         	call	_write_i2c	;wreg free
   786                           
   787                           ;main.c: 194:         INTCONbits.GIE=1;
   788  0002C0  8EF2               	bsf	4082,7,c	;volatile
   789  0002C2                     l3545:
   790                           
   791                           ;main.c: 200:     INTCONbits.GIE=0;
   792  0002C2  9EF2               	bcf	4082,7,c	;volatile
   793                           
   794                           ;main.c: 201:     ETemp = read_i2c(0x0060);
   795  0002C4  0E60               	movlw	96
   796  0002C6  6E4A               	movwf	read_i2c@address,c
   797  0002C8  0E00               	movlw	0
   798  0002CA  6E4B               	movwf	read_i2c@address+1,c
   799  0002CC  0E00               	movlw	0
   800  0002CE  6E4C               	movwf	read_i2c@address+2,c
   801  0002D0  0E00               	movlw	0
   802  0002D2  6E4D               	movwf	read_i2c@address+3,c
   803  0002D4  ECC8  F009         	call	_read_i2c	;wreg free
   804  0002D8  C04A  F021         	movff	?_read_i2c,_ETemp
   805  0002DC  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
   806                           
   807                           ;main.c: 202:     INTCONbits.GIE=1;
   808  0002E0  8EF2               	bsf	4082,7,c	;volatile
   809                           
   810                           ;main.c: 204:     pause_Time = ETemp & 0x00FF;
   811  0002E2  C021  F02D         	movff	_ETemp,_pause_Time	;volatile
   812                           
   813                           ;main.c: 205:     if(pause_Time<0x30 || pause_Time>0x35)
   814  0002E6  0E2F               	movlw	47
   815  0002E8  642D               	cpfsgt	_pause_Time,c	;volatile
   816  0002EA  D003               	goto	u2060
   817  0002EC  0E35               	movlw	53
   818  0002EE  642D               	cpfsgt	_pause_Time,c	;volatile
   819  0002F0  D032               	goto	l3579
   820  0002F2                     u2060:
   821                           
   822                           ;main.c: 206:     {;main.c: 207:         pause_Time = 0x30;
   823  0002F2  0E30               	movlw	48
   824  0002F4  6E2D               	movwf	_pause_Time,c	;volatile
   825                           
   826                           ;main.c: 208:         Motor_Pause_Time=0;
   827  0002F6  0E00               	movlw	0
   828  0002F8  6E1A               	movwf	_Motor_Pause_Time+1,c
   829  0002FA  0E00               	movlw	0
   830  0002FC  6E19               	movwf	_Motor_Pause_Time,c
   831                           
   832                           ;main.c: 210:         INTCONbits.GIE=0;
   833  0002FE  9EF2               	bcf	4082,7,c	;volatile
   834                           
   835                           ;main.c: 211:         write_i2c(0x0060, pause_Time);
   836  000300  0E60               	movlw	96
   837  000302  6E4A               	movwf	write_i2c@address,c
   838  000304  0E00               	movlw	0
   839  000306  6E4B               	movwf	write_i2c@address+1,c
   840  000308  0E00               	movlw	0
   841  00030A  6E4C               	movwf	write_i2c@address+2,c
   842  00030C  0E00               	movlw	0
   843  00030E  6E4D               	movwf	write_i2c@address+3,c
   844  000310  C02D  F04E         	movff	_pause_Time,write_i2c@data	;volatile
   845  000314  6A4F               	clrf	write_i2c@data+1,c
   846  000316  EC72  F00A         	call	_write_i2c	;wreg free
   847                           
   848                           ;main.c: 212:         INTCONbits.GIE=1;
   849  00031A  8EF2               	bsf	4082,7,c	;volatile
   850                           
   851                           ;main.c: 213:     }
   852  00031C  D037               	goto	l154
   853  00031E                     l3565:
   854                           
   855                           ;main.c: 220:                 Motor_Pause_Time = 0;
   856  00031E  0E00               	movlw	0
   857  000320  6E1A               	movwf	_Motor_Pause_Time+1,c
   858  000322  0E00               	movlw	0
   859  000324  6E19               	movwf	_Motor_Pause_Time,c
   860                           
   861                           ;main.c: 221:                 pause_Time = 0x30;
   862  000326  0E30               	movlw	48
   863  000328  6E2D               	movwf	_pause_Time,c	;volatile
   864                           
   865                           ;main.c: 222:                 break;
   866  00032A  D030               	goto	l154
   867  00032C                     l3567:
   868                           
   869                           ;main.c: 225:                 Motor_Pause_Time = 1000;
   870  00032C  0E03               	movlw	3
   871  00032E  6E1A               	movwf	_Motor_Pause_Time+1,c
   872  000330  0EE8               	movlw	232
   873  000332  D00F               	goto	L4
   874  000334                     l3569:
   875                           
   876                           ;main.c: 229:                 Motor_Pause_Time = 2000;
   877  000334  0E07               	movlw	7
   878  000336  6E1A               	movwf	_Motor_Pause_Time+1,c
   879  000338  0ED0               	movlw	208
   880  00033A  D00B               	goto	L4
   881  00033C                     l3571:
   882                           
   883                           ;main.c: 233:                  Motor_Pause_Time = 3000;
   884  00033C  0E0B               	movlw	11
   885  00033E  6E1A               	movwf	_Motor_Pause_Time+1,c
   886  000340  0EB8               	movlw	184
   887  000342  D007               	goto	L4
   888  000344                     l3573:
   889                           
   890                           ;main.c: 237:                 Motor_Pause_Time = 4000;
   891  000344  0E0F               	movlw	15
   892  000346  6E1A               	movwf	_Motor_Pause_Time+1,c
   893  000348  0EA0               	movlw	160
   894  00034A  D003               	goto	L4
   895  00034C                     l3575:
   896                           
   897                           ;main.c: 241:                 Motor_Pause_Time = 5000;
   898  00034C  0E13               	movlw	19
   899  00034E  6E1A               	movwf	_Motor_Pause_Time+1,c
   900  000350  0E88               	movlw	136
   901  000352                     L4:
   902  000352  6E19               	movwf	_Motor_Pause_Time,c
   903                           
   904                           ;main.c: 242:                 break;
   905  000354  D01B               	goto	l154
   906  000356                     l3579:
   907  000356  502D               	movf	_pause_Time,w,c	;volatile
   908  000358  6E50               	movwf	??_main& (0+255),c
   909  00035A  6A51               	clrf	(??_main+1)& (0+255),c
   910                           
   911                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   912                           ; Switch size 1, requested type "simple"
   913                           ; Number of cases is 1, Range of values is 0 to 0
   914                           ; switch strategies available:
   915                           ; Name         Instructions Cycles
   916                           ; simple_byte            4     3 (average)
   917                           ;	Chosen strategy is simple_byte
   918  00035C  5051               	movf	??_main+1,w,c
   919  00035E  0A00               	xorlw	0	; case 0
   920  000360  A4D8               	btfss	status,2,c
   921  000362  D7DD               	goto	l3565
   922                           
   923                           ; Switch size 1, requested type "simple"
   924                           ; Number of cases is 6, Range of values is 48 to 53
   925                           ; switch strategies available:
   926                           ; Name         Instructions Cycles
   927                           ; simple_byte           19    10 (average)
   928                           ;	Chosen strategy is simple_byte
   929  000364  5050               	movf	??_main,w,c
   930  000366  0A30               	xorlw	48	; case 48
   931  000368  B4D8               	btfsc	status,2,c
   932  00036A  D7D9               	goto	l3565
   933  00036C  0A01               	xorlw	1	; case 49
   934  00036E  B4D8               	btfsc	status,2,c
   935  000370  D7DD               	goto	l3567
   936  000372  0A03               	xorlw	3	; case 50
   937  000374  B4D8               	btfsc	status,2,c
   938  000376  D7DE               	goto	l3569
   939  000378  0A01               	xorlw	1	; case 51
   940  00037A  B4D8               	btfsc	status,2,c
   941  00037C  D7DF               	goto	l3571
   942  00037E  0A07               	xorlw	7	; case 52
   943  000380  B4D8               	btfsc	status,2,c
   944  000382  D7E0               	goto	l3573
   945  000384  0A01               	xorlw	1	; case 53
   946  000386  B4D8               	btfsc	status,2,c
   947  000388  D7E1               	goto	l3575
   948  00038A  D7C9               	goto	l3565
   949  00038C                     l154:
   950                           
   951                           ;main.c: 249:     INTCONbits.GIE=0;
   952  00038C  9EF2               	bcf	4082,7,c	;volatile
   953                           
   954                           ;main.c: 250:     ETemp = read_i2c(0x0050);
   955  00038E  0E50               	movlw	80
   956  000390  6E4A               	movwf	read_i2c@address,c
   957  000392  0E00               	movlw	0
   958  000394  6E4B               	movwf	read_i2c@address+1,c
   959  000396  0E00               	movlw	0
   960  000398  6E4C               	movwf	read_i2c@address+2,c
   961  00039A  0E00               	movlw	0
   962  00039C  6E4D               	movwf	read_i2c@address+3,c
   963  00039E  ECC8  F009         	call	_read_i2c	;wreg free
   964  0003A2  C04A  F021         	movff	?_read_i2c,_ETemp
   965  0003A6  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
   966                           
   967                           ;main.c: 251:     INTCONbits.GIE=1;
   968  0003AA  8EF2               	bsf	4082,7,c	;volatile
   969                           
   970                           ;main.c: 253:     delay_motor_stop_time = ETemp & 0x00FF;
   971  0003AC  C021  F02B         	movff	_ETemp,_delay_motor_stop_time	;volatile
   972                           
   973                           ;main.c: 254:     if(delay_motor_stop_time>0x96)
   974  0003B0  0E96               	movlw	150
   975  0003B2  642B               	cpfsgt	_delay_motor_stop_time,c	;volatile
   976  0003B4  D016               	goto	l164
   977                           
   978                           ;main.c: 255:     {;main.c: 256:         delay_motor_stop_time=0x00;
   979  0003B6  0E00               	movlw	0
   980  0003B8  6E2B               	movwf	_delay_motor_stop_time,c	;volatile
   981                           
   982                           ;main.c: 258:         INTCONbits.GIE=0;
   983  0003BA  9EF2               	bcf	4082,7,c	;volatile
   984                           
   985                           ;main.c: 259:         write_i2c(0x0050, delay_motor_stop_time);
   986  0003BC  0E50               	movlw	80
   987  0003BE  6E4A               	movwf	write_i2c@address,c
   988  0003C0  0E00               	movlw	0
   989  0003C2  6E4B               	movwf	write_i2c@address+1,c
   990  0003C4  0E00               	movlw	0
   991  0003C6  6E4C               	movwf	write_i2c@address+2,c
   992  0003C8  0E00               	movlw	0
   993  0003CA  6E4D               	movwf	write_i2c@address+3,c
   994  0003CC  C02B  F04E         	movff	_delay_motor_stop_time,write_i2c@data	;volatile
   995  0003D0  6A4F               	clrf	write_i2c@data+1,c
   996  0003D2  EC72  F00A         	call	_write_i2c	;wreg free
   997                           
   998                           ;main.c: 260:         INTCONbits.GIE=1;
   999  0003D6  8EF2               	bsf	4082,7,c	;volatile
  1000                           
  1001                           ;main.c: 262:         Motor_Stop_Delay_Time=0;
  1002  0003D8  0E00               	movlw	0
  1003  0003DA  6E1E               	movwf	_Motor_Stop_Delay_Time+1,c
  1004  0003DC  0E00               	movlw	0
  1005  0003DE  6E1D               	movwf	_Motor_Stop_Delay_Time,c
  1006                           
  1007                           ;main.c: 263:     }
  1008  0003E0  D003               	goto	l165
  1009  0003E2                     l164:
  1010                           
  1011                           ;main.c: 265:     {;main.c: 266:         Motor_Stop_Delay_Time = delay_motor_stop_time;
  1012  0003E2  C02B  F01D         	movff	_delay_motor_stop_time,_Motor_Stop_Delay_Time	;volatile
  1013  0003E6  6A1E               	clrf	_Motor_Stop_Delay_Time+1,c
  1014  0003E8                     l165:
  1015                           
  1016                           ;main.c: 272:     INTCONbits.GIE=0;
  1017  0003E8  9EF2               	bcf	4082,7,c	;volatile
  1018                           
  1019                           ;main.c: 273:     ETemp = read_i2c(0x0040);
  1020  0003EA  0E40               	movlw	64
  1021  0003EC  6E4A               	movwf	read_i2c@address,c
  1022  0003EE  0E00               	movlw	0
  1023  0003F0  6E4B               	movwf	read_i2c@address+1,c
  1024  0003F2  0E00               	movlw	0
  1025  0003F4  6E4C               	movwf	read_i2c@address+2,c
  1026  0003F6  0E00               	movlw	0
  1027  0003F8  6E4D               	movwf	read_i2c@address+3,c
  1028  0003FA  ECC8  F009         	call	_read_i2c	;wreg free
  1029  0003FE  C04A  F021         	movff	?_read_i2c,_ETemp
  1030  000402  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
  1031                           
  1032                           ;main.c: 274:     INTCONbits.GIE=1
  1033  000406  8EF2               	bsf	4082,7,c	;volatile
  1034                           
  1035                           ;main.c: 276:     vib_Time = ETemp & 0x00FF;
  1036  000408  C021  F02C         	movff	_ETemp,_vib_Time	;volatile
  1037                           
  1038                           ;main.c: 277:     if( (vib_Time!=0x81 && vib_Time!=0x82 && vib_Time!=0x83 && vib_Time!=0
      +                          x84 && vib_Time!=0x85) )
  1039  00040C  0E81               	movlw	129
  1040  00040E  182C               	xorwf	_vib_Time,w,c	;volatile
  1041  000410  B4D8               	btfsc	status,2,c
  1042  000412  D03E               	goto	l3635
  1043  000414  0E82               	movlw	130
  1044  000416  182C               	xorwf	_vib_Time,w,c	;volatile
  1045  000418  B4D8               	btfsc	status,2,c
  1046  00041A  D03A               	goto	l3635
  1047  00041C  0E83               	movlw	131
  1048  00041E  182C               	xorwf	_vib_Time,w,c	;volatile
  1049  000420  B4D8               	btfsc	status,2,c
  1050  000422  D036               	goto	l3635
  1051  000424  0E84               	movlw	132
  1052  000426  182C               	xorwf	_vib_Time,w,c	;volatile
  1053  000428  B4D8               	btfsc	status,2,c
  1054  00042A  D032               	goto	l3635
  1055  00042C  0E85               	movlw	133
  1056  00042E  182C               	xorwf	_vib_Time,w,c	;volatile
  1057  000430  B4D8               	btfsc	status,2,c
  1058  000432  D02E               	goto	l3635
  1059                           
  1060                           ;main.c: 278:     {;main.c: 279:         Vmotor_Time = 2000;
  1061  000434  0E07               	movlw	7
  1062  000436  6E57               	movwf	_Vmotor_Time+1,c
  1063  000438  0ED0               	movlw	208
  1064  00043A  6E56               	movwf	_Vmotor_Time,c
  1065                           
  1066                           ;main.c: 280:         vib_Time = 0x82;
  1067  00043C  0E82               	movlw	130
  1068  00043E  6E2C               	movwf	_vib_Time,c	;volatile
  1069                           
  1070                           ;main.c: 282:         INTCONbits.GIE=0;
  1071  000440  9EF2               	bcf	4082,7,c	;volatile
  1072                           
  1073                           ;main.c: 283:         write_i2c(0x0040,vib_Time);
  1074  000442  0E40               	movlw	64
  1075  000444  6E4A               	movwf	write_i2c@address,c
  1076  000446  0E00               	movlw	0
  1077  000448  6E4B               	movwf	write_i2c@address+1,c
  1078  00044A  0E00               	movlw	0
  1079  00044C  6E4C               	movwf	write_i2c@address+2,c
  1080  00044E  0E00               	movlw	0
  1081  000450  6E4D               	movwf	write_i2c@address+3,c
  1082  000452  C02C  F04E         	movff	_vib_Time,write_i2c@data	;volatile
  1083  000456  6A4F               	clrf	write_i2c@data+1,c
  1084  000458  EC72  F00A         	call	_write_i2c	;wreg free
  1085                           
  1086                           ;main.c: 284:         INTCONbits.GIE=1;
  1087  00045C  8EF2               	bsf	4082,7,c	;volatile
  1088                           
  1089                           ;main.c: 285:     }
  1090  00045E  D030               	goto	l3637
  1091  000460                     l3623:
  1092                           
  1093                           ;main.c: 291:                 Vmotor_Time=1000;
  1094  000460  0E03               	movlw	3
  1095  000462  6E57               	movwf	_Vmotor_Time+1,c
  1096  000464  0EE8               	movlw	232
  1097  000466  D012               	goto	L7
  1098  000468                     l3625:
  1099                           
  1100                           ;main.c: 295:                 Vmotor_Time=2000;
  1101  000468  0E07               	movlw	7
  1102  00046A  6E57               	movwf	_Vmotor_Time+1,c
  1103  00046C  0ED0               	movlw	208
  1104  00046E  6E56               	movwf	_Vmotor_Time,c
  1105                           
  1106                           ;main.c: 296:                 vib_Time=0x82;
  1107  000470  0E82               	movlw	130
  1108  000472  6E2C               	movwf	_vib_Time,c	;volatile
  1109                           
  1110                           ;main.c: 297:                 break;
  1111  000474  D025               	goto	l3637
  1112  000476                     l3627:
  1113                           
  1114                           ;main.c: 299:                 Vmotor_Time=3000;
  1115  000476  0E0B               	movlw	11
  1116  000478  6E57               	movwf	_Vmotor_Time+1,c
  1117  00047A  0EB8               	movlw	184
  1118  00047C  D007               	goto	L7
  1119  00047E                     l3629:
  1120                           
  1121                           ;main.c: 302:                 Vmotor_Time=4000;
  1122  00047E  0E0F               	movlw	15
  1123  000480  6E57               	movwf	_Vmotor_Time+1,c
  1124  000482  0EA0               	movlw	160
  1125  000484  D003               	goto	L7
  1126  000486                     l3631:
  1127                           
  1128                           ;main.c: 305:                 Vmotor_Time=5000;
  1129  000486  0E13               	movlw	19
  1130  000488  6E57               	movwf	_Vmotor_Time+1,c
  1131  00048A  0E88               	movlw	136
  1132  00048C                     L7:
  1133  00048C  6E56               	movwf	_Vmotor_Time,c
  1134                           
  1135                           ;main.c: 306:                 break;
  1136  00048E  D018               	goto	l3637
  1137  000490                     l3635:
  1138  000490  502C               	movf	_vib_Time,w,c	;volatile
  1139  000492  6E50               	movwf	??_main& (0+255),c
  1140  000494  6A51               	clrf	(??_main+1)& (0+255),c
  1141                           
  1142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1143                           ; Switch size 1, requested type "simple"
  1144                           ; Number of cases is 1, Range of values is 0 to 0
  1145                           ; switch strategies available:
  1146                           ; Name         Instructions Cycles
  1147                           ; simple_byte            4     3 (average)
  1148                           ;	Chosen strategy is simple_byte
  1149  000496  5051               	movf	??_main+1,w,c
  1150  000498  0A00               	xorlw	0	; case 0
  1151  00049A  A4D8               	btfss	status,2,c
  1152  00049C  D7E5               	goto	l3625
  1153                           
  1154                           ; Switch size 1, requested type "simple"
  1155                           ; Number of cases is 5, Range of values is 129 to 133
  1156                           ; switch strategies available:
  1157                           ; Name         Instructions Cycles
  1158                           ; simple_byte           16     9 (average)
  1159                           ;	Chosen strategy is simple_byte
  1160  00049E  5050               	movf	??_main,w,c
  1161  0004A0  0A81               	xorlw	129	; case 129
  1162  0004A2  B4D8               	btfsc	status,2,c
  1163  0004A4  D7DD               	goto	l3623
  1164  0004A6  0A03               	xorlw	3	; case 130
  1165  0004A8  B4D8               	btfsc	status,2,c
  1166  0004AA  D7DE               	goto	l3625
  1167  0004AC  0A01               	xorlw	1	; case 131
  1168  0004AE  B4D8               	btfsc	status,2,c
  1169  0004B0  D7E2               	goto	l3627
  1170  0004B2  0A07               	xorlw	7	; case 132
  1171  0004B4  B4D8               	btfsc	status,2,c
  1172  0004B6  D7E3               	goto	l3629
  1173  0004B8  0A01               	xorlw	1	; case 133
  1174  0004BA  B4D8               	btfsc	status,2,c
  1175  0004BC  D7E4               	goto	l3631
  1176  0004BE  D7D4               	goto	l3625
  1177  0004C0                     l3637:
  1178                           
  1179                           ;main.c: 313:     PWM_reg = 0x3F;
  1180  0004C0  0E3F               	movlw	63
  1181  0004C2  6E58               	movwf	_PWM_reg,c
  1182                           
  1183                           ;main.c: 315:     INTCONbits.GIE=0;
  1184  0004C4  9EF2               	bcf	4082,7,c	;volatile
  1185                           
  1186                           ;main.c: 316:     ETemp = read_i2c(0x0030);
  1187  0004C6  0E30               	movlw	48
  1188  0004C8  6E4A               	movwf	read_i2c@address,c
  1189  0004CA  0E00               	movlw	0
  1190  0004CC  6E4B               	movwf	read_i2c@address+1,c
  1191  0004CE  0E00               	movlw	0
  1192  0004D0  6E4C               	movwf	read_i2c@address+2,c
  1193  0004D2  0E00               	movlw	0
  1194  0004D4  6E4D               	movwf	read_i2c@address+3,c
  1195  0004D6  ECC8  F009         	call	_read_i2c	;wreg free
  1196  0004DA  C04A  F021         	movff	?_read_i2c,_ETemp
  1197  0004DE  C04B  F022         	movff	?_read_i2c+1,_ETemp+1
  1198                           
  1199                           ;main.c: 317:     INTCONbits.GIE=1;
  1200  0004E2  8EF2               	bsf	4082,7,c	;volatile
  1201                           
  1202                           ;main.c: 319:     PWM_reg = ETemp & 0x00FF;
  1203  0004E4  C021  F058         	movff	_ETemp,_PWM_reg
  1204                           
  1205                           ;main.c: 321:     if( (PWM_reg!=0x00 && PWM_reg!=0x3F && PWM_reg!=0x7F) )
  1206  0004E8  5058               	movf	_PWM_reg,w,c
  1207  0004EA  B4D8               	btfsc	status,2,c
  1208  0004EC  D019               	goto	l3661
  1209  0004EE  0E3F               	movlw	63
  1210  0004F0  1858               	xorwf	_PWM_reg,w,c
  1211  0004F2  B4D8               	btfsc	status,2,c
  1212  0004F4  D015               	goto	l3661
  1213  0004F6  0E7F               	movlw	127
  1214  0004F8  1858               	xorwf	_PWM_reg,w,c
  1215  0004FA  B4D8               	btfsc	status,2,c
  1216  0004FC  D011               	goto	l3661
  1217                           
  1218                           ;main.c: 322:     {;main.c: 323:         PWM_reg=0x3F;
  1219  0004FE  0E3F               	movlw	63
  1220  000500  6E58               	movwf	_PWM_reg,c
  1221                           
  1222                           ;main.c: 325:         INTCONbits.GIE=0;
  1223  000502  9EF2               	bcf	4082,7,c	;volatile
  1224                           
  1225                           ;main.c: 326:         write_i2c(0x0030,PWM_reg);
  1226  000504  0E30               	movlw	48
  1227  000506  6E4A               	movwf	write_i2c@address,c
  1228  000508  0E00               	movlw	0
  1229  00050A  6E4B               	movwf	write_i2c@address+1,c
  1230  00050C  0E00               	movlw	0
  1231  00050E  6E4C               	movwf	write_i2c@address+2,c
  1232  000510  0E00               	movlw	0
  1233  000512  6E4D               	movwf	write_i2c@address+3,c
  1234  000514  C058  F04E         	movff	_PWM_reg,write_i2c@data
  1235  000518  6A4F               	clrf	write_i2c@data+1,c
  1236  00051A  EC72  F00A         	call	_write_i2c	;wreg free
  1237                           
  1238                           ;main.c: 327:         INTCONbits.GIE=1;
  1239  00051E  8EF2               	bsf	4082,7,c	;volatile
  1240  000520                     l3661:
  1241                           
  1242                           ;main.c: 330:     errorcounter = 30;
  1243  000520  0E1E               	movlw	30
  1244  000522  6E52               	movwf	_errorcounter,c	;volatile
  1245  000524  0E00               	movlw	0
  1246  000526  6E53               	movwf	_errorcounter+1,c	;volatile
  1247  000528  0E00               	movlw	0
  1248  00052A  6E54               	movwf	_errorcounter+2,c	;volatile
  1249  00052C  0E00               	movlw	0
  1250  00052E  6E55               	movwf	_errorcounter+3,c	;volatile
  1251                           
  1252                           ;main.c: 331:     MotorPosition_Init();
  1253  000530  ECD8  F006         	call	_MotorPosition_Init	;wreg free
  1254  000534                     l177:
  1255  000534  0004               	clrwdt		;# 
  1256                           
  1257                           ;main.c: 339:         errorcounter = 30;
  1258  000536  0E1E               	movlw	30
  1259  000538  6E52               	movwf	_errorcounter,c	;volatile
  1260  00053A  0E00               	movlw	0
  1261  00053C  6E53               	movwf	_errorcounter+1,c	;volatile
  1262  00053E  0E00               	movlw	0
  1263  000540  6E54               	movwf	_errorcounter+2,c	;volatile
  1264  000542  0E00               	movlw	0
  1265  000544  6E55               	movwf	_errorcounter+3,c	;volatile
  1266                           
  1267                           ;main.c: 341:         switch(OpMode)
  1268  000546  D25B               	goto	l3901
  1269  000548                     l179:
  1270                           
  1271                           ;main.c: 348:                 NUM = NUM_REC;
  1272  000548  C015  F017         	movff	_NUM_REC,_NUM
  1273  00054C  C016  F018         	movff	_NUM_REC+1,_NUM+1
  1274                           
  1275                           ;main.c: 350:                 if (PORTBbits.RB4 == 0)
  1276  000550  B881               	btfsc	3969,4,c	;volatile
  1277  000552  D014               	goto	u2180
  1278  000554                     u2160:
  1279                           
  1280                           ;main.c: 353:                     {;main.c: 354:                         if(PORTBbits.RB
      +                          2 == 0)
  1281                           
  1282                           ;main.c: 351:                 {;main.c: 352:                     do
  1283  000554  A481               	btfss	3969,2,c	;volatile
  1284                           
  1285                           ;main.c: 355:                         {;main.c: 356:                             ToggleV
      +                          IB_Mode();
  1286  000556  EC0B  F00B         	call	_ToggleVIB_Mode	;wreg free
  1287                           
  1288                           ;main.c: 359:                         WriteSTLED316SVibMode(vibration_mode);
  1289                           
  1290                           ;main.c: 357:                         }
  1291  00055A  5030               	movf	_vibration_mode,w,c
  1292  00055C  ECBA  F00A         	call	_WriteSTLED316SVibMode
  1293                           
  1294                           ;main.c: 360:                          _delay((unsigned long)((100)*(8000000/4000.0)));
  1295  000560  0E02               	movlw	2
  1296  000562  6E51               	movwf	(??_main+1)& (0+255),c
  1297  000564  0E04               	movlw	4
  1298  000566  6E50               	movwf	??_main& (0+255),c
  1299  000568  0EBA               	movlw	186
  1300  00056A                     u2677:
  1301  00056A  2EE8               	decfsz	wreg,f,c
  1302  00056C  D7FE               	bra	u2677
  1303  00056E  2E50               	decfsz	??_main& (0+255),f,c
  1304  000570  D7FC               	bra	u2677
  1305  000572  2E51               	decfsz	(??_main+1)& (0+255),f,c
  1306  000574  D7FA               	bra	u2677
  1307  000576  D000               	nop2	
  1308                           
  1309                           ;main.c: 362:                     }while (PORTBbits.RB4 == 0);
  1310  000578  A881               	btfss	3969,4,c	;volatile
  1311  00057A  D7EC               	goto	u2160
  1312  00057C                     u2180:
  1313                           
  1314                           ;main.c: 365:                 if ((PORTBbits.RB3 == 0) && NUM != 99)
  1315                           
  1316                           ;main.c: 363:                 }
  1317  00057C  B681               	btfsc	3969,3,c	;volatile
  1318  00057E  D00D               	goto	u2210
  1319  000580  0E63               	movlw	99
  1320  000582  1817               	xorwf	_NUM,w,c
  1321  000584  1018               	iorwf	_NUM+1,w,c
  1322  000586  B4D8               	btfsc	status,2,c
  1323  000588  D008               	goto	u2210
  1324                           
  1325                           ;main.c: 366:                 {;main.c: 367:                     NUM = NUM + 1;
  1326  00058A  0E01               	movlw	1
  1327  00058C  2417               	addwf	_NUM,w,c
  1328  00058E  6E17               	movwf	_NUM,c
  1329  000590  0E00               	movlw	0
  1330  000592  2018               	addwfc	_NUM+1,w,c
  1331  000594  6E18               	movwf	_NUM+1,c
  1332  000596                     l185:
  1333  000596  A681               	btfss	3969,3,c	;volatile
  1334  000598  D7FE               	goto	l185
  1335  00059A                     u2210:
  1336                           
  1337                           ;main.c: 371:                 if (PORTAbits.RA5 == 0 && NUM != 0)
  1338                           
  1339                           ;main.c: 369:                 }
  1340  00059A  BA80               	btfsc	3968,5,c	;volatile
  1341  00059C  D00C               	goto	u2240
  1342  00059E  5017               	movf	_NUM,w,c
  1343  0005A0  1018               	iorwf	_NUM+1,w,c
  1344  0005A2  B4D8               	btfsc	status,2,c
  1345  0005A4  D008               	goto	u2240
  1346                           
  1347                           ;main.c: 372:                 {;main.c: 373:                     NUM = NUM - 1;
  1348  0005A6  0EFF               	movlw	255
  1349  0005A8  2417               	addwf	_NUM,w,c
  1350  0005AA  6E17               	movwf	_NUM,c
  1351  0005AC  0EFF               	movlw	255
  1352  0005AE  2018               	addwfc	_NUM+1,w,c
  1353  0005B0  6E18               	movwf	_NUM+1,c
  1354  0005B2                     l189:
  1355  0005B2  AA80               	btfss	3968,5,c	;volatile
  1356  0005B4  D7FE               	goto	l189
  1357  0005B6                     u2240:
  1358                           
  1359                           ;main.c: 377:                 if (PORTAbits.RA4 == 0 && NUM <= 89)
  1360                           
  1361                           ;main.c: 375:                 }
  1362  0005B6  B880               	btfsc	3968,4,c	;volatile
  1363  0005B8  D00E               	goto	u2270
  1364  0005BA  5018               	movf	_NUM+1,w,c
  1365  0005BC  E10C               	bnz	l192
  1366  0005BE  0E5A               	movlw	90
  1367  0005C0  5C17               	subwf	_NUM,w,c
  1368  0005C2  B0D8               	btfsc	status,0,c
  1369  0005C4  D008               	goto	u2270
  1370                           
  1371                           ;main.c: 378:                 {;main.c: 379:                     NUM = NUM + 10;
  1372  0005C6  0E0A               	movlw	10
  1373  0005C8  2417               	addwf	_NUM,w,c
  1374  0005CA  6E17               	movwf	_NUM,c
  1375  0005CC  0E00               	movlw	0
  1376  0005CE  2018               	addwfc	_NUM+1,w,c
  1377  0005D0  6E18               	movwf	_NUM+1,c
  1378  0005D2                     l193:
  1379  0005D2  A880               	btfss	3968,4,c	;volatile
  1380  0005D4  D7FE               	goto	l193
  1381  0005D6                     u2270:
  1382  0005D6                     l192:
  1383                           
  1384                           ;main.c: 383:                 if (PORTAbits.RA3 == 0 && NUM >= 10)
  1385  0005D6  B680               	btfsc	3968,3,c	;volatile
  1386  0005D8  D00E               	goto	u2300
  1387  0005DA  5018               	movf	_NUM+1,w,c
  1388  0005DC  E104               	bnz	u2290
  1389  0005DE  0E0A               	movlw	10
  1390  0005E0  5C17               	subwf	_NUM,w,c
  1391  0005E2  A0D8               	btfss	status,0,c
  1392  0005E4  D008               	goto	u2300
  1393  0005E6                     u2290:
  1394                           
  1395                           ;main.c: 384:                 {;main.c: 385:                     NUM = NUM - 10;
  1396  0005E6  0EF6               	movlw	246
  1397  0005E8  2417               	addwf	_NUM,w,c
  1398  0005EA  6E17               	movwf	_NUM,c
  1399  0005EC  0EFF               	movlw	255
  1400  0005EE  2018               	addwfc	_NUM+1,w,c
  1401  0005F0  6E18               	movwf	_NUM+1,c
  1402  0005F2                     l197:
  1403  0005F2  A680               	btfss	3968,3,c	;volatile
  1404  0005F4  D7FE               	goto	l197
  1405  0005F6                     u2300:
  1406                           
  1407                           ;main.c: 389:                 NUM_REC = NUM;
  1408                           
  1409                           ;main.c: 387:                 }
  1410  0005F6  C017  F015         	movff	_NUM,_NUM_REC
  1411  0005FA  C018  F016         	movff	_NUM+1,_NUM_REC+1
  1412                           
  1413                           ;main.c: 390:                 WriteSTLED316SData(NUM, vibration_mode);
  1414  0005FE  C017  F044         	movff	_NUM,WriteSTLED316SData@number
  1415  000602  C018  F045         	movff	_NUM+1,WriteSTLED316SData@number+1
  1416  000606  C030  F046         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  1417  00060A  EC7E  F008         	call	_WriteSTLED316SData	;wreg free
  1418                           
  1419                           ;main.c: 392:                 if (PORTBbits.RB2 == 0)
  1420  00060E  B481               	btfsc	3969,2,c	;volatile
  1421  000610  D015               	goto	u2320
  1422                           
  1423                           ;main.c: 393:                 {;main.c: 394:                     Busy = 1;
  1424  000612  0E01               	movlw	1
  1425  000614  6E31               	movwf	_Busy,c
  1426                           
  1427                           ;main.c: 395:                     errorcounter = 30;
  1428  000616  0E1E               	movlw	30
  1429  000618  6E52               	movwf	_errorcounter,c	;volatile
  1430  00061A  0E00               	movlw	0
  1431  00061C  6E53               	movwf	_errorcounter+1,c	;volatile
  1432  00061E  0E00               	movlw	0
  1433  000620  6E54               	movwf	_errorcounter+2,c	;volatile
  1434  000622  0E00               	movlw	0
  1435  000624  6E55               	movwf	_errorcounter+3,c	;volatile
  1436                           
  1437                           ;main.c: 396:                     Homing_Again_Manual();
  1438  000626  EC0E  F005         	call	_Homing_Again_Manual	;wreg free
  1439                           
  1440                           ;main.c: 397:                     Stop = 0;
  1441  00062A  0E00               	movlw	0
  1442  00062C  6E33               	movwf	_Stop,c
  1443                           
  1444                           ;main.c: 398:                     Busy = 0;
  1445  00062E  0E00               	movlw	0
  1446  000630  6E31               	movwf	_Busy,c
  1447  000632                     l3699:
  1448                           
  1449                           ;main.c: 401:                     {;main.c: 402:                         WriteSTLED316SE
      +                          rr('E');
  1450  000632  0E45               	movlw	69
  1451  000634  EC1E  F008         	call	_WriteSTLED316SErr
  1452                           
  1453                           ;main.c: 403:                     }
  1454  000638  A481               	btfss	3969,2,c	;volatile
  1455  00063A  D7FB               	goto	l3699
  1456  00063C                     u2320:
  1457                           
  1458                           ;main.c: 412:                 if(Serial_Flag==1)
  1459  00063C  0435               	decf	_Serial_Flag,w,c
  1460  00063E  B4D8               	btfsc	status,2,c
  1461  000640  D1BD               	goto	l3895
  1462  000642  D1DA               	goto	l3899
  1463  000644                     l3707:
  1464                           
  1465                           ;main.c: 419:                             if(Serial_Buffer[2] == 0xF1 && Busy == 0)
  1466  000644  0EF1               	movlw	241
  1467  000646  1803               	xorwf	_Serial_Buffer+2,w,c
  1468  000648  A4D8               	btfss	status,2,c
  1469  00064A  D016               	goto	l3717
  1470  00064C  5031               	movf	_Busy,w,c
  1471  00064E  A4D8               	btfss	status,2,c
  1472  000650  D013               	goto	l3717
  1473                           
  1474                           ;main.c: 420:                             {;main.c: 421:                                
      +                           Stop = 0;
  1475  000652  0E00               	movlw	0
  1476  000654  6E33               	movwf	_Stop,c
  1477                           
  1478                           ;main.c: 422:                                 Busy = 1;
  1479  000656  0E01               	movlw	1
  1480  000658  6E31               	movwf	_Busy,c
  1481                           
  1482                           ;main.c: 423:                                 NUM = NUM_REC;
  1483  00065A  C015  F017         	movff	_NUM_REC,_NUM
  1484  00065E  C016  F018         	movff	_NUM_REC+1,_NUM+1
  1485                           
  1486                           ;main.c: 425:                                 errorcounter = 30;
  1487  000662  0E1E               	movlw	30
  1488  000664  6E52               	movwf	_errorcounter,c	;volatile
  1489  000666  0E00               	movlw	0
  1490  000668  6E53               	movwf	_errorcounter+1,c	;volatile
  1491  00066A  0E00               	movlw	0
  1492  00066C  6E54               	movwf	_errorcounter+2,c	;volatile
  1493  00066E  0E00               	movlw	0
  1494  000670  6E55               	movwf	_errorcounter+3,c	;volatile
  1495                           
  1496                           ;main.c: 426:                                 Homing_Again_Auto();
  1497  000672  EC03  F006         	call	_Homing_Again_Auto	;wreg free
  1498                           
  1499                           ;main.c: 428:                             }
  1500  000676  D047               	goto	l3747
  1501  000678                     l3717:
  1502  000678  0EF2               	movlw	242
  1503  00067A  1803               	xorwf	_Serial_Buffer+2,w,c
  1504  00067C  A4D8               	btfss	status,2,c
  1505  00067E  D043               	goto	l3747
  1506  000680  5031               	movf	_Busy,w,c
  1507  000682  A4D8               	btfss	status,2,c
  1508  000684  D040               	goto	l3747
  1509                           
  1510                           ;main.c: 430:                            {;main.c: 431:                                 
      +                          Stop = 0;
  1511  000686  0E00               	movlw	0
  1512  000688  6E33               	movwf	_Stop,c
  1513                           
  1514                           ;main.c: 432:                                 Busy = 1;
  1515  00068A  0E01               	movlw	1
  1516  00068C  6E31               	movwf	_Busy,c
  1517                           
  1518                           ;main.c: 433:                                 NUM = NUM_REC;
  1519  00068E  C015  F017         	movff	_NUM_REC,_NUM
  1520  000692  C016  F018         	movff	_NUM_REC+1,_NUM+1
  1521                           
  1522                           ;main.c: 434:                                 WriteSTLED316SData(NUM, vibration_mode);
  1523  000696  C017  F044         	movff	_NUM,WriteSTLED316SData@number
  1524  00069A  C018  F045         	movff	_NUM+1,WriteSTLED316SData@number+1
  1525  00069E  C030  F046         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  1526  0006A2  EC7E  F008         	call	_WriteSTLED316SData	;wreg free
  1527                           
  1528                           ;main.c: 436:                                 errorcounter = 30;
  1529  0006A6  0E1E               	movlw	30
  1530  0006A8  6E52               	movwf	_errorcounter,c	;volatile
  1531  0006AA  0E00               	movlw	0
  1532  0006AC  6E53               	movwf	_errorcounter+1,c	;volatile
  1533  0006AE  0E00               	movlw	0
  1534  0006B0  6E54               	movwf	_errorcounter+2,c	;volatile
  1535  0006B2  0E00               	movlw	0
  1536  0006B4  6E55               	movwf	_errorcounter+3,c	;volatile
  1537                           
  1538                           ;main.c: 437:                                 Homing_Again_Manual();
  1539  0006B6  EC0E  F005         	call	_Homing_Again_Manual	;wreg free
  1540                           
  1541                           ;main.c: 440:                                 if(Stop == 0)
  1542  0006BA  5033               	movf	_Stop,w,c
  1543  0006BC  A4D8               	btfss	status,2,c
  1544  0006BE  D023               	goto	l3747
  1545                           
  1546                           ;main.c: 441:                                 {;main.c: 442:                            
      +                                   Serial_Buffer_Out[0] = 0xA5;
  1547  0006C0  0EA5               	movlw	165
  1548  0006C2  0100               	movlb	0	; () banked
  1549  0006C4  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  1550                           
  1551                           ;main.c: 443:                                     Serial_Buffer_Out[1] = 0x44;
  1552  0006C6  0E44               	movlw	68
  1553  0006C8  6F61               	movwf	(_Serial_Buffer_Out+1)& (0+255),b
  1554                           
  1555                           ;main.c: 444:                                     Serial_Buffer_Out[2] = 0xF9;
  1556  0006CA  0EF9               	movlw	249
  1557  0006CC  6F62               	movwf	(_Serial_Buffer_Out+2)& (0+255),b
  1558                           
  1559                           ;main.c: 445:                                     Serial_Buffer_Out[3] = 0X3D;
  1560  0006CE  0E3D               	movlw	61
  1561  0006D0  6F63               	movwf	(_Serial_Buffer_Out+3)& (0+255),b
  1562                           
  1563                           ;main.c: 446:                                     Serial_Buffer_Out[4] = 0x5A;
  1564  0006D2  0E5A               	movlw	90
  1565  0006D4  6F64               	movwf	(_Serial_Buffer_Out+4)& (0+255),b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 448:                                     INTCONbits.GIE=0;
  1569  0006D6  9EF2               	bcf	4082,7,c	;volatile
  1570                           
  1571                           ;main.c: 449:                                     for (i=0; i<5;i++)
  1572  0006D8  0E00               	movlw	0
  1573  0006DA  6E14               	movwf	_i+1,c
  1574  0006DC  0E00               	movlw	0
  1575  0006DE  6E13               	movwf	_i,c
  1576  0006E0                     l3737:
  1577  0006E0  5014               	movf	_i+1,w,c
  1578  0006E2  E110               	bnz	l212
  1579  0006E4  0E05               	movlw	5
  1580  0006E6  5C13               	subwf	_i,w,c
  1581  0006E8  B0D8               	btfsc	status,0,c
  1582  0006EA  D00C               	goto	l212
  1583                           
  1584                           ;main.c: 450:                                     {;main.c: 451:                        
      +                                           Write1USART(Serial_Buffer_Out[i]);
  1585  0006EC  0E60               	movlw	low _Serial_Buffer_Out
  1586  0006EE  2413               	addwf	_i,w,c
  1587  0006F0  6ED9               	movwf	fsr2l,c
  1588  0006F2  0E00               	movlw	high _Serial_Buffer_Out
  1589  0006F4  2014               	addwfc	_i+1,w,c
  1590  0006F6  6EDA               	movwf	fsr2h,c
  1591  0006F8  50DF               	movf	indf2,w,c
  1592  0006FA  ECAA  F00B         	call	_Write1USART
  1593                           
  1594                           ;main.c: 452:                                     }
  1595  0006FE  4A13               	infsnz	_i,f,c
  1596  000700  2A14               	incf	_i+1,f,c
  1597  000702  D7EE               	goto	l3737
  1598  000704                     l212:
  1599                           
  1600                           ;main.c: 453:                                     INTCONbits.GIE=1;
  1601  000704  8EF2               	bsf	4082,7,c	;volatile
  1602  000706                     l3747:
  1603                           
  1604                           ;main.c: 457:                                 flush();
  1605  000706  ECDB  F00A         	call	_flush	;wreg free
  1606                           
  1607                           ;main.c: 458:                                 flushOut();
  1608  00070A  ECF3  F00A         	call	_flushOut	;wreg free
  1609                           
  1610                           ;main.c: 459:                                 Stop = 0;
  1611  00070E  0E00               	movlw	0
  1612  000710  6E33               	movwf	_Stop,c
  1613  000712                     l3751:
  1614                           
  1615                           ;main.c: 460:                                 Busy = 0;
  1616  000712  0E00               	movlw	0
  1617  000714  6E31               	movwf	_Busy,c
  1618                           
  1619                           ;main.c: 461:                                 break;
  1620  000716  D16C               	goto	l3897
  1621  000718                     l3753:
  1622                           
  1623                           ;main.c: 466:                             if(Busy==0)
  1624  000718  5031               	movf	_Busy,w,c
  1625  00071A  A4D8               	btfss	status,2,c
  1626  00071C  D169               	goto	l3897
  1627                           
  1628                           ;main.c: 467:                             {;main.c: 468:                                
      +                           Busy = 1;
  1629  00071E  0E01               	movlw	1
  1630  000720  6E31               	movwf	_Busy,c
  1631                           
  1632                           ;main.c: 472:                                     pause_Time = Serial_Buffer[2];
  1633  000722  C003  F02D         	movff	_Serial_Buffer+2,_pause_Time	;volatile
  1634                           
  1635                           ;main.c: 473:                                     switch(pause_Time)
  1636  000726  D01C               	goto	l3773
  1637  000728                     l3759:
  1638                           
  1639                           ;main.c: 477:                                             Motor_Pause_Time = 0;
  1640  000728  0E00               	movlw	0
  1641  00072A  6E1A               	movwf	_Motor_Pause_Time+1,c
  1642  00072C  0E00               	movlw	0
  1643  00072E  6E19               	movwf	_Motor_Pause_Time,c
  1644                           
  1645                           ;main.c: 478:                                             pause_Time = 0x30;
  1646  000730  0E30               	movlw	48
  1647  000732  6E2D               	movwf	_pause_Time,c	;volatile
  1648                           
  1649                           ;main.c: 479:                                             break;
  1650  000734  D030               	goto	l219
  1651  000736                     l3761:
  1652                           
  1653                           ;main.c: 482:                                             Motor_Pause_Time = 1000;
  1654  000736  0E03               	movlw	3
  1655  000738  6E1A               	movwf	_Motor_Pause_Time+1,c
  1656  00073A  0EE8               	movlw	232
  1657  00073C  D00F               	goto	L11
  1658  00073E                     l3763:
  1659                           
  1660                           ;main.c: 486:                                             Motor_Pause_Time = 2000;
  1661  00073E  0E07               	movlw	7
  1662  000740  6E1A               	movwf	_Motor_Pause_Time+1,c
  1663  000742  0ED0               	movlw	208
  1664  000744  D00B               	goto	L11
  1665  000746                     l3765:
  1666                           
  1667                           ;main.c: 490:                                             Motor_Pause_Time = 3000;
  1668  000746  0E0B               	movlw	11
  1669  000748  6E1A               	movwf	_Motor_Pause_Time+1,c
  1670  00074A  0EB8               	movlw	184
  1671  00074C  D007               	goto	L11
  1672  00074E                     l3767:
  1673                           
  1674                           ;main.c: 494:                                             Motor_Pause_Time = 4000;
  1675  00074E  0E0F               	movlw	15
  1676  000750  6E1A               	movwf	_Motor_Pause_Time+1,c
  1677  000752  0EA0               	movlw	160
  1678  000754  D003               	goto	L11
  1679  000756                     l3769:
  1680                           
  1681                           ;main.c: 498:                                             Motor_Pause_Time = 5000;
  1682  000756  0E13               	movlw	19
  1683  000758  6E1A               	movwf	_Motor_Pause_Time+1,c
  1684  00075A  0E88               	movlw	136
  1685  00075C                     L11:
  1686  00075C  6E19               	movwf	_Motor_Pause_Time,c
  1687                           
  1688                           ;main.c: 499:                                             break;
  1689  00075E  D01B               	goto	l219
  1690  000760                     l3773:
  1691  000760  502D               	movf	_pause_Time,w,c	;volatile
  1692  000762  6E50               	movwf	??_main& (0+255),c
  1693  000764  6A51               	clrf	(??_main+1)& (0+255),c
  1694                           
  1695                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1696                           ; Switch size 1, requested type "simple"
  1697                           ; Number of cases is 1, Range of values is 0 to 0
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte            4     3 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  000766  5051               	movf	??_main+1,w,c
  1703  000768  0A00               	xorlw	0	; case 0
  1704  00076A  A4D8               	btfss	status,2,c
  1705  00076C  D7DD               	goto	l3759
  1706                           
  1707                           ; Switch size 1, requested type "simple"
  1708                           ; Number of cases is 6, Range of values is 48 to 53
  1709                           ; switch strategies available:
  1710                           ; Name         Instructions Cycles
  1711                           ; simple_byte           19    10 (average)
  1712                           ;	Chosen strategy is simple_byte
  1713  00076E  5050               	movf	??_main,w,c
  1714  000770  0A30               	xorlw	48	; case 48
  1715  000772  B4D8               	btfsc	status,2,c
  1716  000774  D7D9               	goto	l3759
  1717  000776  0A01               	xorlw	1	; case 49
  1718  000778  B4D8               	btfsc	status,2,c
  1719  00077A  D7DD               	goto	l3761
  1720  00077C  0A03               	xorlw	3	; case 50
  1721  00077E  B4D8               	btfsc	status,2,c
  1722  000780  D7DE               	goto	l3763
  1723  000782  0A01               	xorlw	1	; case 51
  1724  000784  B4D8               	btfsc	status,2,c
  1725  000786  D7DF               	goto	l3765
  1726  000788  0A07               	xorlw	7	; case 52
  1727  00078A  B4D8               	btfsc	status,2,c
  1728  00078C  D7E0               	goto	l3767
  1729  00078E  0A01               	xorlw	1	; case 53
  1730  000790  B4D8               	btfsc	status,2,c
  1731  000792  D7E1               	goto	l3769
  1732  000794  D7C9               	goto	l3759
  1733  000796                     l219:
  1734                           
  1735                           ;main.c: 504:                                 INTCONbits.GIE=0;
  1736  000796  9EF2               	bcf	4082,7,c	;volatile
  1737                           
  1738                           ;main.c: 505:                                 write_i2c(0x0060, pause_Time);
  1739  000798  0E60               	movlw	96
  1740  00079A  6E4A               	movwf	write_i2c@address,c
  1741  00079C  0E00               	movlw	0
  1742  00079E  6E4B               	movwf	write_i2c@address+1,c
  1743  0007A0  0E00               	movlw	0
  1744  0007A2  6E4C               	movwf	write_i2c@address+2,c
  1745  0007A4  0E00               	movlw	0
  1746  0007A6  6E4D               	movwf	write_i2c@address+3,c
  1747  0007A8  C02D  F04E         	movff	_pause_Time,write_i2c@data	;volatile
  1748  0007AC  6A4F               	clrf	write_i2c@data+1,c
  1749  0007AE  EC72  F00A         	call	_write_i2c	;wreg free
  1750                           
  1751                           ;main.c: 506:                                 INTCONbits.GIE=1;
  1752  0007B2  8EF2               	bsf	4082,7,c	;volatile
  1753                           
  1754                           ;main.c: 508:                                 flush();
  1755  0007B4  ECDB  F00A         	call	_flush	;wreg free
  1756  0007B8  D7AC               	goto	l3751
  1757  0007BA                     l3783:
  1758                           
  1759                           ;main.c: 516:                             if(Busy==0)
  1760  0007BA  5031               	movf	_Busy,w,c
  1761  0007BC  A4D8               	btfss	status,2,c
  1762  0007BE  D118               	goto	l3897
  1763                           
  1764                           ;main.c: 517:                             {;main.c: 518:                                
      +                           if (Serial_Buffer[2] == 0x00)
  1765  0007C0  5003               	movf	_Serial_Buffer+2,w,c
  1766  0007C2  A4D8               	btfss	status,2,c
  1767  0007C4  D065               	goto	l3825
  1768                           
  1769                           ;main.c: 519:                                 {;main.c: 520:                            
      +                                   Busy = 1;
  1770  0007C6  0E01               	movlw	1
  1771  0007C8  6E31               	movwf	_Busy,c
  1772                           
  1773                           ;main.c: 522:                                     INTCONbits.GIE=0;
  1774  0007CA  9EF2               	bcf	4082,7,c	;volatile
  1775                           
  1776                           ;main.c: 523:                                     pause_Time = read_i2c(0x0060);
  1777  0007CC  0E60               	movlw	96
  1778  0007CE  6E4A               	movwf	read_i2c@address,c
  1779  0007D0  0E00               	movlw	0
  1780  0007D2  6E4B               	movwf	read_i2c@address+1,c
  1781  0007D4  0E00               	movlw	0
  1782  0007D6  6E4C               	movwf	read_i2c@address+2,c
  1783  0007D8  0E00               	movlw	0
  1784  0007DA  6E4D               	movwf	read_i2c@address+3,c
  1785  0007DC  ECC8  F009         	call	_read_i2c	;wreg free
  1786  0007E0  504A               	movf	?_read_i2c,w,c
  1787  0007E2  6E2D               	movwf	_pause_Time,c	;volatile
  1788                           
  1789                           ;main.c: 524:                                     vib_Time = read_i2c(0x0040);
  1790  0007E4  0E40               	movlw	64
  1791  0007E6  6E4A               	movwf	read_i2c@address,c
  1792  0007E8  0E00               	movlw	0
  1793  0007EA  6E4B               	movwf	read_i2c@address+1,c
  1794  0007EC  0E00               	movlw	0
  1795  0007EE  6E4C               	movwf	read_i2c@address+2,c
  1796  0007F0  0E00               	movlw	0
  1797  0007F2  6E4D               	movwf	read_i2c@address+3,c
  1798  0007F4  ECC8  F009         	call	_read_i2c	;wreg free
  1799  0007F8  504A               	movf	?_read_i2c,w,c
  1800  0007FA  6E2C               	movwf	_vib_Time,c	;volatile
  1801                           
  1802                           ;main.c: 525:                                     Motor_Speed = read_i2c(0x0030);
  1803  0007FC  0E30               	movlw	48
  1804  0007FE  6E4A               	movwf	read_i2c@address,c
  1805  000800  0E00               	movlw	0
  1806  000802  6E4B               	movwf	read_i2c@address+1,c
  1807  000804  0E00               	movlw	0
  1808  000806  6E4C               	movwf	read_i2c@address+2,c
  1809  000808  0E00               	movlw	0
  1810  00080A  6E4D               	movwf	read_i2c@address+3,c
  1811  00080C  ECC8  F009         	call	_read_i2c	;wreg free
  1812  000810  C04A  F01F         	movff	?_read_i2c,_Motor_Speed
  1813  000814  C04B  F020         	movff	?_read_i2c+1,_Motor_Speed+1
  1814                           
  1815                           ;main.c: 526:                                     delay_motor_stop_time = read_i2c(0x005
      +                          0);
  1816  000818  0E50               	movlw	80
  1817  00081A  6E4A               	movwf	read_i2c@address,c
  1818  00081C  0E00               	movlw	0
  1819  00081E  6E4B               	movwf	read_i2c@address+1,c
  1820  000820  0E00               	movlw	0
  1821  000822  6E4C               	movwf	read_i2c@address+2,c
  1822  000824  0E00               	movlw	0
  1823  000826  6E4D               	movwf	read_i2c@address+3,c
  1824  000828  ECC8  F009         	call	_read_i2c	;wreg free
  1825  00082C  504A               	movf	?_read_i2c,w,c
  1826  00082E  6E2B               	movwf	_delay_motor_stop_time,c	;volatile
  1827                           
  1828                           ;main.c: 527:                                     INTCONbits.GIE=1;
  1829  000830  8EF2               	bsf	4082,7,c	;volatile
  1830                           
  1831                           ;main.c: 529:                                     Serial_Buffer_Out[0] = 0x51;
  1832  000832  0E51               	movlw	81
  1833  000834  0100               	movlb	0	; () banked
  1834  000836  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;main.c: 530:                                     Serial_Buffer_Out[1] = pause_Time;
  1838  000838  C02D  F061         	movff	_pause_Time,_Serial_Buffer_Out+1	;volatile
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 531:                                     Serial_Buffer_Out[2] = Motor_Speed;
  1842  00083C  C01F  F062         	movff	_Motor_Speed,_Serial_Buffer_Out+2
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 532:                                     Serial_Buffer_Out[3] = vib_Time;
  1846  000840  C02C  F063         	movff	_vib_Time,_Serial_Buffer_Out+3	;volatile
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;main.c: 533:                                     Serial_Buffer_Out[4] = delay_motor_sto
      +                          p_time;
  1850  000844  C02B  F064         	movff	_delay_motor_stop_time,_Serial_Buffer_Out+4	;volatile
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;main.c: 535:                                     _delay((unsigned long)((100)*(8000000/
      +                          4000.0)));
  1854  000848  0E02               	movlw	2
  1855  00084A  6E51               	movwf	(??_main+1)& (0+255),c
  1856  00084C  0E04               	movlw	4
  1857  00084E  6E50               	movwf	??_main& (0+255),c
  1858  000850  0EBA               	movlw	186
  1859  000852                     u2687:
  1860  000852  2EE8               	decfsz	wreg,f,c
  1861  000854  D7FE               	bra	u2687
  1862  000856  2E50               	decfsz	??_main& (0+255),f,c
  1863  000858  D7FC               	bra	u2687
  1864  00085A  2E51               	decfsz	(??_main+1)& (0+255),f,c
  1865  00085C  D7FA               	bra	u2687
  1866  00085E  D000               	nop2	
  1867                           
  1868                           ;main.c: 537:                                     INTCONbits.GIE=0;
  1869  000860  9EF2               	bcf	4082,7,c	;volatile
  1870                           
  1871                           ;main.c: 538:                                     for (i=0; i<5;i++)
  1872  000862  0E00               	movlw	0
  1873  000864  6E14               	movwf	_i+1,c
  1874  000866  0E00               	movlw	0
  1875  000868  6E13               	movwf	_i,c
  1876  00086A                     l3815:
  1877  00086A  5014               	movf	_i+1,w,c
  1878  00086C  E110               	bnz	l229
  1879  00086E  0E05               	movlw	5
  1880  000870  5C13               	subwf	_i,w,c
  1881  000872  B0D8               	btfsc	status,0,c
  1882  000874  D00C               	goto	l229
  1883                           
  1884                           ;main.c: 539:                                     {;main.c: 540:                        
      +                                           Write1USART(Serial_Buffer_Out[i]);
  1885  000876  0E60               	movlw	low _Serial_Buffer_Out
  1886  000878  2413               	addwf	_i,w,c
  1887  00087A  6ED9               	movwf	fsr2l,c
  1888  00087C  0E00               	movlw	high _Serial_Buffer_Out
  1889  00087E  2014               	addwfc	_i+1,w,c
  1890  000880  6EDA               	movwf	fsr2h,c
  1891  000882  50DF               	movf	indf2,w,c
  1892  000884  ECAA  F00B         	call	_Write1USART
  1893                           
  1894                           ;main.c: 541:                                     }
  1895  000888  4A13               	infsnz	_i,f,c
  1896  00088A  2A14               	incf	_i+1,f,c
  1897  00088C  D7EE               	goto	l3815
  1898  00088E                     l229:
  1899                           
  1900                           ;main.c: 542:                                     INTCONbits.GIE=1;
  1901  00088E  8EF2               	bsf	4082,7,c	;volatile
  1902  000890                     l3825:
  1903                           
  1904                           ;main.c: 544:                                 flushOut();
  1905  000890  ECF3  F00A         	call	_flushOut	;wreg free
  1906  000894  D73E               	goto	l3751
  1907  000896                     l3829:
  1908                           
  1909                           ;main.c: 551:                             if(Busy==0)
  1910  000896  5031               	movf	_Busy,w,c
  1911  000898  A4D8               	btfss	status,2,c
  1912  00089A  D0AA               	goto	l3897
  1913                           
  1914                           ;main.c: 552:                             {;main.c: 553:                                
      +                           Busy = 1;
  1915  00089C  0E01               	movlw	1
  1916  00089E  6E31               	movwf	_Busy,c
  1917                           
  1918                           ;main.c: 554:                                 PWM_Duty_Cycle = Serial_Buffer[2];
  1919  0008A0  C003  F02A         	movff	_Serial_Buffer+2,_PWM_Duty_Cycle	;volatile
  1920                           
  1921                           ;main.c: 556:                                 switch(PWM_Duty_Cycle)
  1922  0008A4  D007               	goto	l3843
  1923  0008A6                     l3835:
  1924                           
  1925                           ;main.c: 559:                                         PWM_reg=0x00;
  1926  0008A6  0E00               	movlw	0
  1927  0008A8  D003               	goto	L13
  1928  0008AA                     l3837:
  1929                           
  1930                           ;main.c: 564:                                         PWM_reg=0x3F;
  1931  0008AA  0E3F               	movlw	63
  1932  0008AC  D001               	goto	L13
  1933  0008AE                     l3839:
  1934                           
  1935                           ;main.c: 568:                                         PWM_reg=0x7F;
  1936  0008AE  0E7F               	movlw	127
  1937  0008B0                     L13:
  1938  0008B0  6E58               	movwf	_PWM_reg,c
  1939                           
  1940                           ;main.c: 569:                                         break;
  1941  0008B2  D012               	goto	l234
  1942  0008B4                     l3843:
  1943  0008B4  502A               	movf	_PWM_Duty_Cycle,w,c	;volatile
  1944  0008B6  6E50               	movwf	??_main& (0+255),c
  1945  0008B8  6A51               	clrf	(??_main+1)& (0+255),c
  1946                           
  1947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1948                           ; Switch size 1, requested type "simple"
  1949                           ; Number of cases is 1, Range of values is 0 to 0
  1950                           ; switch strategies available:
  1951                           ; Name         Instructions Cycles
  1952                           ; simple_byte            4     3 (average)
  1953                           ;	Chosen strategy is simple_byte
  1954  0008BA  5051               	movf	??_main+1,w,c
  1955  0008BC  0A00               	xorlw	0	; case 0
  1956  0008BE  A4D8               	btfss	status,2,c
  1957  0008C0  D7F4               	goto	l3837
  1958                           
  1959                           ; Switch size 1, requested type "simple"
  1960                           ; Number of cases is 3, Range of values is 0 to 127
  1961                           ; switch strategies available:
  1962                           ; Name         Instructions Cycles
  1963                           ; simple_byte           10     6 (average)
  1964                           ;	Chosen strategy is simple_byte
  1965  0008C2  5050               	movf	??_main,w,c
  1966  0008C4  0A00               	xorlw	0	; case 0
  1967  0008C6  B4D8               	btfsc	status,2,c
  1968  0008C8  D7EE               	goto	l3835
  1969  0008CA  0A3F               	xorlw	63	; case 63
  1970  0008CC  B4D8               	btfsc	status,2,c
  1971  0008CE  D7ED               	goto	l3837
  1972  0008D0  0A40               	xorlw	64	; case 127
  1973  0008D2  B4D8               	btfsc	status,2,c
  1974  0008D4  D7EC               	goto	l3839
  1975  0008D6  D7E9               	goto	l3837
  1976  0008D8                     l234:
  1977                           
  1978                           ;main.c: 571:                                     INTCONbits.GIE=0;
  1979  0008D8  9EF2               	bcf	4082,7,c	;volatile
  1980                           
  1981                           ;main.c: 572:                                     write_i2c(0x0030,PWM_reg);
  1982  0008DA  0E30               	movlw	48
  1983  0008DC  6E4A               	movwf	write_i2c@address,c
  1984  0008DE  0E00               	movlw	0
  1985  0008E0  6E4B               	movwf	write_i2c@address+1,c
  1986  0008E2  0E00               	movlw	0
  1987  0008E4  6E4C               	movwf	write_i2c@address+2,c
  1988  0008E6  0E00               	movlw	0
  1989  0008E8  6E4D               	movwf	write_i2c@address+3,c
  1990  0008EA  C058  F04E         	movff	_PWM_reg,write_i2c@data
  1991  0008EE  6A4F               	clrf	write_i2c@data+1,c
  1992  0008F0  EC72  F00A         	call	_write_i2c	;wreg free
  1993  0008F4  D061               	goto	l3889
  1994  0008F6                     l3851:
  1995                           
  1996                           ;main.c: 581:                             if(Busy == 0)
  1997  0008F6  5031               	movf	_Busy,w,c
  1998  0008F8  A4D8               	btfss	status,2,c
  1999  0008FA  D046               	goto	l3877
  2000                           
  2001                           ;main.c: 582:                             {;main.c: 583:                                
      +                           Busy = 1;
  2002  0008FC  0E01               	movlw	1
  2003  0008FE  6E31               	movwf	_Busy,c
  2004                           
  2005                           ;main.c: 584:                                 vib_Time = Serial_Buffer[2];
  2006  000900  C003  F02C         	movff	_Serial_Buffer+2,_vib_Time	;volatile
  2007                           
  2008                           ;main.c: 586:                                 switch(vib_Time)
  2009  000904  D018               	goto	l3869
  2010  000906                     l3857:
  2011                           
  2012                           ;main.c: 589:                                         Vmotor_Time=1000;
  2013  000906  0E03               	movlw	3
  2014  000908  6E57               	movwf	_Vmotor_Time+1,c
  2015  00090A  0EE8               	movlw	232
  2016  00090C  D012               	goto	L16
  2017  00090E                     l3859:
  2018                           
  2019                           ;main.c: 594:                                         Vmotor_Time=2000;
  2020  00090E  0E07               	movlw	7
  2021  000910  6E57               	movwf	_Vmotor_Time+1,c
  2022  000912  0ED0               	movlw	208
  2023  000914  6E56               	movwf	_Vmotor_Time,c
  2024                           
  2025                           ;main.c: 595:                                         vib_Time=0x82;
  2026  000916  0E82               	movlw	130
  2027  000918  6E2C               	movwf	_vib_Time,c	;volatile
  2028                           
  2029                           ;main.c: 596:                                         break;
  2030  00091A  D025               	goto	l242
  2031  00091C                     l3861:
  2032                           
  2033                           ;main.c: 599:                                         Vmotor_Time=3000;
  2034  00091C  0E0B               	movlw	11
  2035  00091E  6E57               	movwf	_Vmotor_Time+1,c
  2036  000920  0EB8               	movlw	184
  2037  000922  D007               	goto	L16
  2038  000924                     l3863:
  2039                           
  2040                           ;main.c: 603:                                         Vmotor_Time=4000;
  2041  000924  0E0F               	movlw	15
  2042  000926  6E57               	movwf	_Vmotor_Time+1,c
  2043  000928  0EA0               	movlw	160
  2044  00092A  D003               	goto	L16
  2045  00092C                     l3865:
  2046                           
  2047                           ;main.c: 607:                                         Vmotor_Time=5000;
  2048  00092C  0E13               	movlw	19
  2049  00092E  6E57               	movwf	_Vmotor_Time+1,c
  2050  000930  0E88               	movlw	136
  2051  000932                     L16:
  2052  000932  6E56               	movwf	_Vmotor_Time,c
  2053                           
  2054                           ;main.c: 608:                                         break;
  2055  000934  D018               	goto	l242
  2056  000936                     l3869:
  2057  000936  502C               	movf	_vib_Time,w,c	;volatile
  2058  000938  6E50               	movwf	??_main& (0+255),c
  2059  00093A  6A51               	clrf	(??_main+1)& (0+255),c
  2060                           
  2061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2062                           ; Switch size 1, requested type "simple"
  2063                           ; Number of cases is 1, Range of values is 0 to 0
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte            4     3 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  00093C  5051               	movf	??_main+1,w,c
  2069  00093E  0A00               	xorlw	0	; case 0
  2070  000940  A4D8               	btfss	status,2,c
  2071  000942  D7E5               	goto	l3859
  2072                           
  2073                           ; Switch size 1, requested type "simple"
  2074                           ; Number of cases is 5, Range of values is 129 to 133
  2075                           ; switch strategies available:
  2076                           ; Name         Instructions Cycles
  2077                           ; simple_byte           16     9 (average)
  2078                           ;	Chosen strategy is simple_byte
  2079  000944  5050               	movf	??_main,w,c
  2080  000946  0A81               	xorlw	129	; case 129
  2081  000948  B4D8               	btfsc	status,2,c
  2082  00094A  D7DD               	goto	l3857
  2083  00094C  0A03               	xorlw	3	; case 130
  2084  00094E  B4D8               	btfsc	status,2,c
  2085  000950  D7DE               	goto	l3859
  2086  000952  0A01               	xorlw	1	; case 131
  2087  000954  B4D8               	btfsc	status,2,c
  2088  000956  D7E2               	goto	l3861
  2089  000958  0A07               	xorlw	7	; case 132
  2090  00095A  B4D8               	btfsc	status,2,c
  2091  00095C  D7E3               	goto	l3863
  2092  00095E  0A01               	xorlw	1	; case 133
  2093  000960  B4D8               	btfsc	status,2,c
  2094  000962  D7E4               	goto	l3865
  2095  000964  D7D4               	goto	l3859
  2096  000966                     l242:
  2097                           
  2098                           ;main.c: 610:                                     INTCONbits.GIE=0;
  2099  000966  9EF2               	bcf	4082,7,c	;volatile
  2100                           
  2101                           ;main.c: 611:                                     write_i2c(0x0040,vib_Time);
  2102  000968  0E40               	movlw	64
  2103  00096A  6E4A               	movwf	write_i2c@address,c
  2104  00096C  0E00               	movlw	0
  2105  00096E  6E4B               	movwf	write_i2c@address+1,c
  2106  000970  0E00               	movlw	0
  2107  000972  6E4C               	movwf	write_i2c@address+2,c
  2108  000974  0E00               	movlw	0
  2109  000976  6E4D               	movwf	write_i2c@address+3,c
  2110  000978  C02C  F04E         	movff	_vib_Time,write_i2c@data	;volatile
  2111  00097C  6A4F               	clrf	write_i2c@data+1,c
  2112  00097E  EC72  F00A         	call	_write_i2c	;wreg free
  2113                           
  2114                           ;main.c: 612:                                     INTCONbits.GIE=1;
  2115  000982  8EF2               	bsf	4082,7,c	;volatile
  2116                           
  2117                           ;main.c: 614:                                     Busy = 0;
  2118  000984  0E00               	movlw	0
  2119  000986  6E31               	movwf	_Busy,c
  2120  000988                     l3877:
  2121                           
  2122                           ;main.c: 619:                             if(Busy == 0)
  2123  000988  5031               	movf	_Busy,w,c
  2124  00098A  A4D8               	btfss	status,2,c
  2125  00098C  D031               	goto	l3897
  2126                           
  2127                           ;main.c: 620:                             {;main.c: 621:                                
      +                           Busy = 1;
  2128  00098E  0E01               	movlw	1
  2129  000990  6E31               	movwf	_Busy,c
  2130                           
  2131                           ;main.c: 622:                                 delay_motor_stop_time = Serial_Buffer[2];
  2132  000992  C003  F02B         	movff	_Serial_Buffer+2,_delay_motor_stop_time	;volatile
  2133                           
  2134                           ;main.c: 623:                                 Motor_Stop_Delay_Time = delay_motor_stop_t
      +                          ime;
  2135  000996  C02B  F01D         	movff	_delay_motor_stop_time,_Motor_Stop_Delay_Time	;volatile
  2136  00099A  6A1E               	clrf	_Motor_Stop_Delay_Time+1,c
  2137                           
  2138                           ;main.c: 625:                                 INTCONbits.GIE=0;
  2139  00099C  9EF2               	bcf	4082,7,c	;volatile
  2140                           
  2141                           ;main.c: 626:                                 write_i2c(0x0050,delay_motor_stop_time);
  2142  00099E  0E50               	movlw	80
  2143  0009A0  6E4A               	movwf	write_i2c@address,c
  2144  0009A2  0E00               	movlw	0
  2145  0009A4  6E4B               	movwf	write_i2c@address+1,c
  2146  0009A6  0E00               	movlw	0
  2147  0009A8  6E4C               	movwf	write_i2c@address+2,c
  2148  0009AA  0E00               	movlw	0
  2149  0009AC  6E4D               	movwf	write_i2c@address+3,c
  2150  0009AE  C02B  F04E         	movff	_delay_motor_stop_time,write_i2c@data	;volatile
  2151  0009B2  6A4F               	clrf	write_i2c@data+1,c
  2152  0009B4  EC72  F00A         	call	_write_i2c	;wreg free
  2153  0009B8                     l3889:
  2154                           
  2155                           ;main.c: 627:                                 INTCONbits.GIE=1;
  2156  0009B8  8EF2               	bsf	4082,7,c	;volatile
  2157  0009BA  D6AB               	goto	l3751
  2158  0009BC                     l3895:
  2159  0009BC  5002               	movf	_Serial_Buffer+1,w,c
  2160  0009BE  6E50               	movwf	??_main& (0+255),c
  2161  0009C0  6A51               	clrf	(??_main+1)& (0+255),c
  2162                           
  2163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2164                           ; Switch size 1, requested type "simple"
  2165                           ; Number of cases is 1, Range of values is 0 to 0
  2166                           ; switch strategies available:
  2167                           ; Name         Instructions Cycles
  2168                           ; simple_byte            4     3 (average)
  2169                           ;	Chosen strategy is simple_byte
  2170  0009C2  5051               	movf	??_main+1,w,c
  2171  0009C4  0A00               	xorlw	0	; case 0
  2172  0009C6  A4D8               	btfss	status,2,c
  2173  0009C8  D013               	goto	l3897
  2174                           
  2175                           ; Switch size 1, requested type "simple"
  2176                           ; Number of cases is 6, Range of values is 35 to 102
  2177                           ; switch strategies available:
  2178                           ; Name         Instructions Cycles
  2179                           ; simple_byte           19    10 (average)
  2180                           ;	Chosen strategy is simple_byte
  2181  0009CA  5050               	movf	??_main,w,c
  2182  0009CC  0A23               	xorlw	35	; case 35
  2183  0009CE  B4D8               	btfsc	status,2,c
  2184  0009D0  D6A3               	goto	l3753
  2185  0009D2  0A67               	xorlw	103	; case 68
  2186  0009D4  B4D8               	btfsc	status,2,c
  2187  0009D6  D636               	goto	l3707
  2188  0009D8  0A15               	xorlw	21	; case 81
  2189  0009DA  B4D8               	btfsc	status,2,c
  2190  0009DC  D6EE               	goto	l3783
  2191  0009DE  0A35               	xorlw	53	; case 100
  2192  0009E0  B4D8               	btfsc	status,2,c
  2193  0009E2  D759               	goto	l3829
  2194  0009E4  0A01               	xorlw	1	; case 101
  2195  0009E6  B4D8               	btfsc	status,2,c
  2196  0009E8  D786               	goto	l3851
  2197  0009EA  0A03               	xorlw	3	; case 102
  2198  0009EC  B4D8               	btfsc	status,2,c
  2199  0009EE  D7CC               	goto	l3877
  2200  0009F0                     l3897:
  2201                           
  2202                           ;main.c: 636:                     Serial_Flag = 0;
  2203  0009F0  0E00               	movlw	0
  2204  0009F2  6E35               	movwf	_Serial_Flag,c
  2205                           
  2206                           ;main.c: 637:                     Serial_GData = 0;
  2207  0009F4  0E00               	movlw	0
  2208  0009F6  6E34               	movwf	_Serial_GData,c
  2209  0009F8                     l3899:
  2210                           
  2211                           ;main.c: 641:                 {;main.c: 642:                     OpMode = MANUAL_MODE;
  2212  0009F8  0E00               	movlw	0
  2213  0009FA  6E2E               	movwf	_OpMode,c	;volatile
  2214  0009FC  D59B               	goto	l177
  2215  0009FE                     l3901:
  2216  0009FE  502E               	movf	_OpMode,w,c	;volatile
  2217  000A00  6E50               	movwf	??_main& (0+255),c
  2218  000A02  6A51               	clrf	(??_main+1)& (0+255),c
  2219                           
  2220                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2221                           ; Switch size 1, requested type "simple"
  2222                           ; Number of cases is 1, Range of values is 0 to 0
  2223                           ; switch strategies available:
  2224                           ; Name         Instructions Cycles
  2225                           ; simple_byte            4     3 (average)
  2226                           ;	Chosen strategy is simple_byte
  2227  000A04  5051               	movf	??_main+1,w,c
  2228  000A06  0A00               	xorlw	0	; case 0
  2229  000A08  A4D8               	btfss	status,2,c
  2230  000A0A  D594               	goto	l177
  2231                           
  2232                           ; Switch size 1, requested type "simple"
  2233                           ; Number of cases is 2, Range of values is 0 to 2
  2234                           ; switch strategies available:
  2235                           ; Name         Instructions Cycles
  2236                           ; simple_byte            7     4 (average)
  2237                           ;	Chosen strategy is simple_byte
  2238  000A0C  5050               	movf	??_main,w,c
  2239  000A0E  0A00               	xorlw	0	; case 0
  2240  000A10  B4D8               	btfsc	status,2,c
  2241  000A12  D59A               	goto	l179
  2242  000A14  0A02               	xorlw	2	; case 2
  2243  000A16  B4D8               	btfsc	status,2,c
  2244  000A18  D611               	goto	u2320
  2245  000A1A  D58C               	goto	l177
  2246  000A1C                     __end_of_main:
  2247                           	opt callstack 0
  2248                           
  2249 ;; *************** function _read_i2c *****************
  2250 ;; Defined at:
  2251 ;;		line 118 in file "i2c.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  address         4   20[COMRAM] long 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  read_byte       2   24[COMRAM] int 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  2   20[COMRAM] int 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;Total ram usage:        6 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    4
  2272 ;; This function calls:
  2273 ;;		___aldiv
  2274 ;;		_i2c_Address
  2275 ;;		_i2c_Read
  2276 ;;		_i2c_Restart
  2277 ;;		_i2c_Start
  2278 ;;		_i2c_Stop
  2279 ;;		_i2c_Write
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text1
  2286  001390                     __ptext1:
  2287                           	opt callstack 0
  2288  001390                     _read_i2c:
  2289                           	opt callstack 26
  2290                           
  2291                           ;i2c.c: 118: int read_i2c(long address);i2c.c: 119: {;i2c.c: 120:  int read_byte;;i2c.c:
      +                           123:  i2c_Start();
  2292                           
  2293                           ;incstack = 0
  2294  001390  ECCE  F00B         	call	_i2c_Start	;wreg free
  2295                           
  2296                           ;i2c.c: 124:  i2c_Address(0xA0, 0);
  2297  001394  0E00               	movlw	0
  2298  001396  6E3D               	movwf	i2c_Address@mode,c
  2299  001398  0EA0               	movlw	160
  2300  00139A  EC8A  F00B         	call	_i2c_Address
  2301                           
  2302                           ;i2c.c: 125:  i2c_Write((unsigned char)(address/0x100));
  2303  00139E  C04A  F03C         	movff	read_i2c@address,___aldiv@dividend
  2304  0013A2  C04B  F03D         	movff	read_i2c@address+1,___aldiv@dividend+1
  2305  0013A6  C04C  F03E         	movff	read_i2c@address+2,___aldiv@dividend+2
  2306  0013AA  C04D  F03F         	movff	read_i2c@address+3,___aldiv@dividend+3
  2307  0013AE  0E00               	movlw	0
  2308  0013B0  6E40               	movwf	___aldiv@divisor,c
  2309  0013B2  0E01               	movlw	1
  2310  0013B4  6E41               	movwf	___aldiv@divisor+1,c
  2311  0013B6  0E00               	movlw	0
  2312  0013B8  6E42               	movwf	___aldiv@divisor+2,c
  2313  0013BA  0E00               	movlw	0
  2314  0013BC  6E43               	movwf	___aldiv@divisor+3,c
  2315  0013BE  ECB8  F007         	call	___aldiv	;wreg free
  2316  0013C2  503C               	movf	?___aldiv,w,c
  2317  0013C4  ECA4  F00B         	call	_i2c_Write
  2318                           
  2319                           ;i2c.c: 126:  i2c_Write((unsigned char)(address&0xFF));
  2320  0013C8  504A               	movf	read_i2c@address,w,c
  2321  0013CA  ECA4  F00B         	call	_i2c_Write
  2322                           
  2323                           ;i2c.c: 127:  i2c_Restart();
  2324  0013CE  ECC6  F00B         	call	_i2c_Restart	;wreg free
  2325                           
  2326                           ;i2c.c: 128:  i2c_Address(0xA0, 1);
  2327  0013D2  0E01               	movlw	1
  2328  0013D4  6E3D               	movwf	i2c_Address@mode,c
  2329  0013D6  0EA0               	movlw	160
  2330  0013D8  EC8A  F00B         	call	_i2c_Address
  2331                           
  2332                           ;i2c.c: 129:  read_byte = i2c_Read(0);
  2333  0013DC  0E00               	movlw	0
  2334  0013DE  EC22  F00B         	call	_i2c_Read
  2335  0013E2  C03D  F04E         	movff	?_i2c_Read,read_i2c@read_byte
  2336  0013E6  C03E  F04F         	movff	?_i2c_Read+1,read_i2c@read_byte+1
  2337                           
  2338                           ;i2c.c: 133:     i2c_Stop();
  2339  0013EA  ECCA  F00B         	call	_i2c_Stop	;wreg free
  2340                           
  2341                           ;i2c.c: 134:  return (read_byte);
  2342  0013EE  C04E  F04A         	movff	read_i2c@read_byte,?_read_i2c
  2343  0013F2  C04F  F04B         	movff	read_i2c@read_byte+1,?_read_i2c+1
  2344  0013F6  0012               	return		;funcret
  2345  0013F8                     __end_of_read_i2c:
  2346                           	opt callstack 0
  2347                           
  2348 ;; *************** function _i2c_Restart *****************
  2349 ;; Defined at:
  2350 ;;		line 53 in file "i2c.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;Total ram usage:        0 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    3
  2371 ;; This function calls:
  2372 ;;		_i2c_Wait
  2373 ;; This function is called by:
  2374 ;;		_read_i2c
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text2
  2379  00178C                     __ptext2:
  2380                           	opt callstack 0
  2381  00178C                     _i2c_Restart:
  2382                           	opt callstack 26
  2383                           
  2384                           ;i2c.c: 54:   i2c_Wait();
  2385                           
  2386                           ;incstack = 0
  2387  00178C  EC94  F00B         	call	_i2c_Wait	;wreg free
  2388                           
  2389                           ;i2c.c: 55:  RSEN2=1;
  2390  001790  826B               	bsf	3947,1,c	;volatile
  2391  001792  0012               	return		;funcret
  2392  001794                     __end_of_i2c_Restart:
  2393                           	opt callstack 0
  2394                           
  2395 ;; *************** function _i2c_Read *****************
  2396 ;; Defined at:
  2397 ;;		line 85 in file "i2c.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  ack             1    wreg     unsigned char 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  ack             1    9[COMRAM] unsigned char 
  2402 ;;  i2cReadData     1   10[COMRAM] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2    7[COMRAM] int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:        4 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    3
  2419 ;; This function calls:
  2420 ;;		_i2c_Wait
  2421 ;; This function is called by:
  2422 ;;		_read_i2c
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text3
  2427  001644                     __ptext3:
  2428                           	opt callstack 0
  2429  001644                     _i2c_Read:
  2430                           	opt callstack 26
  2431                           
  2432                           ;incstack = 0
  2433                           ;i2c_Read@ack stored from wreg
  2434  001644  6E3F               	movwf	i2c_Read@ack,c
  2435                           
  2436                           ;i2c.c: 85: int i2c_Read(unsigned char ack);i2c.c: 86: {;i2c.c: 90:   unsigned char i2cR
      +                          eadData;;i2c.c: 92:   i2c_Wait();
  2437  001646  EC94  F00B         	call	_i2c_Wait	;wreg free
  2438                           
  2439                           ;i2c.c: 93:  RCEN2=1;
  2440  00164A  866B               	bsf	3947,3,c	;volatile
  2441                           
  2442                           ;i2c.c: 94:   i2c_Wait();
  2443  00164C  EC94  F00B         	call	_i2c_Wait	;wreg free
  2444                           
  2445                           ;i2c.c: 95:   i2cReadData = SSP2BUF;
  2446  001650  CF6F F040          	movff	3951,i2c_Read@i2cReadData	;volatile
  2447                           
  2448                           ;i2c.c: 96:   i2c_Wait();
  2449  001654  EC94  F00B         	call	_i2c_Wait	;wreg free
  2450                           
  2451                           ;i2c.c: 97:   if ( ack )
  2452  001658  503F               	movf	i2c_Read@ack,w,c
  2453  00165A  B4D8               	btfsc	status,2,c
  2454  00165C  D002               	goto	l503
  2455                           
  2456                           ;i2c.c: 98:   ACKDT2=0;
  2457  00165E  9A6B               	bcf	3947,5,c	;volatile
  2458  001660  D001               	goto	l504
  2459  001662                     l503:
  2460                           
  2461                           ;i2c.c: 100:   ACKDT2=1;
  2462  001662  8A6B               	bsf	3947,5,c	;volatile
  2463  001664                     l504:
  2464                           
  2465                           ;i2c.c: 101:  ACKEN2=1;
  2466  001664  886B               	bsf	3947,4,c	;volatile
  2467                           
  2468                           ;i2c.c: 103:  return( i2cReadData );
  2469  001666  C040  F03D         	movff	i2c_Read@i2cReadData,?_i2c_Read
  2470  00166A  6A3E               	clrf	?_i2c_Read+1,c
  2471  00166C  0012               	return		;funcret
  2472  00166E                     __end_of_i2c_Read:
  2473                           	opt callstack 0
  2474                           
  2475 ;; *************** function _initUSART *****************
  2476 ;; Defined at:
  2477 ;;		line 20 in file "usart.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:        0 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    2
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text4
  2506  00166E                     __ptext4:
  2507                           	opt callstack 0
  2508  00166E                     _initUSART:
  2509                           	opt callstack 28
  2510                           
  2511                           ;usart.c: 23:     TRISCbits.TRISC6 = 0;
  2512                           
  2513                           ;incstack = 0
  2514  00166E  9C94               	bcf	3988,6,c	;volatile
  2515                           
  2516                           ;usart.c: 24:     TRISCbits.TRISC7 = 1;
  2517  001670  8E94               	bsf	3988,7,c	;volatile
  2518                           
  2519                           ;usart.c: 25:     TXSTA1bits.SYNC = 0;
  2520  001672  98AD               	bcf	4013,4,c	;volatile
  2521                           
  2522                           ;usart.c: 26:     TXSTA1bits.TX9 = 0;
  2523  001674  9CAD               	bcf	4013,6,c	;volatile
  2524                           
  2525                           ;usart.c: 27:     TXSTA1bits.TXEN = 1;
  2526  001676  8AAD               	bsf	4013,5,c	;volatile
  2527                           
  2528                           ;usart.c: 28:     RCSTA1bits.RX9 = 0;
  2529  001678  9CAC               	bcf	4012,6,c	;volatile
  2530                           
  2531                           ;usart.c: 29:     RCSTA1bits.CREN = 1;
  2532  00167A  88AC               	bsf	4012,4,c	;volatile
  2533                           
  2534                           ;usart.c: 30:     TXSTA1bits.CSRC = 0;
  2535  00167C  9EAD               	bcf	4013,7,c	;volatile
  2536                           
  2537                           ;usart.c: 31:     RCSTA1bits.ADDEN = 1;
  2538  00167E  86AC               	bsf	4012,3,c	;volatile
  2539                           
  2540                           ;usart.c: 32:     RCSTA1bits.SPEN = 1;
  2541  001680  8EAC               	bsf	4012,7,c	;volatile
  2542                           
  2543                           ;usart.c: 35:     BAUDCON1bits.BRG16 = 0;
  2544  001682  967E               	bcf	3966,3,c	;volatile
  2545                           
  2546                           ;usart.c: 36:     TXSTA1bits.BRGH = 1;
  2547  001684  84AD               	bsf	4013,2,c	;volatile
  2548                           
  2549                           ;usart.c: 37:     PIE1bits.RC1IE = 1;
  2550  001686  8A9D               	bsf	3997,5,c	;volatile
  2551                           
  2552                           ;usart.c: 38:     PIE1bits.TX1IE = 0;
  2553  001688  989D               	bcf	3997,4,c	;volatile
  2554                           
  2555                           ;usart.c: 40:     SPBRG1 = 25;
  2556  00168A  0E19               	movlw	25
  2557  00168C  6EB0               	movwf	4016,c	;volatile
  2558                           
  2559                           ;usart.c: 41:     SPBRGH1 = 0;
  2560  00168E  0E00               	movlw	0
  2561  001690  6E7F               	movwf	3967,c	;volatile
  2562  001692  0012               	return		;funcret
  2563  001694                     __end_of_initUSART:
  2564                           	opt callstack 0
  2565                           
  2566 ;; *************** function _initMotor *****************
  2567 ;; Defined at:
  2568 ;;		line 21 in file "MotorDriver.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;		None
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;		None
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:        0 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    2
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text5
  2597  00173A                     __ptext5:
  2598                           	opt callstack 0
  2599  00173A                     _initMotor:
  2600                           	opt callstack 28
  2601                           
  2602                           ;MotorDriver.c: 23:     PR4 = 0xC7;
  2603                           
  2604                           ;incstack = 0
  2605  00173A  0EC7               	movlw	199
  2606  00173C  6E77               	movwf	3959,c	;volatile
  2607                           
  2608                           ;MotorDriver.c: 24:     T3CONbits.T3CCP1 = 0;
  2609  00173E  9679               	bcf	3961,3,c	;volatile
  2610                           
  2611                           ;MotorDriver.c: 25:     T3CONbits.T3CCP2 = 1;
  2612  001740  8C79               	bsf	3961,6,c	;volatile
  2613                           
  2614                           ;MotorDriver.c: 26:     T4CON = 0x00;
  2615  001742  0E00               	movlw	0
  2616  001744  6E76               	movwf	3958,c	;volatile
  2617  001746  0012               	return		;funcret
  2618  001748                     __end_of_initMotor:
  2619                           	opt callstack 0
  2620                           
  2621 ;; *************** function _init *****************
  2622 ;; Defined at:
  2623 ;;		line 18 in file "IO.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    2
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text6
  2652  001498                     __ptext6:
  2653                           	opt callstack 0
  2654  001498                     _init:
  2655                           	opt callstack 28
  2656                           
  2657                           ;IO.c: 20:     TRISA = 0xFB;
  2658                           
  2659                           ;incstack = 0
  2660  001498  0EFB               	movlw	251
  2661  00149A  6E92               	movwf	3986,c	;volatile
  2662                           
  2663                           ;IO.c: 21:     TRISB = 0XFF;
  2664  00149C  6893               	setf	3987,c	;volatile
  2665                           
  2666                           ;IO.c: 22:     TRISC = 0X84;
  2667  00149E  0E84               	movlw	132
  2668  0014A0  6E94               	movwf	3988,c	;volatile
  2669                           
  2670                           ;IO.c: 23:     TRISD = 0XC0;
  2671  0014A2  0EC0               	movlw	192
  2672  0014A4  6E95               	movwf	3989,c	;volatile
  2673                           
  2674                           ;IO.c: 24:     TRISE = 0X00;
  2675  0014A6  0E00               	movlw	0
  2676  0014A8  6E96               	movwf	3990,c	;volatile
  2677                           
  2678                           ;IO.c: 25:     TRISF = 0X00;
  2679  0014AA  0E00               	movlw	0
  2680  0014AC  6E97               	movwf	3991,c	;volatile
  2681                           
  2682                           ;IO.c: 26:     TRISG = 0X05;
  2683  0014AE  0E05               	movlw	5
  2684  0014B0  6E98               	movwf	3992,c	;volatile
  2685                           
  2686                           ;IO.c: 29:     ADCON0bits.VCFG1 = 0;
  2687  0014B2  9EC2               	bcf	4034,7,c	;volatile
  2688                           
  2689                           ;IO.c: 30:  ADCON0bits.VCFG0 = 0;
  2690  0014B4  9CC2               	bcf	4034,6,c	;volatile
  2691                           
  2692                           ;IO.c: 31:     ADCON0bits.ADON=0;
  2693  0014B6  90C2               	bcf	4034,0,c	;volatile
  2694                           
  2695                           ;IO.c: 34:  ADCON1bits.ADFM = 1;
  2696  0014B8  8EC1               	bsf	4033,7,c	;volatile
  2697                           
  2698                           ;IO.c: 35:  ADCON1bits.ADCAL = 0;
  2699  0014BA  9CC1               	bcf	4033,6,c	;volatile
  2700                           
  2701                           ;IO.c: 36:  ADCON1bits.ACQT2 = 0;
  2702  0014BC  9AC1               	bcf	4033,5,c	;volatile
  2703                           
  2704                           ;IO.c: 37:  ADCON1bits.ACQT1 = 1;
  2705  0014BE  88C1               	bsf	4033,4,c	;volatile
  2706                           
  2707                           ;IO.c: 38:  ADCON1bits.ACQT0 = 0;
  2708  0014C0  96C1               	bcf	4033,3,c	;volatile
  2709                           
  2710                           ;IO.c: 39:  ADCON1bits.ADCS2 = 1;
  2711  0014C2  84C1               	bsf	4033,2,c	;volatile
  2712                           
  2713                           ;IO.c: 40:  ADCON1bits.ADCS1 = 0;
  2714  0014C4  92C1               	bcf	4033,1,c	;volatile
  2715                           
  2716                           ;IO.c: 41:  ADCON1bits.ADCS0 = 0;
  2717  0014C6  90C1               	bcf	4033,0,c	;volatile
  2718                           
  2719                           ;IO.c: 44:  WDTCONbits.ADSHR = 1;
  2720  0014C8  88C0               	bsf	4032,4,c	;volatile
  2721                           
  2722                           ;IO.c: 50:  ANCON0bits.PCFG0 = 0;
  2723  0014CA  90C1               	bcf	4033,0,c	;volatile
  2724                           
  2725                           ;IO.c: 51:  ANCON0bits.PCFG1 = 1;
  2726  0014CC  82C1               	bsf	4033,1,c	;volatile
  2727                           
  2728                           ;IO.c: 52:  ANCON0bits.PCFG2 = 1;
  2729  0014CE  84C1               	bsf	4033,2,c	;volatile
  2730                           
  2731                           ;IO.c: 53:  ANCON0bits.PCFG3 = 1;
  2732  0014D0  86C1               	bsf	4033,3,c	;volatile
  2733                           
  2734                           ;IO.c: 54:  ANCON0bits.PCFG4 = 1;
  2735  0014D2  88C1               	bsf	4033,4,c	;volatile
  2736                           
  2737                           ;IO.c: 55:     ANCON0bits.PCFG7 = 1;
  2738  0014D4  8EC1               	bsf	4033,7,c	;volatile
  2739                           
  2740                           ;IO.c: 57:     WDTCONbits.ADSHR = 0;
  2741  0014D6  98C0               	bcf	4032,4,c	;volatile
  2742                           
  2743                           ;IO.c: 59:     INTCONbits.GIE = 1;
  2744  0014D8  8EF2               	bsf	4082,7,c	;volatile
  2745                           
  2746                           ;IO.c: 64:     OSCCONbits.SCS = 0b11;
  2747  0014DA  0E03               	movlw	3
  2748  0014DC  12D3               	iorwf	4051,f,c	;volatile
  2749                           
  2750                           ;IO.c: 65:     OSCCONbits.IRCF = 0b111;
  2751  0014DE  0E70               	movlw	112
  2752  0014E0  12D3               	iorwf	4051,f,c	;volatile
  2753  0014E2  0012               	return		;funcret
  2754  0014E4                     __end_of_init:
  2755                           	opt callstack 0
  2756                           
  2757 ;; *************** function _i2c_Init *****************
  2758 ;; Defined at:
  2759 ;;		line 24 in file "i2c.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;Total ram usage:        0 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    2
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_main
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text7
  2788  0016FE                     __ptext7:
  2789                           	opt callstack 0
  2790  0016FE                     _i2c_Init:
  2791                           	opt callstack 28
  2792                           
  2793                           ;i2c.c: 28:  TRISD5=1;
  2794                           
  2795                           ;incstack = 0
  2796  0016FE  8A95               	bsf	3989,5,c	;volatile
  2797                           
  2798                           ;i2c.c: 29:  TRISD6=1;
  2799  001700  8C95               	bsf	3989,6,c	;volatile
  2800                           
  2801                           ;i2c.c: 31:  SSP2CON1 = 0b00101000;
  2802  001702  0E28               	movlw	40
  2803  001704  6E6C               	movwf	3948,c	;volatile
  2804                           
  2805                           ;i2c.c: 32:  SSP2CON2 = 0x00;
  2806  001706  0E00               	movlw	0
  2807  001708  6E6B               	movwf	3947,c	;volatile
  2808                           
  2809                           ;i2c.c: 34:     SSP2ADD = 39;
  2810  00170A  0E27               	movlw	39
  2811  00170C  6E6E               	movwf	3950,c	;volatile
  2812                           
  2813                           ;i2c.c: 36:  SSP2STAT = 0b11000000;
  2814  00170E  0EC0               	movlw	192
  2815  001710  6E6D               	movwf	3949,c	;volatile
  2816  001712  0012               	return		;funcret
  2817  001714                     __end_of_i2c_Init:
  2818                           	opt callstack 0
  2819                           
  2820 ;; *************** function _flush *****************
  2821 ;; Defined at:
  2822 ;;		line 1080 in file "main.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  i               2    6[COMRAM] int 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        2 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    2
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text8
  2851  0015B6                     __ptext8:
  2852                           	opt callstack 0
  2853  0015B6                     _flush:
  2854                           	opt callstack 28
  2855                           
  2856                           ;main.c: 1082:     int i;;main.c: 1084:     for(i=0; i<16; i++)
  2857                           
  2858                           ;incstack = 0
  2859  0015B6  0E00               	movlw	0
  2860  0015B8  6E3D               	movwf	flush@i+1,c
  2861  0015BA  0E00               	movlw	0
  2862  0015BC  6E3C               	movwf	flush@i,c
  2863  0015BE                     l3459:
  2864                           
  2865                           ;main.c: 1085:     {;main.c: 1086:         Serial_Buffer[i]=0x00;
  2866  0015BE  0E01               	movlw	low _Serial_Buffer
  2867  0015C0  243C               	addwf	flush@i,w,c
  2868  0015C2  6ED9               	movwf	fsr2l,c
  2869  0015C4  0E00               	movlw	high _Serial_Buffer
  2870  0015C6  203D               	addwfc	flush@i+1,w,c
  2871  0015C8  6EDA               	movwf	fsr2h,c
  2872  0015CA  0E00               	movlw	0
  2873  0015CC  6EDF               	movwf	indf2,c
  2874                           
  2875                           ;main.c: 1087:     }
  2876  0015CE  4A3C               	infsnz	flush@i,f,c
  2877  0015D0  2A3D               	incf	flush@i+1,f,c
  2878  0015D2  BE3D               	btfsc	flush@i+1,7,c
  2879  0015D4  D7F4               	goto	l3459
  2880  0015D6  503D               	movf	flush@i+1,w,c
  2881  0015D8  E105               	bnz	u2000
  2882  0015DA  0E10               	movlw	16
  2883  0015DC  5C3C               	subwf	flush@i,w,c
  2884  0015DE  B0D8               	btfsc	status,0,c
  2885  0015E0  0012               	return	
  2886  0015E2  D7ED               	goto	l3459
  2887  0015E4                     u2000:
  2888  0015E4  0012               	return		;funcret
  2889  0015E6                     __end_of_flush:
  2890                           	opt callstack 0
  2891                           
  2892 ;; *************** function _WriteSTLED316SVibMode *****************
  2893 ;; Defined at:
  2894 ;;		line 253 in file "Display.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  v_mode          1    wreg     unsigned char 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  v_mode          1   12[COMRAM] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        1 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    3
  2915 ;; This function calls:
  2916 ;;		_STLED316s_SPI_SendData
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text9
  2923  001574                     __ptext9:
  2924                           	opt callstack 0
  2925  001574                     _WriteSTLED316SVibMode:
  2926                           	opt callstack 27
  2927                           
  2928                           ;incstack = 0
  2929                           ;WriteSTLED316SVibMode@v_mode stored from wreg
  2930  001574  6E42               	movwf	WriteSTLED316SVibMode@v_mode,c
  2931                           
  2932                           ;Display.c: 253: void WriteSTLED316SVibMode( char v_mode);Display.c: 254: {;Display.c: 2
      +                          56:  LATCbits.LATC4 = 0;
  2933  001576  988B               	bcf	3979,4,c	;volatile
  2934                           
  2935                           ;Display.c: 258:  STLED316s_SPI_SendData (0x00 );
  2936  001578  0E00               	movlw	0
  2937  00157A  ECFC  F009         	call	_STLED316s_SPI_SendData
  2938                           
  2939                           ;Display.c: 261:  LATCbits.LATC4 = 1;
  2940  00157E  888B               	bsf	3979,4,c	;volatile
  2941                           
  2942                           ;Display.c: 263:  LATCbits.LATC4 = 0;
  2943  001580  988B               	bcf	3979,4,c	;volatile
  2944                           
  2945                           ;Display.c: 265:  STLED316s_SPI_SendData (0x00);
  2946  001582  0E00               	movlw	0
  2947  001584  ECFC  F009         	call	_STLED316s_SPI_SendData
  2948                           
  2949                           ;Display.c: 271:     if (v_mode == 1)
  2950  001588  0442               	decf	WriteSTLED316SVibMode@v_mode,w,c
  2951  00158A  A4D8               	btfss	status,2,c
  2952  00158C  D007               	goto	l3247
  2953                           
  2954                           ;Display.c: 272:     {;Display.c: 273:   STLED316s_SPI_SendData (0x00);
  2955  00158E  0E00               	movlw	0
  2956  001590  ECFC  F009         	call	_STLED316s_SPI_SendData
  2957                           
  2958                           ;Display.c: 274:         STLED316s_SPI_SendData (0xBE);
  2959  001594  0EBE               	movlw	190
  2960  001596  ECFC  F009         	call	_STLED316s_SPI_SendData
  2961                           
  2962                           ;Display.c: 275:     }
  2963  00159A  D006               	goto	l3249
  2964  00159C                     l3247:
  2965                           
  2966                           ;Display.c: 277:     {;Display.c: 278:         STLED316s_SPI_SendData (0x00);
  2967  00159C  0E00               	movlw	0
  2968  00159E  ECFC  F009         	call	_STLED316s_SPI_SendData
  2969                           
  2970                           ;Display.c: 279:         STLED316s_SPI_SendData (0x3E);
  2971  0015A2  0E3E               	movlw	62
  2972  0015A4  ECFC  F009         	call	_STLED316s_SPI_SendData
  2973  0015A8                     l3249:
  2974                           
  2975                           ;Display.c: 282:  LATCbits.LATC4 = 1;
  2976  0015A8  888B               	bsf	3979,4,c	;volatile
  2977                           
  2978                           ;Display.c: 284:  LATCbits.LATC4 = 0;
  2979  0015AA  988B               	bcf	3979,4,c	;volatile
  2980                           
  2981                           ;Display.c: 286:  STLED316s_SPI_SendData ( 0x0D );
  2982  0015AC  0E0D               	movlw	13
  2983  0015AE  ECFC  F009         	call	_STLED316s_SPI_SendData
  2984                           
  2985                           ;Display.c: 288:  LATCbits.LATC4 = 1;
  2986  0015B2  888B               	bsf	3979,4,c	;volatile
  2987  0015B4  0012               	return		;funcret
  2988  0015B6                     __end_of_WriteSTLED316SVibMode:
  2989                           	opt callstack 0
  2990                           
  2991 ;; *************** function _ToggleVIB_Mode *****************
  2992 ;; Defined at:
  2993 ;;		line 846 in file "main.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    5
  3014 ;; This function calls:
  3015 ;;		_write_i2c
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text10
  3022  001616                     __ptext10:
  3023                           	opt callstack 0
  3024  001616                     _ToggleVIB_Mode:
  3025                           	opt callstack 25
  3026                           
  3027                           ;main.c: 848:     if (vibration_mode)
  3028                           
  3029                           ;incstack = 0
  3030  001616  5030               	movf	_vibration_mode,w,c
  3031  001618  B4D8               	btfsc	status,2,c
  3032  00161A  D002               	goto	l3227
  3033                           
  3034                           ;main.c: 849:         vibration_mode = 0;
  3035  00161C  0E00               	movlw	0
  3036  00161E  D001               	goto	L17
  3037  001620                     l3227:
  3038                           
  3039                           ;main.c: 851:         vibration_mode = 1;
  3040  001620  0E01               	movlw	1
  3041  001622                     L17:
  3042  001622  6E30               	movwf	_vibration_mode,c
  3043                           
  3044                           ;main.c: 858:     INTCONbits.GIE=0;
  3045  001624  9EF2               	bcf	4082,7,c	;volatile
  3046                           
  3047                           ;main.c: 859:     write_i2c(0x0010, vibration_mode);
  3048  001626  0E10               	movlw	16
  3049  001628  6E4A               	movwf	write_i2c@address,c
  3050  00162A  0E00               	movlw	0
  3051  00162C  6E4B               	movwf	write_i2c@address+1,c
  3052  00162E  0E00               	movlw	0
  3053  001630  6E4C               	movwf	write_i2c@address+2,c
  3054  001632  0E00               	movlw	0
  3055  001634  6E4D               	movwf	write_i2c@address+3,c
  3056  001636  C030  F04E         	movff	_vibration_mode,write_i2c@data
  3057  00163A  6A4F               	clrf	write_i2c@data+1,c
  3058  00163C  EC72  F00A         	call	_write_i2c	;wreg free
  3059                           
  3060                           ;main.c: 860:     INTCONbits.GIE=1;
  3061  001640  8EF2               	bsf	4082,7,c	;volatile
  3062  001642  0012               	return		;funcret
  3063  001644                     __end_of_ToggleVIB_Mode:
  3064                           	opt callstack 0
  3065                           
  3066 ;; *************** function _write_i2c *****************
  3067 ;; Defined at:
  3068 ;;		line 107 in file "i2c.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  address         4   20[COMRAM] long 
  3071 ;;  data            2   24[COMRAM] int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        6 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    4
  3090 ;; This function calls:
  3091 ;;		___aldiv
  3092 ;;		_i2c_Address
  3093 ;;		_i2c_Start
  3094 ;;		_i2c_Stop
  3095 ;;		_i2c_Write
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;;		_ToggleVIB_Mode
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text11
  3103  0014E4                     __ptext11:
  3104                           	opt callstack 0
  3105  0014E4                     _write_i2c:
  3106                           	opt callstack 26
  3107                           
  3108                           ;i2c.c: 107: void write_i2c(long address, int data);i2c.c: 108: {;i2c.c: 109:  i2c_Start
      +                          ();
  3109                           
  3110                           ;incstack = 0
  3111  0014E4  ECCE  F00B         	call	_i2c_Start	;wreg free
  3112                           
  3113                           ;i2c.c: 110:  i2c_Address(0xA0, 0);
  3114  0014E8  0E00               	movlw	0
  3115  0014EA  6E3D               	movwf	i2c_Address@mode,c
  3116  0014EC  0EA0               	movlw	160
  3117  0014EE  EC8A  F00B         	call	_i2c_Address
  3118                           
  3119                           ;i2c.c: 111:  i2c_Write((unsigned char)(address/0x100));
  3120  0014F2  C04A  F03C         	movff	write_i2c@address,___aldiv@dividend
  3121  0014F6  C04B  F03D         	movff	write_i2c@address+1,___aldiv@dividend+1
  3122  0014FA  C04C  F03E         	movff	write_i2c@address+2,___aldiv@dividend+2
  3123  0014FE  C04D  F03F         	movff	write_i2c@address+3,___aldiv@dividend+3
  3124  001502  0E00               	movlw	0
  3125  001504  6E40               	movwf	___aldiv@divisor,c
  3126  001506  0E01               	movlw	1
  3127  001508  6E41               	movwf	___aldiv@divisor+1,c
  3128  00150A  0E00               	movlw	0
  3129  00150C  6E42               	movwf	___aldiv@divisor+2,c
  3130  00150E  0E00               	movlw	0
  3131  001510  6E43               	movwf	___aldiv@divisor+3,c
  3132  001512  ECB8  F007         	call	___aldiv	;wreg free
  3133  001516  503C               	movf	?___aldiv,w,c
  3134  001518  ECA4  F00B         	call	_i2c_Write
  3135                           
  3136                           ;i2c.c: 112:  i2c_Write((unsigned char)(address&0xFF));
  3137  00151C  504A               	movf	write_i2c@address,w,c
  3138  00151E  ECA4  F00B         	call	_i2c_Write
  3139                           
  3140                           ;i2c.c: 113:  i2c_Write((unsigned char)data);
  3141  001522  504E               	movf	write_i2c@data,w,c
  3142  001524  ECA4  F00B         	call	_i2c_Write
  3143                           
  3144                           ;i2c.c: 114:   i2c_Stop();
  3145  001528  ECCA  F00B         	call	_i2c_Stop	;wreg free
  3146  00152C  0012               	return		;funcret
  3147  00152E                     __end_of_write_i2c:
  3148                           	opt callstack 0
  3149                           
  3150 ;; *************** function _i2c_Write *****************
  3151 ;; Defined at:
  3152 ;;		line 66 in file "i2c.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  data            1    wreg     unsigned char 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  data            1    7[COMRAM] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, status,2, status,0, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;Total ram usage:        1 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    3
  3173 ;; This function calls:
  3174 ;;		_i2c_Wait
  3175 ;; This function is called by:
  3176 ;;		_write_i2c
  3177 ;;		_read_i2c
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text12
  3182  001748                     __ptext12:
  3183                           	opt callstack 0
  3184  001748                     _i2c_Write:
  3185                           	opt callstack 26
  3186                           
  3187                           ;incstack = 0
  3188                           ;i2c_Write@data stored from wreg
  3189  001748  6E3D               	movwf	i2c_Write@data,c
  3190                           
  3191                           ;i2c.c: 66: void i2c_Write(unsigned char data);i2c.c: 67: {;i2c.c: 68:   i2c_Wait();
  3192  00174A  EC94  F00B         	call	_i2c_Wait	;wreg free
  3193                           
  3194                           ;i2c.c: 69:   SSP2BUF = data;
  3195  00174E  C03D  FF6F         	movff	i2c_Write@data,3951	;volatile
  3196  001752  0012               	return		;funcret
  3197  001754                     __end_of_i2c_Write:
  3198                           	opt callstack 0
  3199                           
  3200 ;; *************** function _i2c_Stop *****************
  3201 ;; Defined at:
  3202 ;;		line 59 in file "i2c.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;Total ram usage:        0 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    3
  3223 ;; This function calls:
  3224 ;;		_i2c_Wait
  3225 ;; This function is called by:
  3226 ;;		_write_i2c
  3227 ;;		_read_i2c
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text13
  3232  001794                     __ptext13:
  3233                           	opt callstack 0
  3234  001794                     _i2c_Stop:
  3235                           	opt callstack 26
  3236                           
  3237                           ;i2c.c: 61:   i2c_Wait();
  3238                           
  3239                           ;incstack = 0
  3240  001794  EC94  F00B         	call	_i2c_Wait	;wreg free
  3241                           
  3242                           ;i2c.c: 62:   PEN2=1;
  3243  001798  846B               	bsf	3947,2,c	;volatile
  3244  00179A  0012               	return		;funcret
  3245  00179C                     __end_of_i2c_Stop:
  3246                           	opt callstack 0
  3247                           
  3248 ;; *************** function _i2c_Start *****************
  3249 ;; Defined at:
  3250 ;;		line 46 in file "i2c.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        0 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		_i2c_Wait
  3273 ;; This function is called by:
  3274 ;;		_write_i2c
  3275 ;;		_read_i2c
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text14
  3280  00179C                     __ptext14:
  3281                           	opt callstack 0
  3282  00179C                     _i2c_Start:
  3283                           	opt callstack 26
  3284                           
  3285                           ;i2c.c: 48:   i2c_Wait();
  3286                           
  3287                           ;incstack = 0
  3288  00179C  EC94  F00B         	call	_i2c_Wait	;wreg free
  3289                           
  3290                           ;i2c.c: 49:  SEN2=1;
  3291  0017A0  806B               	bsf	3947,0,c	;volatile
  3292  0017A2  0012               	return		;funcret
  3293  0017A4                     __end_of_i2c_Start:
  3294                           	opt callstack 0
  3295                           
  3296 ;; *************** function _i2c_Address *****************
  3297 ;; Defined at:
  3298 ;;		line 74 in file "i2c.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  address         1    wreg     unsigned char 
  3301 ;;  mode            1    7[COMRAM] unsigned char 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  address         1    8[COMRAM] unsigned char 
  3304 ;;  l_address       1    9[COMRAM] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3314 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;Total ram usage:        3 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    3
  3321 ;; This function calls:
  3322 ;;		_i2c_Wait
  3323 ;; This function is called by:
  3324 ;;		_write_i2c
  3325 ;;		_read_i2c
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text15
  3330  001714                     __ptext15:
  3331                           	opt callstack 0
  3332  001714                     _i2c_Address:
  3333                           	opt callstack 26
  3334                           
  3335                           ;incstack = 0
  3336                           ;i2c_Address@address stored from wreg
  3337  001714  6E3E               	movwf	i2c_Address@address,c
  3338                           
  3339                           ;i2c.c: 74: void i2c_Address(unsigned char address, unsigned char mode);i2c.c: 75: {;i2c
      +                          .c: 76:  unsigned char l_address;;i2c.c: 78:  l_address=address;
  3340  001716  C03E  F03F         	movff	i2c_Address@address,i2c_Address@l_address
  3341                           
  3342                           ;i2c.c: 79:  l_address += mode;
  3343  00171A  503D               	movf	i2c_Address@mode,w,c
  3344  00171C  263F               	addwf	i2c_Address@l_address,f,c
  3345                           
  3346                           ;i2c.c: 80:   i2c_Wait();
  3347  00171E  EC94  F00B         	call	_i2c_Wait	;wreg free
  3348                           
  3349                           ;i2c.c: 81:   SSP2BUF = l_address;
  3350  001722  C03F  FF6F         	movff	i2c_Address@l_address,3951	;volatile
  3351  001726  0012               	return		;funcret
  3352  001728                     __end_of_i2c_Address:
  3353                           	opt callstack 0
  3354                           
  3355 ;; *************** function _i2c_Wait *****************
  3356 ;; Defined at:
  3357 ;;		line 41 in file "i2c.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;Total ram usage:        1 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    2
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_i2c_Start
  3382 ;;		_i2c_Restart
  3383 ;;		_i2c_Stop
  3384 ;;		_i2c_Write
  3385 ;;		_i2c_Address
  3386 ;;		_i2c_Read
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text16
  3391  001728                     __ptext16:
  3392                           	opt callstack 0
  3393  001728                     _i2c_Wait:
  3394                           	opt callstack 26
  3395                           
  3396                           ;i2c.c: 42:     while ( ( SSP2CON2 & 0x1F ) || ( SSP2STAT & 0x04 ) );
  3397                           
  3398                           ;incstack = 0
  3399  001728  CF6B F03C          	movff	3947,??_i2c_Wait	;volatile
  3400  00172C  0E1F               	movlw	31
  3401  00172E  163C               	andwf	??_i2c_Wait,f,c
  3402  001730  A4D8               	btfss	status,2,c
  3403  001732  D7FA               	goto	_i2c_Wait
  3404  001734  A46D               	btfss	3949,2,c	;volatile
  3405  001736  0012               	return	
  3406  001738  D7F7               	goto	_i2c_Wait
  3407  00173A                     __end_of_i2c_Wait:
  3408                           	opt callstack 0
  3409                           
  3410 ;; *************** function ___aldiv *****************
  3411 ;; Defined at:
  3412 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  dividend        4    6[COMRAM] long 
  3415 ;;  divisor         4   10[COMRAM] long 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  quotient        4   16[COMRAM] long 
  3418 ;;  sign            1   15[COMRAM] unsigned char 
  3419 ;;  counter         1   14[COMRAM] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  4    6[COMRAM] long 
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3429 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;Total ram usage:       14 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    2
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_write_i2c
  3440 ;;		_read_i2c
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text17
  3445  000F70                     __ptext17:
  3446                           	opt callstack 0
  3447  000F70                     ___aldiv:
  3448                           	opt callstack 27
  3449                           
  3450                           ;incstack = 0
  3451  000F70  0E00               	movlw	0
  3452  000F72  6E45               	movwf	___aldiv@sign,c
  3453  000F74  AE43               	btfss	___aldiv@divisor+3,7,c
  3454  000F76  D00A               	goto	l2807
  3455  000F78  1E43               	comf	___aldiv@divisor+3,f,c
  3456  000F7A  1E42               	comf	___aldiv@divisor+2,f,c
  3457  000F7C  1E41               	comf	___aldiv@divisor+1,f,c
  3458  000F7E  6C40               	negf	___aldiv@divisor,c
  3459  000F80  0E00               	movlw	0
  3460  000F82  2241               	addwfc	___aldiv@divisor+1,f,c
  3461  000F84  2242               	addwfc	___aldiv@divisor+2,f,c
  3462  000F86  2243               	addwfc	___aldiv@divisor+3,f,c
  3463  000F88  0E01               	movlw	1
  3464  000F8A  6E45               	movwf	___aldiv@sign,c
  3465  000F8C                     l2807:
  3466  000F8C  AE3F               	btfss	___aldiv@dividend+3,7,c
  3467  000F8E  D00A               	goto	l2813
  3468  000F90  1E3F               	comf	___aldiv@dividend+3,f,c
  3469  000F92  1E3E               	comf	___aldiv@dividend+2,f,c
  3470  000F94  1E3D               	comf	___aldiv@dividend+1,f,c
  3471  000F96  6C3C               	negf	___aldiv@dividend,c
  3472  000F98  0E00               	movlw	0
  3473  000F9A  223D               	addwfc	___aldiv@dividend+1,f,c
  3474  000F9C  223E               	addwfc	___aldiv@dividend+2,f,c
  3475  000F9E  223F               	addwfc	___aldiv@dividend+3,f,c
  3476  000FA0  0E01               	movlw	1
  3477  000FA2  1A45               	xorwf	___aldiv@sign,f,c
  3478  000FA4                     l2813:
  3479  000FA4  0E00               	movlw	0
  3480  000FA6  6E46               	movwf	___aldiv@quotient,c
  3481  000FA8  0E00               	movlw	0
  3482  000FAA  6E47               	movwf	___aldiv@quotient+1,c
  3483  000FAC  0E00               	movlw	0
  3484  000FAE  6E48               	movwf	___aldiv@quotient+2,c
  3485  000FB0  0E00               	movlw	0
  3486  000FB2  6E49               	movwf	___aldiv@quotient+3,c
  3487  000FB4  5040               	movf	___aldiv@divisor,w,c
  3488  000FB6  1041               	iorwf	___aldiv@divisor+1,w,c
  3489  000FB8  1042               	iorwf	___aldiv@divisor+2,w,c
  3490  000FBA  1043               	iorwf	___aldiv@divisor+3,w,c
  3491  000FBC  B4D8               	btfsc	status,2,c
  3492  000FBE  D02A               	goto	l2835
  3493  000FC0  0E01               	movlw	1
  3494  000FC2  6E44               	movwf	___aldiv@counter,c
  3495  000FC4  D006               	goto	l2821
  3496  000FC6                     l2819:
  3497  000FC6  90D8               	bcf	status,0,c
  3498  000FC8  3640               	rlcf	___aldiv@divisor,f,c
  3499  000FCA  3641               	rlcf	___aldiv@divisor+1,f,c
  3500  000FCC  3642               	rlcf	___aldiv@divisor+2,f,c
  3501  000FCE  3643               	rlcf	___aldiv@divisor+3,f,c
  3502  000FD0  2A44               	incf	___aldiv@counter,f,c
  3503  000FD2                     l2821:
  3504  000FD2  AE43               	btfss	___aldiv@divisor+3,7,c
  3505  000FD4  D7F8               	goto	l2819
  3506  000FD6                     u1460:
  3507  000FD6  90D8               	bcf	status,0,c
  3508  000FD8  3646               	rlcf	___aldiv@quotient,f,c
  3509  000FDA  3647               	rlcf	___aldiv@quotient+1,f,c
  3510  000FDC  3648               	rlcf	___aldiv@quotient+2,f,c
  3511  000FDE  3649               	rlcf	___aldiv@quotient+3,f,c
  3512  000FE0  5040               	movf	___aldiv@divisor,w,c
  3513  000FE2  5C3C               	subwf	___aldiv@dividend,w,c
  3514  000FE4  5041               	movf	___aldiv@divisor+1,w,c
  3515  000FE6  583D               	subwfb	___aldiv@dividend+1,w,c
  3516  000FE8  5042               	movf	___aldiv@divisor+2,w,c
  3517  000FEA  583E               	subwfb	___aldiv@dividend+2,w,c
  3518  000FEC  5043               	movf	___aldiv@divisor+3,w,c
  3519  000FEE  583F               	subwfb	___aldiv@dividend+3,w,c
  3520  000FF0  A0D8               	btfss	status,0,c
  3521  000FF2  D009               	goto	l2831
  3522  000FF4  5040               	movf	___aldiv@divisor,w,c
  3523  000FF6  5E3C               	subwf	___aldiv@dividend,f,c
  3524  000FF8  5041               	movf	___aldiv@divisor+1,w,c
  3525  000FFA  5A3D               	subwfb	___aldiv@dividend+1,f,c
  3526  000FFC  5042               	movf	___aldiv@divisor+2,w,c
  3527  000FFE  5A3E               	subwfb	___aldiv@dividend+2,f,c
  3528  001000  5043               	movf	___aldiv@divisor+3,w,c
  3529  001002  5A3F               	subwfb	___aldiv@dividend+3,f,c
  3530  001004  8046               	bsf	___aldiv@quotient,0,c
  3531  001006                     l2831:
  3532  001006  90D8               	bcf	status,0,c
  3533  001008  3243               	rrcf	___aldiv@divisor+3,f,c
  3534  00100A  3242               	rrcf	___aldiv@divisor+2,f,c
  3535  00100C  3241               	rrcf	___aldiv@divisor+1,f,c
  3536  00100E  3240               	rrcf	___aldiv@divisor,f,c
  3537  001010  2E44               	decfsz	___aldiv@counter,f,c
  3538  001012  D7E1               	goto	u1460
  3539  001014                     l2835:
  3540  001014  5045               	movf	___aldiv@sign,w,c
  3541  001016  B4D8               	btfsc	status,2,c
  3542  001018  D008               	goto	l2839
  3543  00101A  1E49               	comf	___aldiv@quotient+3,f,c
  3544  00101C  1E48               	comf	___aldiv@quotient+2,f,c
  3545  00101E  1E47               	comf	___aldiv@quotient+1,f,c
  3546  001020  6C46               	negf	___aldiv@quotient,c
  3547  001022  0E00               	movlw	0
  3548  001024  2247               	addwfc	___aldiv@quotient+1,f,c
  3549  001026  2248               	addwfc	___aldiv@quotient+2,f,c
  3550  001028  2249               	addwfc	___aldiv@quotient+3,f,c
  3551  00102A                     l2839:
  3552  00102A  C046  F03C         	movff	___aldiv@quotient,?___aldiv
  3553  00102E  C047  F03D         	movff	___aldiv@quotient+1,?___aldiv+1
  3554  001032  C048  F03E         	movff	___aldiv@quotient+2,?___aldiv+2
  3555  001036  C049  F03F         	movff	___aldiv@quotient+3,?___aldiv+3
  3556  00103A  0012               	return		;funcret
  3557  00103C                     __end_of___aldiv:
  3558                           	opt callstack 0
  3559                           
  3560 ;; *************** function _MotorPosition_Init *****************
  3561 ;; Defined at:
  3562 ;;		line 801 in file "main.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;Total ram usage:        2 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    4
  3583 ;; This function calls:
  3584 ;;		_MotorBREAK
  3585 ;;		_MotorON_PWM
  3586 ;;		_Read_IR
  3587 ;;		_WriteSTLED316SErr
  3588 ;;		_delay_1ms
  3589 ;; This function is called by:
  3590 ;;		_main
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text18
  3595  000DB0                     __ptext18:
  3596                           	opt callstack 0
  3597  000DB0                     _MotorPosition_Init:
  3598                           	opt callstack 26
  3599                           
  3600                           ;main.c: 803:     LATAbits.LATA2 = 1;
  3601                           
  3602                           ;incstack = 0
  3603  000DB0  8489               	bsf	3977,2,c	;volatile
  3604                           
  3605                           ;main.c: 804:     MotorON_PWM();
  3606  000DB2  ECBC  F00B         	call	_MotorON_PWM	;wreg free
  3607                           
  3608                           ;main.c: 805:     _delay((unsigned long)((350)*(8000000/4000.0)));
  3609  000DB6  0E04               	movlw	4
  3610  000DB8  6E46               	movwf	(??_MotorPosition_Init+1)& (0+255),c
  3611  000DBA  0E8E               	movlw	142
  3612  000DBC  6E45               	movwf	??_MotorPosition_Init& (0+255),c
  3613  000DBE  0E12               	movlw	18
  3614  000DC0                     u2697:
  3615  000DC0  2EE8               	decfsz	wreg,f,c
  3616  000DC2  D7FE               	bra	u2697
  3617  000DC4  2E45               	decfsz	??_MotorPosition_Init& (0+255),f,c
  3618  000DC6  D7FC               	bra	u2697
  3619  000DC8  2E46               	decfsz	(??_MotorPosition_Init+1)& (0+255),f,c
  3620  000DCA  D7FA               	bra	u2697
  3621  000DCC  D000               	nop2	
  3622                           
  3623                           ;main.c: 806:     errorcounter = 30;
  3624  000DCE  0E1E               	movlw	30
  3625  000DD0  6E52               	movwf	_errorcounter,c	;volatile
  3626  000DD2  0E00               	movlw	0
  3627  000DD4  6E53               	movwf	_errorcounter+1,c	;volatile
  3628  000DD6  0E00               	movlw	0
  3629  000DD8  6E54               	movwf	_errorcounter+2,c	;volatile
  3630  000DDA  0E00               	movlw	0
  3631  000DDC  6E55               	movwf	_errorcounter+3,c	;volatile
  3632  000DDE                     l3187:
  3633                           
  3634                           ;main.c: 809:     {;main.c: 810:       IR_SENSORF = Read_IR();
  3635  000DDE  EC73  F00B         	call	_Read_IR	;wreg free
  3636  000DE2  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  3637  000DE6  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  3638                           
  3639                           ;main.c: 811:       if(errorcounter == 0)
  3640  000DEA  5052               	movf	_errorcounter,w,c	;volatile
  3641  000DEC  1053               	iorwf	_errorcounter+1,w,c	;volatile
  3642  000DEE  1054               	iorwf	_errorcounter+2,w,c	;volatile
  3643  000DF0  1055               	iorwf	_errorcounter+3,w,c	;volatile
  3644  000DF2  A4D8               	btfss	status,2,c
  3645  000DF4  D005               	goto	l3195
  3646                           
  3647                           ;main.c: 812:       {;main.c: 813:           WriteSTLED316SErr('1');
  3648  000DF6  0E31               	movlw	49
  3649  000DF8  EC1E  F008         	call	_WriteSTLED316SErr
  3650                           
  3651                           ;main.c: 814:           MotorBREAK();
  3652  000DFC  ECC1  F00B         	call	_MotorBREAK	;wreg free
  3653  000E00                     l3195:
  3654                           
  3655                           ;main.c: 817:     }while(IR_SENSORF != 0);
  3656  000E00  5011               	movf	_IR_SENSORF,w,c
  3657  000E02  1012               	iorwf	_IR_SENSORF+1,w,c
  3658  000E04  A4D8               	btfss	status,2,c
  3659  000E06  D7EB               	goto	l3187
  3660                           
  3661                           ;main.c: 819:      _delay((unsigned long)((100)*(8000000/4000.0)));
  3662  000E08  0E02               	movlw	2
  3663  000E0A  6E46               	movwf	(??_MotorPosition_Init+1)& (0+255),c
  3664  000E0C  0E04               	movlw	4
  3665  000E0E  6E45               	movwf	??_MotorPosition_Init& (0+255),c
  3666  000E10  0EBA               	movlw	186
  3667  000E12                     u2707:
  3668  000E12  2EE8               	decfsz	wreg,f,c
  3669  000E14  D7FE               	bra	u2707
  3670  000E16  2E45               	decfsz	??_MotorPosition_Init& (0+255),f,c
  3671  000E18  D7FC               	bra	u2707
  3672  000E1A  2E46               	decfsz	(??_MotorPosition_Init+1)& (0+255),f,c
  3673  000E1C  D7FA               	bra	u2707
  3674  000E1E  D000               	nop2	
  3675                           
  3676                           ;main.c: 820:     errorcounter = 30;
  3677  000E20  0E1E               	movlw	30
  3678  000E22  6E52               	movwf	_errorcounter,c	;volatile
  3679  000E24  0E00               	movlw	0
  3680  000E26  6E53               	movwf	_errorcounter+1,c	;volatile
  3681  000E28  0E00               	movlw	0
  3682  000E2A  6E54               	movwf	_errorcounter+2,c	;volatile
  3683  000E2C  0E00               	movlw	0
  3684  000E2E  6E55               	movwf	_errorcounter+3,c	;volatile
  3685  000E30                     l3201:
  3686                           
  3687                           ;main.c: 822:     {;main.c: 823:        IR_SENSORF = Read_IR();
  3688  000E30  EC73  F00B         	call	_Read_IR	;wreg free
  3689  000E34  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  3690  000E38  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  3691                           
  3692                           ;main.c: 824:        if(errorcounter == 0)
  3693  000E3C  5052               	movf	_errorcounter,w,c	;volatile
  3694  000E3E  1053               	iorwf	_errorcounter+1,w,c	;volatile
  3695  000E40  1054               	iorwf	_errorcounter+2,w,c	;volatile
  3696  000E42  1055               	iorwf	_errorcounter+3,w,c	;volatile
  3697  000E44  A4D8               	btfss	status,2,c
  3698  000E46  D005               	goto	l3209
  3699                           
  3700                           ;main.c: 825:        {;main.c: 826:             WriteSTLED316SErr('2');
  3701  000E48  0E32               	movlw	50
  3702  000E4A  EC1E  F008         	call	_WriteSTLED316SErr
  3703                           
  3704                           ;main.c: 827:            MotorBREAK();
  3705  000E4E  ECC1  F00B         	call	_MotorBREAK	;wreg free
  3706  000E52                     l3209:
  3707                           
  3708                           ;main.c: 830:     }while(IR_SENSORF != 1);
  3709  000E52  0411               	decf	_IR_SENSORF,w,c
  3710  000E54  1012               	iorwf	_IR_SENSORF+1,w,c
  3711  000E56  A4D8               	btfss	status,2,c
  3712  000E58  D7EB               	goto	l3201
  3713                           
  3714                           ;main.c: 832:     errorcounter = 30;
  3715  000E5A  0E1E               	movlw	30
  3716  000E5C  6E52               	movwf	_errorcounter,c	;volatile
  3717  000E5E  0E00               	movlw	0
  3718  000E60  6E53               	movwf	_errorcounter+1,c	;volatile
  3719  000E62  0E00               	movlw	0
  3720  000E64  6E54               	movwf	_errorcounter+2,c	;volatile
  3721  000E66  0E00               	movlw	0
  3722  000E68  6E55               	movwf	_errorcounter+3,c	;volatile
  3723                           
  3724                           ;main.c: 834:     delay_1ms(Motor_Stop_Delay_Time);
  3725  000E6A  C01D  F03C         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  3726  000E6E  C01E  F03D         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  3727  000E72  EC4A  F00B         	call	_delay_1ms	;wreg free
  3728                           
  3729                           ;main.c: 835:     MotorBREAK();
  3730  000E76  ECC1  F00B         	call	_MotorBREAK	;wreg free
  3731                           
  3732                           ;main.c: 836:     _delay((unsigned long)((500)*(8000000/4000.0)));
  3733  000E7A  0E06               	movlw	6
  3734  000E7C  6E46               	movwf	(??_MotorPosition_Init+1)& (0+255),c
  3735  000E7E  0E13               	movlw	19
  3736  000E80  6E45               	movwf	??_MotorPosition_Init& (0+255),c
  3737  000E82  0EAE               	movlw	174
  3738  000E84                     u2717:
  3739  000E84  2EE8               	decfsz	wreg,f,c
  3740  000E86  D7FE               	bra	u2717
  3741  000E88  2E45               	decfsz	??_MotorPosition_Init& (0+255),f,c
  3742  000E8A  D7FC               	bra	u2717
  3743  000E8C  2E46               	decfsz	(??_MotorPosition_Init+1)& (0+255),f,c
  3744  000E8E  D7FA               	bra	u2717
  3745                           
  3746                           ;main.c: 837:     IR_SENSORF=0;
  3747  000E90  0E00               	movlw	0
  3748  000E92  6E12               	movwf	_IR_SENSORF+1,c
  3749  000E94  0E00               	movlw	0
  3750  000E96  6E11               	movwf	_IR_SENSORF,c
  3751                           
  3752                           ;main.c: 839:     LATAbits.LATA2 = 0;
  3753  000E98  9489               	bcf	3977,2,c	;volatile
  3754  000E9A  0012               	return		;funcret
  3755  000E9C                     __end_of_MotorPosition_Init:
  3756                           	opt callstack 0
  3757                           
  3758 ;; *************** function _InitTimer1 *****************
  3759 ;; Defined at:
  3760 ;;		line 1126 in file "main.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:        0 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text19
  3789  0016CE                     __ptext19:
  3790                           	opt callstack 0
  3791  0016CE                     _InitTimer1:
  3792                           	opt callstack 28
  3793                           
  3794                           ;main.c: 1128:  T1CON = 0b00110001;
  3795                           
  3796                           ;incstack = 0
  3797  0016CE  0E31               	movlw	49
  3798  0016D0  6ECD               	movwf	4045,c	;volatile
  3799                           
  3800                           ;main.c: 1131:     TMR1 = 0x9E57;
  3801  0016D2  0E9E               	movlw	158
  3802  0016D4  6ECF               	movwf	4047,c	;volatile
  3803  0016D6  0E57               	movlw	87
  3804  0016D8  6ECE               	movwf	4046,c	;volatile
  3805                           
  3806                           ;main.c: 1132:  TMR1IF = 0;
  3807  0016DA  909E               	bcf	3998,0,c	;volatile
  3808                           
  3809                           ;main.c: 1133:  TMR1IE = 1;
  3810  0016DC  809D               	bsf	3997,0,c	;volatile
  3811                           
  3812                           ;main.c: 1134:     IPR1bits.TMR1IP=1;
  3813  0016DE  809F               	bsf	3999,0,c	;volatile
  3814                           
  3815                           ;main.c: 1136:     TMR1IF_triggered = 0;
  3816  0016E0  0E00               	movlw	0
  3817  0016E2  6E29               	movwf	_TMR1IF_triggered,c	;volatile
  3818  0016E4  0012               	return		;funcret
  3819  0016E6                     __end_of_InitTimer1:
  3820                           	opt callstack 0
  3821                           
  3822 ;; *************** function _InitSTLED316 *****************
  3823 ;; Defined at:
  3824 ;;		line 14 in file "Display.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  Brightness      1    wreg     unsigned char 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  Brightness      1   14[COMRAM] unsigned char 
  3829 ;;  i               2    0        int 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;Total ram usage:        3 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    3
  3846 ;; This function calls:
  3847 ;;		_STLED316s_SPI_SendData
  3848 ;; This function is called by:
  3849 ;;		_main
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text20
  3854  00118E                     __ptext20:
  3855                           	opt callstack 0
  3856  00118E                     _InitSTLED316:
  3857                           	opt callstack 27
  3858                           
  3859                           ;incstack = 0
  3860                           ;InitSTLED316@Brightness stored from wreg
  3861  00118E  6E44               	movwf	InitSTLED316@Brightness,c
  3862                           
  3863                           ;Display.c: 14: void InitSTLED316( unsigned char Brightness );Display.c: 15: {;Display.c
      +                          : 16:  int i;;Display.c: 18:  LATCbits.LATC4 = 1;
  3864  001190  888B               	bsf	3979,4,c	;volatile
  3865                           
  3866                           ;Display.c: 20:  LATCbits.LATC4 = 0;
  3867  001192  988B               	bcf	3979,4,c	;volatile
  3868                           
  3869                           ;Display.c: 22:  STLED316s_SPI_SendData ( 0x00 + (0x02 << 3) + 0x20 + 0x00 );
  3870  001194  0E30               	movlw	48
  3871  001196  ECFC  F009         	call	_STLED316s_SPI_SendData
  3872                           
  3873                           ;Display.c: 25:  LATCbits.LATC4 = 1;
  3874  00119A  888B               	bsf	3979,4,c	;volatile
  3875                           
  3876                           ;Display.c: 27:  LATCbits.LATC4 = 0;
  3877  00119C  988B               	bcf	3979,4,c	;volatile
  3878                           
  3879                           ;Display.c: 30:  STLED316s_SPI_SendData ( 0x00 + (0x02 << 3) + 0x20 + 0x00 );
  3880  00119E  0E30               	movlw	48
  3881  0011A0  ECFC  F009         	call	_STLED316s_SPI_SendData
  3882                           
  3883                           ;Display.c: 32:  STLED316s_SPI_SendData ( ( ( Brightness>>4 )<<5 ) | 0x00 | 0x5 );
  3884  0011A4  C044  F042         	movff	InitSTLED316@Brightness,??_InitSTLED316
  3885  0011A8  3A42               	swapf	??_InitSTLED316,f,c
  3886  0011AA  0E0F               	movlw	15
  3887  0011AC  1642               	andwf	??_InitSTLED316,f,c
  3888  0011AE  0E05               	movlw	5
  3889  0011B0  6E43               	movwf	(??_InitSTLED316+1)& (0+255),c
  3890  0011B2                     u1675:
  3891  0011B2  90D8               	bcf	status,0,c
  3892  0011B4  3642               	rlcf	??_InitSTLED316,f,c
  3893  0011B6  2E43               	decfsz	(??_InitSTLED316+1)& (0+255),f,c
  3894  0011B8  D7FC               	goto	u1675
  3895  0011BA  5042               	movf	??_InitSTLED316,w,c
  3896  0011BC  0905               	iorlw	5
  3897  0011BE  ECFC  F009         	call	_STLED316s_SPI_SendData
  3898                           
  3899                           ;Display.c: 34:  LATCbits.LATC4 = 1;
  3900  0011C2  888B               	bsf	3979,4,c	;volatile
  3901                           
  3902                           ;Display.c: 36:  LATCbits.LATC4 = 0;
  3903  0011C4  988B               	bcf	3979,4,c	;volatile
  3904                           
  3905                           ;Display.c: 39:  STLED316s_SPI_SendData ( (0x02 << 3) + 0x01 + 0x00 + 0x00 );
  3906  0011C6  0E11               	movlw	17
  3907  0011C8  ECFC  F009         	call	_STLED316s_SPI_SendData
  3908                           
  3909                           ;Display.c: 45:  LATCbits.LATC4 = 1;
  3910  0011CC  888B               	bsf	3979,4,c	;volatile
  3911                           
  3912                           ;Display.c: 47:  LATCbits.LATC4 = 0;
  3913  0011CE  988B               	bcf	3979,4,c	;volatile
  3914                           
  3915                           ;Display.c: 50:     STLED316s_SPI_SendData ( (0x02 << 3) + 0x01 + 0x00 + 0x00 );
  3916  0011D0  0E11               	movlw	17
  3917  0011D2  ECFC  F009         	call	_STLED316s_SPI_SendData
  3918                           
  3919                           ;Display.c: 52:  STLED316s_SPI_SendData ( Brightness );
  3920  0011D6  5044               	movf	InitSTLED316@Brightness,w,c
  3921  0011D8  ECFC  F009         	call	_STLED316s_SPI_SendData
  3922                           
  3923                           ;Display.c: 53:  STLED316s_SPI_SendData ( Brightness );
  3924  0011DC  5044               	movf	InitSTLED316@Brightness,w,c
  3925  0011DE  ECFC  F009         	call	_STLED316s_SPI_SendData
  3926                           
  3927                           ;Display.c: 54:  STLED316s_SPI_SendData ( Brightness );
  3928  0011E2  5044               	movf	InitSTLED316@Brightness,w,c
  3929  0011E4  ECFC  F009         	call	_STLED316s_SPI_SendData
  3930                           
  3931                           ;Display.c: 58:  LATCbits.LATC4 = 1;
  3932  0011E8  888B               	bsf	3979,4,c	;volatile
  3933                           
  3934                           ;Display.c: 60:  LATCbits.LATC4 = 0;
  3935  0011EA  988B               	bcf	3979,4,c	;volatile
  3936                           
  3937                           ;Display.c: 63:  STLED316s_SPI_SendData ( (0x03 << 3) + 0x00 + 0x00 + 0x00 );
  3938  0011EC  0E18               	movlw	24
  3939  0011EE  ECFC  F009         	call	_STLED316s_SPI_SendData
  3940                           
  3941                           ;Display.c: 66:  LATCbits.LATC4 = 1;
  3942  0011F2  888B               	bsf	3979,4,c	;volatile
  3943                           
  3944                           ;Display.c: 68:  LATCbits.LATC4 = 0;
  3945  0011F4  988B               	bcf	3979,4,c	;volatile
  3946                           
  3947                           ;Display.c: 70:     STLED316s_SPI_SendData ( (0x03 << 3) + 0x00 + 0x00 + 0x00 );
  3948  0011F6  0E18               	movlw	24
  3949  0011F8  ECFC  F009         	call	_STLED316s_SPI_SendData
  3950                           
  3951                           ;Display.c: 72:  STLED316s_SPI_SendData ( Brightness );
  3952  0011FC  5044               	movf	InitSTLED316@Brightness,w,c
  3953  0011FE  ECFC  F009         	call	_STLED316s_SPI_SendData
  3954                           
  3955                           ;Display.c: 73:  STLED316s_SPI_SendData ( Brightness );
  3956  001202  5044               	movf	InitSTLED316@Brightness,w,c
  3957  001204  ECFC  F009         	call	_STLED316s_SPI_SendData
  3958                           
  3959                           ;Display.c: 74:  STLED316s_SPI_SendData ( Brightness );
  3960  001208  5044               	movf	InitSTLED316@Brightness,w,c
  3961  00120A  ECFC  F009         	call	_STLED316s_SPI_SendData
  3962                           
  3963                           ;Display.c: 75:  STLED316s_SPI_SendData ( Brightness );
  3964  00120E  5044               	movf	InitSTLED316@Brightness,w,c
  3965  001210  ECFC  F009         	call	_STLED316s_SPI_SendData
  3966                           
  3967                           ;Display.c: 79:  LATCbits.LATC4 = 1;
  3968  001214  888B               	bsf	3979,4,c	;volatile
  3969  001216  0012               	return		;funcret
  3970  001218                     __end_of_InitSTLED316:
  3971                           	opt callstack 0
  3972                           
  3973 ;; *************** function _Homing_Again_Manual *****************
  3974 ;; Defined at:
  3975 ;;		line 868 in file "main.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        2 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    4
  3996 ;; This function calls:
  3997 ;;		_MotorBREAK
  3998 ;;		_MotorON_PWM
  3999 ;;		_Read_IR
  4000 ;;		_WriteSTLED316SData
  4001 ;;		_WriteSTLED316SErr
  4002 ;;		_delay_1ms
  4003 ;;		_readWeighingData
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text21
  4010  000A1C                     __ptext21:
  4011                           	opt callstack 0
  4012  000A1C                     _Homing_Again_Manual:
  4013                           	opt callstack 26
  4014                           
  4015                           ;main.c: 871:     if (vibration_mode == 1)
  4016                           
  4017                           ;incstack = 0
  4018  000A1C  0430               	decf	_vibration_mode,w,c
  4019  000A1E  A4D8               	btfss	status,2,c
  4020  000A20  D007               	goto	l3261
  4021                           
  4022                           ;main.c: 872:     {;main.c: 873:         LATCbits.LATC1 = 1;
  4023  000A22  828B               	bsf	3979,1,c	;volatile
  4024                           
  4025                           ;main.c: 874:         delay_1ms(Vmotor_Time);
  4026  000A24  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  4027  000A28  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4028  000A2C  EC4A  F00B         	call	_delay_1ms	;wreg free
  4029  000A30                     l3261:
  4030                           
  4031                           ;main.c: 875:         LATCbits.LATC1 = 0;
  4032  000A30  928B               	bcf	3979,1,c	;volatile
  4033                           
  4034                           ;main.c: 876:         _delay((unsigned long)((300)*(8000000/4000.0)));
  4035  000A32  0E04               	movlw	4
  4036  000A34  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4037  000A36  0E0C               	movlw	12
  4038  000A38  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4039  000A3A  0E34               	movlw	52
  4040  000A3C                     u2727:
  4041  000A3C  2EE8               	decfsz	wreg,f,c
  4042  000A3E  D7FE               	bra	u2727
  4043  000A40  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4044  000A42  D7FC               	bra	u2727
  4045  000A44  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4046  000A46  D7FA               	bra	u2727
  4047                           
  4048                           ;main.c: 884:     LATAbits.LATA2 = 1;
  4049                           
  4050                           ;main.c: 879:     {;main.c: 880:         LATCbits.LATC1 = 0;
  4051                           
  4052                           ;main.c: 878:     else
  4053                           
  4054                           ;main.c: 877:     }
  4055  000A48  8489               	bsf	3977,2,c	;volatile
  4056                           
  4057                           ;main.c: 886:     while (NUM>0)
  4058  000A4A  D0B4               	goto	l3341
  4059  000A4C                     l318:
  4060  000A4C  0004               	clrwdt		;# 
  4061                           
  4062                           ;main.c: 889:         readWeighingData();
  4063  000A4E  EC25  F00A         	call	_readWeighingData	;wreg free
  4064                           
  4065                           ;main.c: 890:         delay_1ms(Motor_Pause_Time);
  4066  000A52  C019  F03C         	movff	_Motor_Pause_Time,delay_1ms@time
  4067  000A56  C01A  F03D         	movff	_Motor_Pause_Time+1,delay_1ms@time+1
  4068  000A5A  EC4A  F00B         	call	_delay_1ms	;wreg free
  4069                           
  4070                           ;main.c: 891:         MotorON_PWM();
  4071  000A5E  ECBC  F00B         	call	_MotorON_PWM	;wreg free
  4072                           
  4073                           ;main.c: 892:         _delay((unsigned long)((350)*(8000000/4000.0)));
  4074  000A62  0E04               	movlw	4
  4075  000A64  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4076  000A66  0E8E               	movlw	142
  4077  000A68  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4078  000A6A  0E12               	movlw	18
  4079  000A6C                     u2737:
  4080  000A6C  2EE8               	decfsz	wreg,f,c
  4081  000A6E  D7FE               	bra	u2737
  4082  000A70  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4083  000A72  D7FC               	bra	u2737
  4084  000A74  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4085  000A76  D7FA               	bra	u2737
  4086  000A78  D000               	nop2	
  4087                           
  4088                           ;main.c: 893:         errorcounter = 30;
  4089  000A7A  0E1E               	movlw	30
  4090  000A7C  6E52               	movwf	_errorcounter,c	;volatile
  4091  000A7E  0E00               	movlw	0
  4092  000A80  6E53               	movwf	_errorcounter+1,c	;volatile
  4093  000A82  0E00               	movlw	0
  4094  000A84  6E54               	movwf	_errorcounter+2,c	;volatile
  4095  000A86  0E00               	movlw	0
  4096  000A88  6E55               	movwf	_errorcounter+3,c	;volatile
  4097  000A8A                     l3279:
  4098                           
  4099                           ;main.c: 896:         {;main.c: 897:             IR_SENSORF = Read_IR();
  4100  000A8A  EC73  F00B         	call	_Read_IR	;wreg free
  4101  000A8E  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  4102  000A92  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  4103                           
  4104                           ;main.c: 898:             if(errorcounter == 0)
  4105  000A96  5052               	movf	_errorcounter,w,c	;volatile
  4106  000A98  1053               	iorwf	_errorcounter+1,w,c	;volatile
  4107  000A9A  1054               	iorwf	_errorcounter+2,w,c	;volatile
  4108  000A9C  1055               	iorwf	_errorcounter+3,w,c	;volatile
  4109  000A9E  A4D8               	btfss	status,2,c
  4110  000AA0  D005               	goto	l3287
  4111                           
  4112                           ;main.c: 899:             {;main.c: 900:                 WriteSTLED316SErr('1');
  4113  000AA2  0E31               	movlw	49
  4114  000AA4  EC1E  F008         	call	_WriteSTLED316SErr
  4115                           
  4116                           ;main.c: 901:                 MotorBREAK();
  4117  000AA8  ECC1  F00B         	call	_MotorBREAK	;wreg free
  4118  000AAC                     l3287:
  4119                           
  4120                           ;main.c: 904:         }while(IR_SENSORF != 0);
  4121  000AAC  5011               	movf	_IR_SENSORF,w,c
  4122  000AAE  1012               	iorwf	_IR_SENSORF+1,w,c
  4123  000AB0  A4D8               	btfss	status,2,c
  4124  000AB2  D7EB               	goto	l3279
  4125                           
  4126                           ;main.c: 906:          _delay((unsigned long)((100)*(8000000/4000.0)));
  4127  000AB4  0E02               	movlw	2
  4128  000AB6  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4129  000AB8  0E04               	movlw	4
  4130  000ABA  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4131  000ABC  0EBA               	movlw	186
  4132  000ABE                     u2747:
  4133  000ABE  2EE8               	decfsz	wreg,f,c
  4134  000AC0  D7FE               	bra	u2747
  4135  000AC2  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4136  000AC4  D7FC               	bra	u2747
  4137  000AC6  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4138  000AC8  D7FA               	bra	u2747
  4139  000ACA  D000               	nop2	
  4140                           
  4141                           ;main.c: 908:          errorcounter = 30;
  4142  000ACC  0E1E               	movlw	30
  4143  000ACE  6E52               	movwf	_errorcounter,c	;volatile
  4144  000AD0  0E00               	movlw	0
  4145  000AD2  6E53               	movwf	_errorcounter+1,c	;volatile
  4146  000AD4  0E00               	movlw	0
  4147  000AD6  6E54               	movwf	_errorcounter+2,c	;volatile
  4148  000AD8  0E00               	movlw	0
  4149  000ADA  6E55               	movwf	_errorcounter+3,c	;volatile
  4150  000ADC                     l3293:
  4151                           
  4152                           ;main.c: 911:         {;main.c: 912:             IR_SENSORF = Read_IR();
  4153  000ADC  EC73  F00B         	call	_Read_IR	;wreg free
  4154  000AE0  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  4155  000AE4  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  4156                           
  4157                           ;main.c: 913:             if(errorcounter == 0)
  4158  000AE8  5052               	movf	_errorcounter,w,c	;volatile
  4159  000AEA  1053               	iorwf	_errorcounter+1,w,c	;volatile
  4160  000AEC  1054               	iorwf	_errorcounter+2,w,c	;volatile
  4161  000AEE  1055               	iorwf	_errorcounter+3,w,c	;volatile
  4162  000AF0  A4D8               	btfss	status,2,c
  4163  000AF2  D005               	goto	l3301
  4164                           
  4165                           ;main.c: 914:             {;main.c: 915:                 WriteSTLED316SErr('2');
  4166  000AF4  0E32               	movlw	50
  4167  000AF6  EC1E  F008         	call	_WriteSTLED316SErr
  4168                           
  4169                           ;main.c: 916:                 MotorBREAK();
  4170  000AFA  ECC1  F00B         	call	_MotorBREAK	;wreg free
  4171  000AFE                     l3301:
  4172                           
  4173                           ;main.c: 918:         }
  4174  000AFE  0411               	decf	_IR_SENSORF,w,c
  4175  000B00  1012               	iorwf	_IR_SENSORF+1,w,c
  4176  000B02  A4D8               	btfss	status,2,c
  4177  000B04  D7EB               	goto	l3293
  4178                           
  4179                           ;main.c: 921:         errorcounter = 30;
  4180  000B06  0E1E               	movlw	30
  4181  000B08  6E52               	movwf	_errorcounter,c	;volatile
  4182  000B0A  0E00               	movlw	0
  4183  000B0C  6E53               	movwf	_errorcounter+1,c	;volatile
  4184  000B0E  0E00               	movlw	0
  4185  000B10  6E54               	movwf	_errorcounter+2,c	;volatile
  4186  000B12  0E00               	movlw	0
  4187  000B14  6E55               	movwf	_errorcounter+3,c	;volatile
  4188                           
  4189                           ;main.c: 922:         delay_1ms(Motor_Stop_Delay_Time);
  4190  000B16  C01D  F03C         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  4191  000B1A  C01E  F03D         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  4192  000B1E  EC4A  F00B         	call	_delay_1ms	;wreg free
  4193                           
  4194                           ;main.c: 923:         MotorBREAK();
  4195  000B22  ECC1  F00B         	call	_MotorBREAK	;wreg free
  4196                           
  4197                           ;main.c: 925:         NUM--;
  4198  000B26  0617               	decf	_NUM,f,c
  4199  000B28  A0D8               	btfss	status,0,c
  4200  000B2A  0618               	decf	_NUM+1,f,c
  4201                           
  4202                           ;main.c: 926:         WriteSTLED316SData(NUM, vibration_mode);
  4203  000B2C  C017  F044         	movff	_NUM,WriteSTLED316SData@number
  4204  000B30  C018  F045         	movff	_NUM+1,WriteSTLED316SData@number+1
  4205  000B34  C030  F046         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  4206  000B38  EC7E  F008         	call	_WriteSTLED316SData	;wreg free
  4207                           
  4208                           ;main.c: 928:         if (vibration_mode == 1 && NUM != 0)
  4209  000B3C  0430               	decf	_vibration_mode,w,c
  4210  000B3E  A4D8               	btfss	status,2,c
  4211  000B40  D018               	goto	l3325
  4212  000B42  5017               	movf	_NUM,w,c
  4213  000B44  1018               	iorwf	_NUM+1,w,c
  4214  000B46  B4D8               	btfsc	status,2,c
  4215  000B48  D014               	goto	l3325
  4216                           
  4217                           ;main.c: 929:         {;main.c: 930:             LATCbits.LATC1 = 1;
  4218  000B4A  828B               	bsf	3979,1,c	;volatile
  4219                           
  4220                           ;main.c: 931:             delay_1ms(Vmotor_Time);
  4221  000B4C  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  4222  000B50  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4223  000B54  EC4A  F00B         	call	_delay_1ms	;wreg free
  4224                           
  4225                           ;main.c: 933:             LATCbits.LATC1 = 0;
  4226  000B58  928B               	bcf	3979,1,c	;volatile
  4227                           
  4228                           ;main.c: 934:             _delay((unsigned long)((300)*(8000000/4000.0)));
  4229  000B5A  0E04               	movlw	4
  4230  000B5C  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4231  000B5E  0E0C               	movlw	12
  4232  000B60  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4233  000B62  0E34               	movlw	52
  4234  000B64                     u2757:
  4235  000B64  2EE8               	decfsz	wreg,f,c
  4236  000B66  D7FE               	bra	u2757
  4237  000B68  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4238  000B6A  D7FC               	bra	u2757
  4239  000B6C  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4240  000B6E  D7FA               	bra	u2757
  4241                           
  4242                           ;main.c: 935:         }
  4243  000B70  D01E               	goto	l3337
  4244  000B72                     l3325:
  4245  000B72  5030               	movf	_vibration_mode,w,c
  4246  000B74  A4D8               	btfss	status,2,c
  4247  000B76  D01B               	goto	l3337
  4248  000B78  5017               	movf	_NUM,w,c
  4249  000B7A  1018               	iorwf	_NUM+1,w,c
  4250  000B7C  B4D8               	btfsc	status,2,c
  4251  000B7E  D017               	goto	l3337
  4252                           
  4253                           ;main.c: 937:         {;main.c: 938:             LATCbits.LATC1 = 0;
  4254  000B80  928B               	bcf	3979,1,c	;volatile
  4255                           
  4256                           ;main.c: 939:             if (NUM != 0)
  4257  000B82  5017               	movf	_NUM,w,c
  4258  000B84  1018               	iorwf	_NUM+1,w,c
  4259  000B86  B4D8               	btfsc	status,2,c
  4260  000B88  D007               	goto	l3335
  4261                           
  4262                           ;main.c: 940:             {;main.c: 941:                 delay_1ms(Vmotor_Time);
  4263  000B8A  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  4264  000B8E  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4265  000B92  EC4A  F00B         	call	_delay_1ms	;wreg free
  4266                           
  4267                           ;main.c: 942:             }
  4268  000B96  D00B               	goto	l3337
  4269  000B98                     l3335:
  4270                           
  4271                           ;main.c: 944:             {;main.c: 945:                 _delay((unsigned long)((500)*(8
      +                          000000/4000.0)));
  4272  000B98  0E06               	movlw	6
  4273  000B9A  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4274  000B9C  0E13               	movlw	19
  4275  000B9E  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4276  000BA0  0EAE               	movlw	174
  4277  000BA2                     u2767:
  4278  000BA2  2EE8               	decfsz	wreg,f,c
  4279  000BA4  D7FE               	bra	u2767
  4280  000BA6  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4281  000BA8  D7FC               	bra	u2767
  4282  000BAA  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4283  000BAC  D7FA               	bra	u2767
  4284  000BAE                     l3337:
  4285                           
  4286                           ;main.c: 949:         if(Stop==1)
  4287  000BAE  0433               	decf	_Stop,w,c
  4288  000BB0  B4D8               	btfsc	status,2,c
  4289  000BB2  D004               	goto	u1850
  4290  000BB4                     l3341:
  4291                           
  4292                           ;main.c: 886:     while (NUM>0)
  4293  000BB4  5017               	movf	_NUM,w,c
  4294  000BB6  1018               	iorwf	_NUM+1,w,c
  4295  000BB8  A4D8               	btfss	status,2,c
  4296  000BBA  D748               	goto	l318
  4297  000BBC                     u1850:
  4298                           
  4299                           ;main.c: 954:     LATAbits.LATA2 = 0;
  4300  000BBC  9489               	bcf	3977,2,c	;volatile
  4301                           
  4302                           ;main.c: 956:     if (NUM == 0 || Stop==1)
  4303  000BBE  5017               	movf	_NUM,w,c
  4304  000BC0  1018               	iorwf	_NUM+1,w,c
  4305  000BC2  B4D8               	btfsc	status,2,c
  4306  000BC4  D003               	goto	u1870
  4307  000BC6  0433               	decf	_Stop,w,c
  4308  000BC8  A4D8               	btfss	status,2,c
  4309  000BCA  D016               	goto	l3357
  4310  000BCC                     u1870:
  4311                           
  4312                           ;main.c: 957:     {;main.c: 959:         if (vibration_mode == 1)
  4313  000BCC  0430               	decf	_vibration_mode,w,c
  4314  000BCE  A4D8               	btfss	status,2,c
  4315  000BD0  D013               	goto	l3357
  4316                           
  4317                           ;main.c: 960:         {;main.c: 961:             LATCbits.LATC1 = 1;
  4318  000BD2  828B               	bsf	3979,1,c	;volatile
  4319                           
  4320                           ;main.c: 962:             delay_1ms(Vmotor_Time);
  4321  000BD4  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  4322  000BD8  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4323  000BDC  EC4A  F00B         	call	_delay_1ms	;wreg free
  4324                           
  4325                           ;main.c: 964:             LATCbits.LATC1 = 0;
  4326  000BE0  928B               	bcf	3979,1,c	;volatile
  4327                           
  4328                           ;main.c: 965:             _delay((unsigned long)((300)*(8000000/4000.0)));
  4329  000BE2  0E04               	movlw	4
  4330  000BE4  6E4E               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  4331  000BE6  0E0C               	movlw	12
  4332  000BE8  6E4D               	movwf	??_Homing_Again_Manual& (0+255),c
  4333  000BEA  0E34               	movlw	52
  4334  000BEC                     u2777:
  4335  000BEC  2EE8               	decfsz	wreg,f,c
  4336  000BEE  D7FE               	bra	u2777
  4337  000BF0  2E4D               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  4338  000BF2  D7FC               	bra	u2777
  4339  000BF4  2E4E               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  4340  000BF6  D7FA               	bra	u2777
  4341  000BF8                     l3357:
  4342                           
  4343                           ;main.c: 970:     NUM = 0;
  4344  000BF8  0E00               	movlw	0
  4345  000BFA  6E18               	movwf	_NUM+1,c
  4346  000BFC  0E00               	movlw	0
  4347  000BFE  6E17               	movwf	_NUM,c
  4348                           
  4349                           ;main.c: 971:     OpMode = MANUAL_MODE;
  4350  000C00  0E00               	movlw	0
  4351  000C02  6E2E               	movwf	_OpMode,c	;volatile
  4352  000C04  0012               	return		;funcret
  4353  000C06                     __end_of_Homing_Again_Manual:
  4354                           	opt callstack 0
  4355                           
  4356 ;; *************** function _WriteSTLED316SData *****************
  4357 ;; Defined at:
  4358 ;;		line 150 in file "Display.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  number          2   14[COMRAM] int 
  4361 ;;  v_mode          1   16[COMRAM] unsigned char 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  NUM_DIG1        2   19[COMRAM] int 
  4364 ;;  NUM_DIG0        2   17[COMRAM] int 
  4365 ;;  data4           1   22[COMRAM] unsigned char 
  4366 ;;  data3           1   21[COMRAM] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4376 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;Total ram usage:        9 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    3
  4383 ;; This function calls:
  4384 ;;		_Get7Seg
  4385 ;;		_STLED316s_SPI_SendData
  4386 ;;		___awdiv
  4387 ;;		___awmod
  4388 ;; This function is called by:
  4389 ;;		_main
  4390 ;;		_Homing_Again_Manual
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           	psect	text22
  4395  0010FC                     __ptext22:
  4396                           	opt callstack 0
  4397  0010FC                     _WriteSTLED316SData:
  4398                           	opt callstack 27
  4399                           
  4400                           ;Display.c: 150: void WriteSTLED316SData( int number, char v_mode);Display.c: 151: {;Dis
      +                          play.c: 152:  unsigned char data3, data4;;Display.c: 153:  int NUM_DIG0, NUM_DIG1;;Displ
      +                          ay.c: 155:  NUM_DIG0=(int) number%10;
  4401                           
  4402                           ;incstack = 0
  4403  0010FC  C044  F03C         	movff	WriteSTLED316SData@number,___awmod@dividend
  4404  001100  C045  F03D         	movff	WriteSTLED316SData@number+1,___awmod@dividend+1
  4405  001104  0E00               	movlw	0
  4406  001106  6E3F               	movwf	___awmod@divisor+1,c
  4407  001108  0E0A               	movlw	10
  4408  00110A  6E3E               	movwf	___awmod@divisor,c
  4409  00110C  EC90  F009         	call	___awmod	;wreg free
  4410  001110  C03C  F047         	movff	?___awmod,WriteSTLED316SData@NUM_DIG0
  4411  001114  C03D  F048         	movff	?___awmod+1,WriteSTLED316SData@NUM_DIG0+1
  4412                           
  4413                           ;Display.c: 156:  NUM_DIG1=(int) number/10;
  4414  001118  C044  F03C         	movff	WriteSTLED316SData@number,___awdiv@dividend
  4415  00111C  C045  F03D         	movff	WriteSTLED316SData@number+1,___awdiv@dividend+1
  4416  001120  0E00               	movlw	0
  4417  001122  6E3F               	movwf	___awdiv@divisor+1,c
  4418  001124  0E0A               	movlw	10
  4419  001126  6E3E               	movwf	___awdiv@divisor,c
  4420  001128  EC0C  F009         	call	___awdiv	;wreg free
  4421  00112C  C03C  F049         	movff	?___awdiv,WriteSTLED316SData@NUM_DIG1
  4422  001130  C03D  F04A         	movff	?___awdiv+1,WriteSTLED316SData@NUM_DIG1+1
  4423                           
  4424                           ;Display.c: 158:  LATCbits.LATC4 = 0;
  4425  001134  988B               	bcf	3979,4,c	;volatile
  4426                           
  4427                           ;Display.c: 160:  STLED316s_SPI_SendData (0x00 );
  4428  001136  0E00               	movlw	0
  4429  001138  ECFC  F009         	call	_STLED316s_SPI_SendData
  4430                           
  4431                           ;Display.c: 162:  LATCbits.LATC4 = 1;
  4432  00113C  888B               	bsf	3979,4,c	;volatile
  4433                           
  4434                           ;Display.c: 164:  LATCbits.LATC4 = 0;
  4435  00113E  988B               	bcf	3979,4,c	;volatile
  4436                           
  4437                           ;Display.c: 166:  STLED316s_SPI_SendData (0x00);
  4438  001140  0E00               	movlw	0
  4439  001142  ECFC  F009         	call	_STLED316s_SPI_SendData
  4440                           
  4441                           ;Display.c: 168:  data4 = Get7Seg(NUM_DIG1);
  4442  001146  C049  F03C         	movff	WriteSTLED316SData@NUM_DIG1,Get7Seg@Digit
  4443  00114A  C04A  F03D         	movff	WriteSTLED316SData@NUM_DIG1+1,Get7Seg@Digit+1
  4444  00114E  EC4E  F009         	call	_Get7Seg	;wreg free
  4445  001152  6E4C               	movwf	WriteSTLED316SData@data4,c
  4446                           
  4447                           ;Display.c: 169:  data3 = Get7Seg(NUM_DIG0);
  4448  001154  C047  F03C         	movff	WriteSTLED316SData@NUM_DIG0,Get7Seg@Digit
  4449  001158  C048  F03D         	movff	WriteSTLED316SData@NUM_DIG0+1,Get7Seg@Digit+1
  4450  00115C  EC4E  F009         	call	_Get7Seg	;wreg free
  4451  001160  6E4B               	movwf	WriteSTLED316SData@data3,c
  4452                           
  4453                           ;Display.c: 171:  if (v_mode)
  4454  001162  5046               	movf	WriteSTLED316SData@v_mode,w,c
  4455  001164  B4D8               	btfsc	status,2,c
  4456  001166  D006               	goto	l2939
  4457                           
  4458                           ;Display.c: 172:  {;Display.c: 173:   if (v_mode == 0xFF)
  4459  001168  2846               	incf	WriteSTLED316SData@v_mode,w,c
  4460  00116A  A4D8               	btfss	status,2,c
  4461  00116C  D002               	goto	l2937
  4462                           
  4463                           ;Display.c: 174:    data4 |= 0x80;
  4464  00116E  8E4C               	bsf	WriteSTLED316SData@data4,7,c
  4465  001170  D001               	goto	l2939
  4466  001172                     l2937:
  4467                           
  4468                           ;Display.c: 176:    data3 |= 0x80;
  4469  001172  8E4B               	bsf	WriteSTLED316SData@data3,7,c
  4470  001174                     l2939:
  4471                           
  4472                           ;Display.c: 179:     STLED316s_SPI_SendData (data4);
  4473  001174  504C               	movf	WriteSTLED316SData@data4,w,c
  4474  001176  ECFC  F009         	call	_STLED316s_SPI_SendData
  4475                           
  4476                           ;Display.c: 180:     STLED316s_SPI_SendData (data3);
  4477  00117A  504B               	movf	WriteSTLED316SData@data3,w,c
  4478  00117C  ECFC  F009         	call	_STLED316s_SPI_SendData
  4479                           
  4480                           ;Display.c: 182:  LATCbits.LATC4 = 1;
  4481  001180  888B               	bsf	3979,4,c	;volatile
  4482                           
  4483                           ;Display.c: 184:  LATCbits.LATC4 = 0;
  4484  001182  988B               	bcf	3979,4,c	;volatile
  4485                           
  4486                           ;Display.c: 186:  STLED316s_SPI_SendData ( 0x0D );
  4487  001184  0E0D               	movlw	13
  4488  001186  ECFC  F009         	call	_STLED316s_SPI_SendData
  4489                           
  4490                           ;Display.c: 188:  LATCbits.LATC4 = 1;
  4491  00118A  888B               	bsf	3979,4,c	;volatile
  4492  00118C  0012               	return		;funcret
  4493  00118E                     __end_of_WriteSTLED316SData:
  4494                           	opt callstack 0
  4495                           
  4496 ;; *************** function ___awmod *****************
  4497 ;; Defined at:
  4498 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  dividend        2    6[COMRAM] int 
  4501 ;;  divisor         2    8[COMRAM] int 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  sign            1   11[COMRAM] unsigned char 
  4504 ;;  counter         1   10[COMRAM] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  2    6[COMRAM] int 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;Total ram usage:        6 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    2
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_WriteSTLED316SData
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text23
  4529  001320                     __ptext23:
  4530                           	opt callstack 0
  4531  001320                     ___awmod:
  4532                           	opt callstack 27
  4533                           
  4534                           ;incstack = 0
  4535  001320  0E00               	movlw	0
  4536  001322  6E41               	movwf	___awmod@sign,c
  4537  001324  AE3D               	btfss	___awmod@dividend+1,7,c
  4538  001326  D006               	goto	l2895
  4539  001328  6C3C               	negf	___awmod@dividend,c
  4540  00132A  1E3D               	comf	___awmod@dividend+1,f,c
  4541  00132C  B0D8               	btfsc	status,0,c
  4542  00132E  2A3D               	incf	___awmod@dividend+1,f,c
  4543  001330  0E01               	movlw	1
  4544  001332  6E41               	movwf	___awmod@sign,c
  4545  001334                     l2895:
  4546  001334  AE3F               	btfss	___awmod@divisor+1,7,c
  4547  001336  D004               	goto	l2899
  4548  001338  6C3E               	negf	___awmod@divisor,c
  4549  00133A  1E3F               	comf	___awmod@divisor+1,f,c
  4550  00133C  B0D8               	btfsc	status,0,c
  4551  00133E  2A3F               	incf	___awmod@divisor+1,f,c
  4552  001340                     l2899:
  4553  001340  503E               	movf	___awmod@divisor,w,c
  4554  001342  103F               	iorwf	___awmod@divisor+1,w,c
  4555  001344  B4D8               	btfsc	status,2,c
  4556  001346  D018               	goto	l2915
  4557  001348  0E01               	movlw	1
  4558  00134A  6E40               	movwf	___awmod@counter,c
  4559  00134C  D004               	goto	l2905
  4560  00134E                     l2903:
  4561  00134E  90D8               	bcf	status,0,c
  4562  001350  363E               	rlcf	___awmod@divisor,f,c
  4563  001352  363F               	rlcf	___awmod@divisor+1,f,c
  4564  001354  2A40               	incf	___awmod@counter,f,c
  4565  001356                     l2905:
  4566  001356  AE3F               	btfss	___awmod@divisor+1,7,c
  4567  001358  D7FA               	goto	l2903
  4568  00135A                     u1580:
  4569  00135A  503E               	movf	___awmod@divisor,w,c
  4570  00135C  5C3C               	subwf	___awmod@dividend,w,c
  4571  00135E  503F               	movf	___awmod@divisor+1,w,c
  4572  001360  583D               	subwfb	___awmod@dividend+1,w,c
  4573  001362  A0D8               	btfss	status,0,c
  4574  001364  D004               	goto	l2911
  4575  001366  503E               	movf	___awmod@divisor,w,c
  4576  001368  5E3C               	subwf	___awmod@dividend,f,c
  4577  00136A  503F               	movf	___awmod@divisor+1,w,c
  4578  00136C  5A3D               	subwfb	___awmod@dividend+1,f,c
  4579  00136E                     l2911:
  4580  00136E  90D8               	bcf	status,0,c
  4581  001370  323F               	rrcf	___awmod@divisor+1,f,c
  4582  001372  323E               	rrcf	___awmod@divisor,f,c
  4583  001374  2E40               	decfsz	___awmod@counter,f,c
  4584  001376  D7F1               	goto	u1580
  4585  001378                     l2915:
  4586  001378  5041               	movf	___awmod@sign,w,c
  4587  00137A  B4D8               	btfsc	status,2,c
  4588  00137C  D004               	goto	l2919
  4589  00137E  6C3C               	negf	___awmod@dividend,c
  4590  001380  1E3D               	comf	___awmod@dividend+1,f,c
  4591  001382  B0D8               	btfsc	status,0,c
  4592  001384  2A3D               	incf	___awmod@dividend+1,f,c
  4593  001386                     l2919:
  4594  001386  C03C  F03C         	movff	___awmod@dividend,?___awmod
  4595  00138A  C03D  F03D         	movff	___awmod@dividend+1,?___awmod+1
  4596  00138E  0012               	return		;funcret
  4597  001390                     __end_of___awmod:
  4598                           	opt callstack 0
  4599                           
  4600 ;; *************** function ___awdiv *****************
  4601 ;; Defined at:
  4602 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  dividend        2    6[COMRAM] int 
  4605 ;;  divisor         2    8[COMRAM] int 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  quotient        2   12[COMRAM] int 
  4608 ;;  sign            1   11[COMRAM] unsigned char 
  4609 ;;  counter         1   10[COMRAM] unsigned char 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  2    6[COMRAM] int 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;Total ram usage:        8 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    2
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		_WriteSTLED316SData
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           	psect	text24
  4634  001218                     __ptext24:
  4635                           	opt callstack 0
  4636  001218                     ___awdiv:
  4637                           	opt callstack 27
  4638                           
  4639                           ;incstack = 0
  4640  001218  0E00               	movlw	0
  4641  00121A  6E41               	movwf	___awdiv@sign,c
  4642  00121C  AE3F               	btfss	___awdiv@divisor+1,7,c
  4643  00121E  D006               	goto	l2851
  4644  001220  6C3E               	negf	___awdiv@divisor,c
  4645  001222  1E3F               	comf	___awdiv@divisor+1,f,c
  4646  001224  B0D8               	btfsc	status,0,c
  4647  001226  2A3F               	incf	___awdiv@divisor+1,f,c
  4648  001228  0E01               	movlw	1
  4649  00122A  6E41               	movwf	___awdiv@sign,c
  4650  00122C                     l2851:
  4651  00122C  AE3D               	btfss	___awdiv@dividend+1,7,c
  4652  00122E  D006               	goto	l2857
  4653  001230  6C3C               	negf	___awdiv@dividend,c
  4654  001232  1E3D               	comf	___awdiv@dividend+1,f,c
  4655  001234  B0D8               	btfsc	status,0,c
  4656  001236  2A3D               	incf	___awdiv@dividend+1,f,c
  4657  001238  0E01               	movlw	1
  4658  00123A  1A41               	xorwf	___awdiv@sign,f,c
  4659  00123C                     l2857:
  4660  00123C  0E00               	movlw	0
  4661  00123E  6E43               	movwf	___awdiv@quotient+1,c
  4662  001240  0E00               	movlw	0
  4663  001242  6E42               	movwf	___awdiv@quotient,c
  4664  001244  503E               	movf	___awdiv@divisor,w,c
  4665  001246  103F               	iorwf	___awdiv@divisor+1,w,c
  4666  001248  B4D8               	btfsc	status,2,c
  4667  00124A  D01C               	goto	l2879
  4668  00124C  0E01               	movlw	1
  4669  00124E  6E40               	movwf	___awdiv@counter,c
  4670  001250  D004               	goto	l2865
  4671  001252                     l2863:
  4672  001252  90D8               	bcf	status,0,c
  4673  001254  363E               	rlcf	___awdiv@divisor,f,c
  4674  001256  363F               	rlcf	___awdiv@divisor+1,f,c
  4675  001258  2A40               	incf	___awdiv@counter,f,c
  4676  00125A                     l2865:
  4677  00125A  AE3F               	btfss	___awdiv@divisor+1,7,c
  4678  00125C  D7FA               	goto	l2863
  4679  00125E                     u1520:
  4680  00125E  90D8               	bcf	status,0,c
  4681  001260  3642               	rlcf	___awdiv@quotient,f,c
  4682  001262  3643               	rlcf	___awdiv@quotient+1,f,c
  4683  001264  503E               	movf	___awdiv@divisor,w,c
  4684  001266  5C3C               	subwf	___awdiv@dividend,w,c
  4685  001268  503F               	movf	___awdiv@divisor+1,w,c
  4686  00126A  583D               	subwfb	___awdiv@dividend+1,w,c
  4687  00126C  A0D8               	btfss	status,0,c
  4688  00126E  D005               	goto	l2875
  4689  001270  503E               	movf	___awdiv@divisor,w,c
  4690  001272  5E3C               	subwf	___awdiv@dividend,f,c
  4691  001274  503F               	movf	___awdiv@divisor+1,w,c
  4692  001276  5A3D               	subwfb	___awdiv@dividend+1,f,c
  4693  001278  8042               	bsf	___awdiv@quotient,0,c
  4694  00127A                     l2875:
  4695  00127A  90D8               	bcf	status,0,c
  4696  00127C  323F               	rrcf	___awdiv@divisor+1,f,c
  4697  00127E  323E               	rrcf	___awdiv@divisor,f,c
  4698  001280  2E40               	decfsz	___awdiv@counter,f,c
  4699  001282  D7ED               	goto	u1520
  4700  001284                     l2879:
  4701  001284  5041               	movf	___awdiv@sign,w,c
  4702  001286  B4D8               	btfsc	status,2,c
  4703  001288  D004               	goto	l2883
  4704  00128A  6C42               	negf	___awdiv@quotient,c
  4705  00128C  1E43               	comf	___awdiv@quotient+1,f,c
  4706  00128E  B0D8               	btfsc	status,0,c
  4707  001290  2A43               	incf	___awdiv@quotient+1,f,c
  4708  001292                     l2883:
  4709  001292  C042  F03C         	movff	___awdiv@quotient,?___awdiv
  4710  001296  C043  F03D         	movff	___awdiv@quotient+1,?___awdiv+1
  4711  00129A  0012               	return		;funcret
  4712  00129C                     __end_of___awdiv:
  4713                           	opt callstack 0
  4714                           
  4715 ;; *************** function _Get7Seg *****************
  4716 ;; Defined at:
  4717 ;;		line 107 in file "Display.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  Digit           2    6[COMRAM] int 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  Data            1   10[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      unsigned char 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;Total ram usage:        5 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    2
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_WriteSTLED316SData
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text25
  4746  00129C                     __ptext25:
  4747                           	opt callstack 0
  4748  00129C                     _Get7Seg:
  4749                           	opt callstack 27
  4750                           
  4751                           ;Display.c: 107: unsigned char Get7Seg (int Digit);Display.c: 108: {;Display.c: 109:  un
      +                          signed char Data;;Display.c: 111:  switch (Digit)
  4752                           
  4753                           ;incstack = 0
  4754  00129C  D017               	goto	l2759
  4755  00129E                     l2735:
  4756                           
  4757                           ;Display.c: 114:    Data = 0x3F;
  4758  00129E  0E3F               	movlw	63
  4759  0012A0  D013               	goto	L27
  4760  0012A2                     l2737:
  4761                           
  4762                           ;Display.c: 117:    Data = 0x06;
  4763  0012A2  0E06               	movlw	6
  4764  0012A4  D011               	goto	L27
  4765  0012A6                     l2739:
  4766                           
  4767                           ;Display.c: 120:    Data = 0x5B;
  4768  0012A6  0E5B               	movlw	91
  4769  0012A8  D00F               	goto	L27
  4770  0012AA                     l2741:
  4771                           
  4772                           ;Display.c: 123:    Data = 0x4F;
  4773  0012AA  0E4F               	movlw	79
  4774  0012AC  D00D               	goto	L27
  4775  0012AE                     l2743:
  4776                           
  4777                           ;Display.c: 126:    Data = 0x66;
  4778  0012AE  0E66               	movlw	102
  4779  0012B0  D00B               	goto	L27
  4780  0012B2                     l2745:
  4781                           
  4782                           ;Display.c: 129:    Data = 0x6D;
  4783  0012B2  0E6D               	movlw	109
  4784  0012B4  D009               	goto	L27
  4785  0012B6                     l2747:
  4786                           
  4787                           ;Display.c: 132:    Data = 0x7D;
  4788  0012B6  0E7D               	movlw	125
  4789  0012B8  D007               	goto	L27
  4790  0012BA                     l2749:
  4791                           
  4792                           ;Display.c: 135:    Data = 0x07;
  4793  0012BA  0E07               	movlw	7
  4794  0012BC  D005               	goto	L27
  4795  0012BE                     l2751:
  4796                           
  4797                           ;Display.c: 138:    Data = 0x7F;
  4798  0012BE  0E7F               	movlw	127
  4799  0012C0  D003               	goto	L27
  4800  0012C2                     l2753:
  4801                           
  4802                           ;Display.c: 141:    Data = 0x6F;
  4803  0012C2  0E6F               	movlw	111
  4804  0012C4  D001               	goto	L27
  4805  0012C6                     l2755:
  4806                           
  4807                           ;Display.c: 144:    Data = 0x00;
  4808  0012C6  0E00               	movlw	0
  4809  0012C8                     L27:
  4810  0012C8  6E40               	movwf	Get7Seg@Data,c
  4811                           
  4812                           ;Display.c: 145:    break;
  4813  0012CA  D028               	goto	l2761
  4814  0012CC                     l2759:
  4815  0012CC  C03C  F03E         	movff	Get7Seg@Digit,??_Get7Seg
  4816  0012D0  C03D  F03F         	movff	Get7Seg@Digit+1,??_Get7Seg+1
  4817                           
  4818                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4819                           ; Switch size 1, requested type "simple"
  4820                           ; Number of cases is 1, Range of values is 0 to 0
  4821                           ; switch strategies available:
  4822                           ; Name         Instructions Cycles
  4823                           ; simple_byte            4     3 (average)
  4824                           ;	Chosen strategy is simple_byte
  4825  0012D4  503F               	movf	??_Get7Seg+1,w,c
  4826  0012D6  0A00               	xorlw	0	; case 0
  4827  0012D8  A4D8               	btfss	status,2,c
  4828  0012DA  D7F5               	goto	l2755
  4829                           
  4830                           ; Switch size 1, requested type "simple"
  4831                           ; Number of cases is 10, Range of values is 0 to 9
  4832                           ; switch strategies available:
  4833                           ; Name         Instructions Cycles
  4834                           ; simple_byte           31    16 (average)
  4835                           ;	Chosen strategy is simple_byte
  4836  0012DC  503E               	movf	??_Get7Seg,w,c
  4837  0012DE  0A00               	xorlw	0	; case 0
  4838  0012E0  B4D8               	btfsc	status,2,c
  4839  0012E2  D7DD               	goto	l2735
  4840  0012E4  0A01               	xorlw	1	; case 1
  4841  0012E6  B4D8               	btfsc	status,2,c
  4842  0012E8  D7DC               	goto	l2737
  4843  0012EA  0A03               	xorlw	3	; case 2
  4844  0012EC  B4D8               	btfsc	status,2,c
  4845  0012EE  D7DB               	goto	l2739
  4846  0012F0  0A01               	xorlw	1	; case 3
  4847  0012F2  B4D8               	btfsc	status,2,c
  4848  0012F4  D7DA               	goto	l2741
  4849  0012F6  0A07               	xorlw	7	; case 4
  4850  0012F8  B4D8               	btfsc	status,2,c
  4851  0012FA  D7D9               	goto	l2743
  4852  0012FC  0A01               	xorlw	1	; case 5
  4853  0012FE  B4D8               	btfsc	status,2,c
  4854  001300  D7D8               	goto	l2745
  4855  001302  0A03               	xorlw	3	; case 6
  4856  001304  B4D8               	btfsc	status,2,c
  4857  001306  D7D7               	goto	l2747
  4858  001308  0A01               	xorlw	1	; case 7
  4859  00130A  B4D8               	btfsc	status,2,c
  4860  00130C  D7D6               	goto	l2749
  4861  00130E  0A0F               	xorlw	15	; case 8
  4862  001310  B4D8               	btfsc	status,2,c
  4863  001312  D7D5               	goto	l2751
  4864  001314  0A01               	xorlw	1	; case 9
  4865  001316  B4D8               	btfsc	status,2,c
  4866  001318  D7D4               	goto	l2753
  4867  00131A  D7D5               	goto	l2755
  4868  00131C                     l2761:
  4869                           
  4870                           ;Display.c: 147:  return (Data);
  4871  00131C  5040               	movf	Get7Seg@Data,w,c
  4872  00131E  0012               	return		;funcret
  4873  001320                     __end_of_Get7Seg:
  4874                           	opt callstack 0
  4875                           
  4876 ;; *************** function _Homing_Again_Auto *****************
  4877 ;; Defined at:
  4878 ;;		line 978 in file "main.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;		None
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;Total ram usage:        2 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    4
  4899 ;; This function calls:
  4900 ;;		_MotorBREAK
  4901 ;;		_MotorON_PWM
  4902 ;;		_Read_IR
  4903 ;;		_WriteSTLED316SErr
  4904 ;;		_WriteSTLED316SMode
  4905 ;;		_delay_1ms
  4906 ;;		_readWeighingData
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text26
  4913  000C06                     __ptext26:
  4914                           	opt callstack 0
  4915  000C06                     _Homing_Again_Auto:
  4916                           	opt callstack 26
  4917                           
  4918                           ;main.c: 981:     IR_SENSORF = 0;
  4919                           
  4920                           ;incstack = 0
  4921  000C06  0E00               	movlw	0
  4922  000C08  6E12               	movwf	_IR_SENSORF+1,c
  4923  000C0A  0E00               	movlw	0
  4924  000C0C  6E11               	movwf	_IR_SENSORF,c
  4925                           
  4926                           ;main.c: 982:     WriteSTLED316SMode('A');
  4927  000C0E  0E41               	movlw	65
  4928  000C10  EC4E  F007         	call	_WriteSTLED316SMode
  4929                           
  4930                           ;main.c: 984:     if (vibration_mode == 1)
  4931  000C14  0430               	decf	_vibration_mode,w,c
  4932  000C16  A4D8               	btfss	status,2,c
  4933  000C18  D007               	goto	l3371
  4934                           
  4935                           ;main.c: 985:     {;main.c: 986:         LATCbits.LATC1 = 1;
  4936  000C1A  828B               	bsf	3979,1,c	;volatile
  4937                           
  4938                           ;main.c: 987:         delay_1ms(Vmotor_Time);
  4939  000C1C  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  4940  000C20  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4941  000C24  EC4A  F00B         	call	_delay_1ms	;wreg free
  4942  000C28                     l3371:
  4943                           
  4944                           ;main.c: 988:         LATCbits.LATC1 = 0;
  4945  000C28  928B               	bcf	3979,1,c	;volatile
  4946                           
  4947                           ;main.c: 989:         _delay((unsigned long)((300)*(8000000/4000.0)));
  4948  000C2A  0E04               	movlw	4
  4949  000C2C  6E46               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4950  000C2E  0E0C               	movlw	12
  4951  000C30  6E45               	movwf	??_Homing_Again_Auto& (0+255),c
  4952  000C32  0E34               	movlw	52
  4953  000C34                     u2787:
  4954  000C34  2EE8               	decfsz	wreg,f,c
  4955  000C36  D7FE               	bra	u2787
  4956  000C38  2E45               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4957  000C3A  D7FC               	bra	u2787
  4958  000C3C  2E46               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4959  000C3E  D7FA               	bra	u2787
  4960                           
  4961                           ;main.c: 997:     LATAbits.LATA2 = 1;
  4962                           
  4963                           ;main.c: 992:     {;main.c: 993:         LATCbits.LATC1 = 0;
  4964                           
  4965                           ;main.c: 991:     else
  4966                           
  4967                           ;main.c: 990:     }
  4968  000C40  8489               	bsf	3977,2,c	;volatile
  4969                           
  4970                           ;main.c: 999:     while ( Stop==0)
  4971  000C42  D08E               	goto	l3433
  4972  000C44                     l342:
  4973  000C44  0004               	clrwdt		;# 
  4974                           
  4975                           ;main.c: 1002:         readWeighingData();
  4976  000C46  EC25  F00A         	call	_readWeighingData	;wreg free
  4977                           
  4978                           ;main.c: 1003:         delay_1ms(Motor_Pause_Time);
  4979  000C4A  C019  F03C         	movff	_Motor_Pause_Time,delay_1ms@time
  4980  000C4E  C01A  F03D         	movff	_Motor_Pause_Time+1,delay_1ms@time+1
  4981  000C52  EC4A  F00B         	call	_delay_1ms	;wreg free
  4982                           
  4983                           ;main.c: 1004:         MotorON_PWM();
  4984  000C56  ECBC  F00B         	call	_MotorON_PWM	;wreg free
  4985                           
  4986                           ;main.c: 1005:         _delay((unsigned long)((350)*(8000000/4000.0)));
  4987  000C5A  0E04               	movlw	4
  4988  000C5C  6E46               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4989  000C5E  0E8E               	movlw	142
  4990  000C60  6E45               	movwf	??_Homing_Again_Auto& (0+255),c
  4991  000C62  0E12               	movlw	18
  4992  000C64                     u2797:
  4993  000C64  2EE8               	decfsz	wreg,f,c
  4994  000C66  D7FE               	bra	u2797
  4995  000C68  2E45               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4996  000C6A  D7FC               	bra	u2797
  4997  000C6C  2E46               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4998  000C6E  D7FA               	bra	u2797
  4999  000C70  D000               	nop2	
  5000                           
  5001                           ;main.c: 1007:         errorcounter = 30;
  5002  000C72  0E1E               	movlw	30
  5003  000C74  6E52               	movwf	_errorcounter,c	;volatile
  5004  000C76  0E00               	movlw	0
  5005  000C78  6E53               	movwf	_errorcounter+1,c	;volatile
  5006  000C7A  0E00               	movlw	0
  5007  000C7C  6E54               	movwf	_errorcounter+2,c	;volatile
  5008  000C7E  0E00               	movlw	0
  5009  000C80  6E55               	movwf	_errorcounter+3,c	;volatile
  5010  000C82                     l3389:
  5011                           
  5012                           ;main.c: 1010:         {;main.c: 1011:           IR_SENSORF = Read_IR();
  5013  000C82  EC73  F00B         	call	_Read_IR	;wreg free
  5014  000C86  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  5015  000C8A  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  5016                           
  5017                           ;main.c: 1012:           if(errorcounter == 0)
  5018  000C8E  5052               	movf	_errorcounter,w,c	;volatile
  5019  000C90  1053               	iorwf	_errorcounter+1,w,c	;volatile
  5020  000C92  1054               	iorwf	_errorcounter+2,w,c	;volatile
  5021  000C94  1055               	iorwf	_errorcounter+3,w,c	;volatile
  5022  000C96  A4D8               	btfss	status,2,c
  5023  000C98  D005               	goto	l3397
  5024                           
  5025                           ;main.c: 1013:           {;main.c: 1014:               WriteSTLED316SErr('1');
  5026  000C9A  0E31               	movlw	49
  5027  000C9C  EC1E  F008         	call	_WriteSTLED316SErr
  5028                           
  5029                           ;main.c: 1015:               MotorBREAK();
  5030  000CA0  ECC1  F00B         	call	_MotorBREAK	;wreg free
  5031  000CA4                     l3397:
  5032                           
  5033                           ;main.c: 1017:         }while(IR_SENSORF != 0);
  5034  000CA4  5011               	movf	_IR_SENSORF,w,c
  5035  000CA6  1012               	iorwf	_IR_SENSORF+1,w,c
  5036  000CA8  A4D8               	btfss	status,2,c
  5037  000CAA  D7EB               	goto	l3389
  5038                           
  5039                           ;main.c: 1019:          _delay((unsigned long)((100)*(8000000/4000.0)));
  5040  000CAC  0E02               	movlw	2
  5041  000CAE  6E46               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  5042  000CB0  0E04               	movlw	4
  5043  000CB2  6E45               	movwf	??_Homing_Again_Auto& (0+255),c
  5044  000CB4  0EBA               	movlw	186
  5045  000CB6                     u2807:
  5046  000CB6  2EE8               	decfsz	wreg,f,c
  5047  000CB8  D7FE               	bra	u2807
  5048  000CBA  2E45               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  5049  000CBC  D7FC               	bra	u2807
  5050  000CBE  2E46               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  5051  000CC0  D7FA               	bra	u2807
  5052  000CC2  D000               	nop2	
  5053                           
  5054                           ;main.c: 1020:          errorcounter = 30;
  5055  000CC4  0E1E               	movlw	30
  5056  000CC6  6E52               	movwf	_errorcounter,c	;volatile
  5057  000CC8  0E00               	movlw	0
  5058  000CCA  6E53               	movwf	_errorcounter+1,c	;volatile
  5059  000CCC  0E00               	movlw	0
  5060  000CCE  6E54               	movwf	_errorcounter+2,c	;volatile
  5061  000CD0  0E00               	movlw	0
  5062  000CD2  6E55               	movwf	_errorcounter+3,c	;volatile
  5063  000CD4                     l3403:
  5064                           
  5065                           ;main.c: 1023:         {;main.c: 1024:           IR_SENSORF = Read_IR();
  5066  000CD4  EC73  F00B         	call	_Read_IR	;wreg free
  5067  000CD8  C03C  F011         	movff	?_Read_IR,_IR_SENSORF
  5068  000CDC  C03D  F012         	movff	?_Read_IR+1,_IR_SENSORF+1
  5069                           
  5070                           ;main.c: 1025:           if(errorcounter == 0)
  5071  000CE0  5052               	movf	_errorcounter,w,c	;volatile
  5072  000CE2  1053               	iorwf	_errorcounter+1,w,c	;volatile
  5073  000CE4  1054               	iorwf	_errorcounter+2,w,c	;volatile
  5074  000CE6  1055               	iorwf	_errorcounter+3,w,c	;volatile
  5075  000CE8  A4D8               	btfss	status,2,c
  5076  000CEA  D005               	goto	l3411
  5077                           
  5078                           ;main.c: 1026:           {;main.c: 1027:               WriteSTLED316SErr('2');
  5079  000CEC  0E32               	movlw	50
  5080  000CEE  EC1E  F008         	call	_WriteSTLED316SErr
  5081                           
  5082                           ;main.c: 1028:               MotorBREAK();
  5083  000CF2  ECC1  F00B         	call	_MotorBREAK	;wreg free
  5084  000CF6                     l3411:
  5085                           
  5086                           ;main.c: 1030:         }while(IR_SENSORF != 1);
  5087  000CF6  0411               	decf	_IR_SENSORF,w,c
  5088  000CF8  1012               	iorwf	_IR_SENSORF+1,w,c
  5089  000CFA  A4D8               	btfss	status,2,c
  5090  000CFC  D7EB               	goto	l3403
  5091                           
  5092                           ;main.c: 1032:         errorcounter = 30;
  5093  000CFE  0E1E               	movlw	30
  5094  000D00  6E52               	movwf	_errorcounter,c	;volatile
  5095  000D02  0E00               	movlw	0
  5096  000D04  6E53               	movwf	_errorcounter+1,c	;volatile
  5097  000D06  0E00               	movlw	0
  5098  000D08  6E54               	movwf	_errorcounter+2,c	;volatile
  5099  000D0A  0E00               	movlw	0
  5100  000D0C  6E55               	movwf	_errorcounter+3,c	;volatile
  5101                           
  5102                           ;main.c: 1034:         delay_1ms(Motor_Stop_Delay_Time);
  5103  000D0E  C01D  F03C         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  5104  000D12  C01E  F03D         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  5105  000D16  EC4A  F00B         	call	_delay_1ms	;wreg free
  5106                           
  5107                           ;main.c: 1035:         MotorBREAK();
  5108  000D1A  ECC1  F00B         	call	_MotorBREAK	;wreg free
  5109                           
  5110                           ;main.c: 1037:         if (vibration_mode == 1)
  5111  000D1E  0430               	decf	_vibration_mode,w,c
  5112  000D20  A4D8               	btfss	status,2,c
  5113  000D22  D014               	goto	l349
  5114                           
  5115                           ;main.c: 1038:         {;main.c: 1039:             LATCbits.LATC1 = 1;
  5116  000D24  828B               	bsf	3979,1,c	;volatile
  5117                           
  5118                           ;main.c: 1040:             delay_1ms(Vmotor_Time);
  5119  000D26  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  5120  000D2A  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  5121  000D2E  EC4A  F00B         	call	_delay_1ms	;wreg free
  5122                           
  5123                           ;main.c: 1042:             LATCbits.LATC1 = 0;
  5124  000D32  928B               	bcf	3979,1,c	;volatile
  5125                           
  5126                           ;main.c: 1043:             _delay((unsigned long)((300)*(8000000/4000.0)));
  5127  000D34  0E04               	movlw	4
  5128  000D36  6E46               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  5129  000D38  0E0C               	movlw	12
  5130  000D3A  6E45               	movwf	??_Homing_Again_Auto& (0+255),c
  5131  000D3C  0E34               	movlw	52
  5132  000D3E                     u2817:
  5133  000D3E  2EE8               	decfsz	wreg,f,c
  5134  000D40  D7FE               	bra	u2817
  5135  000D42  2E45               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  5136  000D44  D7FC               	bra	u2817
  5137  000D46  2E46               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  5138  000D48  D7FA               	bra	u2817
  5139                           
  5140                           ;main.c: 1044:         }
  5141  000D4A  D007               	goto	l3429
  5142  000D4C                     l349:
  5143                           
  5144                           ;main.c: 1046:         {;main.c: 1047:             LATCbits.LATC1 = 0;
  5145  000D4C  928B               	bcf	3979,1,c	;volatile
  5146                           
  5147                           ;main.c: 1048:              delay_1ms(Vmotor_Time);
  5148  000D4E  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  5149  000D52  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  5150  000D56  EC4A  F00B         	call	_delay_1ms	;wreg free
  5151  000D5A                     l3429:
  5152                           
  5153                           ;main.c: 1051:         if(Stop==1)
  5154  000D5A  0433               	decf	_Stop,w,c
  5155  000D5C  B4D8               	btfsc	status,2,c
  5156  000D5E  D003               	goto	u1960
  5157  000D60                     l3433:
  5158                           
  5159                           ;main.c: 999:     while ( Stop==0)
  5160  000D60  5033               	movf	_Stop,w,c
  5161  000D62  B4D8               	btfsc	status,2,c
  5162  000D64  D76F               	goto	l342
  5163  000D66                     u1960:
  5164                           
  5165                           ;main.c: 1056:     LATAbits.LATA2 = 0;
  5166  000D66  9489               	bcf	3977,2,c	;volatile
  5167                           
  5168                           ;main.c: 1058:     if (NUM == 0 || Stop==1)
  5169  000D68  5017               	movf	_NUM,w,c
  5170  000D6A  1018               	iorwf	_NUM+1,w,c
  5171  000D6C  B4D8               	btfsc	status,2,c
  5172  000D6E  D003               	goto	u1980
  5173  000D70  0433               	decf	_Stop,w,c
  5174  000D72  A4D8               	btfss	status,2,c
  5175  000D74  D016               	goto	l3449
  5176  000D76                     u1980:
  5177                           
  5178                           ;main.c: 1059:     {;main.c: 1061:         if (vibration_mode == 1)
  5179  000D76  0430               	decf	_vibration_mode,w,c
  5180  000D78  A4D8               	btfss	status,2,c
  5181  000D7A  D013               	goto	l3449
  5182                           
  5183                           ;main.c: 1062:         {;main.c: 1063:             LATCbits.LATC1 = 1;
  5184  000D7C  828B               	bsf	3979,1,c	;volatile
  5185                           
  5186                           ;main.c: 1064:             delay_1ms(Vmotor_Time);
  5187  000D7E  C056  F03C         	movff	_Vmotor_Time,delay_1ms@time
  5188  000D82  C057  F03D         	movff	_Vmotor_Time+1,delay_1ms@time+1
  5189  000D86  EC4A  F00B         	call	_delay_1ms	;wreg free
  5190                           
  5191                           ;main.c: 1066:             LATCbits.LATC1 = 0;
  5192  000D8A  928B               	bcf	3979,1,c	;volatile
  5193                           
  5194                           ;main.c: 1067:             _delay((unsigned long)((300)*(8000000/4000.0)));
  5195  000D8C  0E04               	movlw	4
  5196  000D8E  6E46               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  5197  000D90  0E0C               	movlw	12
  5198  000D92  6E45               	movwf	??_Homing_Again_Auto& (0+255),c
  5199  000D94  0E34               	movlw	52
  5200  000D96                     u2827:
  5201  000D96  2EE8               	decfsz	wreg,f,c
  5202  000D98  D7FE               	bra	u2827
  5203  000D9A  2E45               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  5204  000D9C  D7FC               	bra	u2827
  5205  000D9E  2E46               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  5206  000DA0  D7FA               	bra	u2827
  5207  000DA2                     l3449:
  5208                           
  5209                           ;main.c: 1072:     NUM = 0;
  5210  000DA2  0E00               	movlw	0
  5211  000DA4  6E18               	movwf	_NUM+1,c
  5212  000DA6  0E00               	movlw	0
  5213  000DA8  6E17               	movwf	_NUM,c
  5214                           
  5215                           ;main.c: 1073:     OpMode = AUTO_MODE;
  5216  000DAA  0E02               	movlw	2
  5217  000DAC  6E2E               	movwf	_OpMode,c	;volatile
  5218  000DAE  0012               	return		;funcret
  5219  000DB0                     __end_of_Homing_Again_Auto:
  5220                           	opt callstack 0
  5221                           
  5222 ;; *************** function _readWeighingData *****************
  5223 ;; Defined at:
  5224 ;;		line 1106 in file "main.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  i               2    8[COMRAM] int 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;Total ram usage:        2 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    3
  5245 ;; This function calls:
  5246 ;;		_Write1USART
  5247 ;;		_flushOut
  5248 ;; This function is called by:
  5249 ;;		_Homing_Again_Manual
  5250 ;;		_Homing_Again_Auto
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text27
  5255  00144A                     __ptext27:
  5256                           	opt callstack 0
  5257  00144A                     _readWeighingData:
  5258                           	opt callstack 26
  5259                           
  5260                           ;main.c: 1108:     int i;;main.c: 1110:     Serial_Buffer_Out[0] = 0xA5;
  5261                           
  5262                           ;incstack = 0
  5263  00144A  0EA5               	movlw	165
  5264  00144C  0100               	movlb	0	; () banked
  5265  00144E  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  5266                           
  5267                           ;main.c: 1111:     Serial_Buffer_Out[1] = 0x45;
  5268  001450  0E45               	movlw	69
  5269  001452  6F61               	movwf	(_Serial_Buffer_Out+1)& (0+255),b
  5270                           
  5271                           ;main.c: 1112:     Serial_Buffer_Out[2] = 0x00;
  5272  001454  0E00               	movlw	0
  5273  001456  6F62               	movwf	(_Serial_Buffer_Out+2)& (0+255),b
  5274                           
  5275                           ;main.c: 1113:     Serial_Buffer_Out[3] = 0x45;
  5276  001458  0E45               	movlw	69
  5277  00145A  6F63               	movwf	(_Serial_Buffer_Out+3)& (0+255),b
  5278                           
  5279                           ;main.c: 1114:     Serial_Buffer_Out[4] = 0x5A;
  5280  00145C  0E5A               	movlw	90
  5281  00145E  6F64               	movwf	(_Serial_Buffer_Out+4)& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;main.c: 1116:     INTCONbits.GIE=0;
  5285  001460  9EF2               	bcf	4082,7,c	;volatile
  5286                           
  5287                           ;main.c: 1117:     for (i=0; i<5;i++)
  5288  001462  0E00               	movlw	0
  5289  001464  6E3F               	movwf	readWeighingData@i+1,c
  5290  001466  0E00               	movlw	0
  5291  001468  6E3E               	movwf	readWeighingData@i,c
  5292  00146A                     l3023:
  5293                           
  5294                           ;main.c: 1118:     {;main.c: 1119:         Write1USART(Serial_Buffer_Out[i]);
  5295  00146A  0E60               	movlw	low _Serial_Buffer_Out
  5296  00146C  243E               	addwf	readWeighingData@i,w,c
  5297  00146E  6ED9               	movwf	fsr2l,c
  5298  001470  0E00               	movlw	high _Serial_Buffer_Out
  5299  001472  203F               	addwfc	readWeighingData@i+1,w,c
  5300  001474  6EDA               	movwf	fsr2h,c
  5301  001476  50DF               	movf	indf2,w,c
  5302  001478  ECAA  F00B         	call	_Write1USART
  5303                           
  5304                           ;main.c: 1120:     }
  5305  00147C  4A3E               	infsnz	readWeighingData@i,f,c
  5306  00147E  2A3F               	incf	readWeighingData@i+1,f,c
  5307  001480  BE3F               	btfsc	readWeighingData@i+1,7,c
  5308  001482  D7F3               	goto	l3023
  5309  001484  503F               	movf	readWeighingData@i+1,w,c
  5310  001486  E104               	bnz	u1650
  5311  001488  0E05               	movlw	5
  5312  00148A  5C3E               	subwf	readWeighingData@i,w,c
  5313  00148C  A0D8               	btfss	status,0,c
  5314  00148E  D7ED               	goto	l3023
  5315  001490                     u1650:
  5316                           
  5317                           ;main.c: 1121:     INTCONbits.GIE=1;
  5318  001490  8EF2               	bsf	4082,7,c	;volatile
  5319                           
  5320                           ;main.c: 1123:     flushOut();
  5321  001492  ECF3  F00A         	call	_flushOut	;wreg free
  5322  001496  0012               	return		;funcret
  5323  001498                     __end_of_readWeighingData:
  5324                           	opt callstack 0
  5325                           
  5326 ;; *************** function _flushOut *****************
  5327 ;; Defined at:
  5328 ;;		line 1093 in file "main.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;		None
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  i               2    6[COMRAM] int 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;Total ram usage:        2 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    2
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_main
  5353 ;;		_readWeighingData
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text28
  5358  0015E6                     __ptext28:
  5359                           	opt callstack 0
  5360  0015E6                     _flushOut:
  5361                           	opt callstack 28
  5362                           
  5363                           ;main.c: 1095:     int i;;main.c: 1097:     for(i=0; i<16; i++)
  5364                           
  5365                           ;incstack = 0
  5366  0015E6  0E00               	movlw	0
  5367  0015E8  6E3D               	movwf	flushOut@i+1,c
  5368  0015EA  0E00               	movlw	0
  5369  0015EC  6E3C               	movwf	flushOut@i,c
  5370  0015EE                     l2691:
  5371                           
  5372                           ;main.c: 1098:     {;main.c: 1099:         Serial_Buffer_Out[i]=0x00;
  5373  0015EE  0E60               	movlw	low _Serial_Buffer_Out
  5374  0015F0  243C               	addwf	flushOut@i,w,c
  5375  0015F2  6ED9               	movwf	fsr2l,c
  5376  0015F4  0E00               	movlw	high _Serial_Buffer_Out
  5377  0015F6  203D               	addwfc	flushOut@i+1,w,c
  5378  0015F8  6EDA               	movwf	fsr2h,c
  5379  0015FA  0E00               	movlw	0
  5380  0015FC  6EDF               	movwf	indf2,c
  5381                           
  5382                           ;main.c: 1100:     }
  5383  0015FE  4A3C               	infsnz	flushOut@i,f,c
  5384  001600  2A3D               	incf	flushOut@i+1,f,c
  5385  001602  BE3D               	btfsc	flushOut@i+1,7,c
  5386  001604  D7F4               	goto	l2691
  5387  001606  503D               	movf	flushOut@i+1,w,c
  5388  001608  E105               	bnz	u1370
  5389  00160A  0E10               	movlw	16
  5390  00160C  5C3C               	subwf	flushOut@i,w,c
  5391  00160E  B0D8               	btfsc	status,0,c
  5392  001610  0012               	return	
  5393  001612  D7ED               	goto	l2691
  5394  001614                     u1370:
  5395  001614  0012               	return		;funcret
  5396  001616                     __end_of_flushOut:
  5397                           	opt callstack 0
  5398                           
  5399 ;; *************** function _Write1USART *****************
  5400 ;; Defined at:
  5401 ;;		line 48 in file "usart.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  data            1    wreg     unsigned char 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  data            1    6[COMRAM] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;Total ram usage:        1 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    2
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_main
  5426 ;;		_readWeighingData
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text29
  5431  001754                     __ptext29:
  5432                           	opt callstack 0
  5433  001754                     _Write1USART:
  5434                           	opt callstack 28
  5435                           
  5436                           ;incstack = 0
  5437                           ;Write1USART@data stored from wreg
  5438  001754  6E3C               	movwf	Write1USART@data,c
  5439                           
  5440                           ;usart.c: 48: void Write1USART(char data);usart.c: 49: {;usart.c: 50:    TXREG1 = data;
  5441  001756  C03C  FFAE         	movff	Write1USART@data,4014	;volatile
  5442  00175A                     l535:
  5443  00175A  B2AD               	btfsc	4013,1,c	;volatile
  5444  00175C  0012               	return	
  5445  00175E  D7FD               	goto	l535
  5446  001760                     __end_of_Write1USART:
  5447                           	opt callstack 0
  5448                           
  5449 ;; *************** function _delay_1ms *****************
  5450 ;; Defined at:
  5451 ;;		line 772 in file "main.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  time            2    6[COMRAM] unsigned int 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;		None
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      void 
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;Total ram usage:        3 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    2
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_MotorPosition_Init
  5476 ;;		_Homing_Again_Manual
  5477 ;;		_Homing_Again_Auto
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text30
  5482  001694                     __ptext30:
  5483                           	opt callstack 0
  5484  001694                     _delay_1ms:
  5485                           	opt callstack 27
  5486                           
  5487                           ;main.c: 772: void delay_1ms(unsigned int time);main.c: 773:  {;main.c: 774:    while(ti
      +                          me > 0)
  5488                           
  5489                           ;incstack = 0
  5490  001694  D00A               	goto	l290
  5491  001696                     l2989:
  5492                           
  5493                           ;main.c: 775:    {;main.c: 776:        _delay((unsigned long)((1)*(8000000/4000.0)));
  5494  001696  0E03               	movlw	3
  5495  001698  6E3E               	movwf	??_delay_1ms& (0+255),c
  5496  00169A  0E98               	movlw	152
  5497  00169C                     u2837:
  5498  00169C  2EE8               	decfsz	wreg,f,c
  5499  00169E  D7FE               	bra	u2837
  5500  0016A0  2E3E               	decfsz	??_delay_1ms& (0+255),f,c
  5501  0016A2  D7FC               	bra	u2837
  5502                           
  5503                           ;main.c: 777:       time--;
  5504  0016A4  063C               	decf	delay_1ms@time,f,c
  5505  0016A6  A0D8               	btfss	status,0,c
  5506  0016A8  063D               	decf	delay_1ms@time+1,f,c
  5507  0016AA                     l290:
  5508                           
  5509                           ;main.c: 774:    while(time > 0)
  5510  0016AA  503C               	movf	delay_1ms@time,w,c
  5511  0016AC  103D               	iorwf	delay_1ms@time+1,w,c
  5512  0016AE  B4D8               	btfsc	status,2,c
  5513  0016B0  0012               	return	
  5514  0016B2  D7F1               	goto	l2989
  5515  0016B4                     __end_of_delay_1ms:
  5516                           	opt callstack 0
  5517                           
  5518 ;; *************** function _WriteSTLED316SMode *****************
  5519 ;; Defined at:
  5520 ;;		line 191 in file "Display.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;  msg             1    wreg     unsigned char 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  msg             1   14[COMRAM] unsigned char 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, status,2, status,0, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;Total ram usage:        3 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    3
  5541 ;; This function calls:
  5542 ;;		_STLED316s_SPI_SendData
  5543 ;; This function is called by:
  5544 ;;		_Homing_Again_Auto
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text31
  5549  000E9C                     __ptext31:
  5550                           	opt callstack 0
  5551  000E9C                     _WriteSTLED316SMode:
  5552                           	opt callstack 26
  5553                           
  5554                           ;incstack = 0
  5555                           ;WriteSTLED316SMode@msg stored from wreg
  5556  000E9C  6E44               	movwf	WriteSTLED316SMode@msg,c
  5557                           
  5558                           ;Display.c: 191: void WriteSTLED316SMode( char msg);Display.c: 192: {;Display.c: 193:  L
      +                          ATCbits.LATC4 = 0;
  5559  000E9E  988B               	bcf	3979,4,c	;volatile
  5560                           
  5561                           ;Display.c: 195:  STLED316s_SPI_SendData (0x00 );
  5562  000EA0  0E00               	movlw	0
  5563  000EA2  ECFC  F009         	call	_STLED316s_SPI_SendData
  5564                           
  5565                           ;Display.c: 198:  LATCbits.LATC4 = 1;
  5566  000EA6  888B               	bsf	3979,4,c	;volatile
  5567                           
  5568                           ;Display.c: 200:  LATCbits.LATC4 = 0;
  5569  000EA8  988B               	bcf	3979,4,c	;volatile
  5570                           
  5571                           ;Display.c: 202:  STLED316s_SPI_SendData (0x00);
  5572  000EAA  0E00               	movlw	0
  5573  000EAC  ECFC  F009         	call	_STLED316s_SPI_SendData
  5574                           
  5575                           ;Display.c: 204:  switch(msg)
  5576  000EB0  D038               	goto	l3057
  5577  000EB2                     l3039:
  5578                           
  5579                           ;Display.c: 207:      STLED316s_SPI_SendData (0x79);
  5580  000EB2  0E79               	movlw	121
  5581  000EB4  ECFC  F009         	call	_STLED316s_SPI_SendData
  5582                           
  5583                           ;Display.c: 208:         STLED316s_SPI_SendData (0x3F);
  5584  000EB8  0E3F               	movlw	63
  5585  000EBA  ECFC  F009         	call	_STLED316s_SPI_SendData
  5586                           
  5587                           ;Display.c: 209:        break;
  5588  000EBE  D051               	goto	l423
  5589  000EC0                     l3041:
  5590                           
  5591                           ;Display.c: 211:      STLED316s_SPI_SendData (0x3F);
  5592  000EC0  0E3F               	movlw	63
  5593  000EC2  ECFC  F009         	call	_STLED316s_SPI_SendData
  5594                           
  5595                           ;Display.c: 212:         STLED316s_SPI_SendData (0x73);
  5596  000EC6  0E73               	movlw	115
  5597  000EC8  ECFC  F009         	call	_STLED316s_SPI_SendData
  5598                           
  5599                           ;Display.c: 213:       break;
  5600  000ECC  D04A               	goto	l423
  5601  000ECE                     l3043:
  5602                           
  5603                           ;Display.c: 215:      STLED316s_SPI_SendData (0x39);
  5604  000ECE  0E39               	movlw	57
  5605  000ED0  ECFC  F009         	call	_STLED316s_SPI_SendData
  5606                           
  5607                           ;Display.c: 216:         STLED316s_SPI_SendData (0x77);
  5608  000ED4  0E77               	movlw	119
  5609  000ED6  ECFC  F009         	call	_STLED316s_SPI_SendData
  5610                           
  5611                           ;Display.c: 217:        break;
  5612  000EDA  D043               	goto	l423
  5613  000EDC                     l3045:
  5614                           
  5615                           ;Display.c: 219:      STLED316s_SPI_SendData (0x00);
  5616  000EDC  0E00               	movlw	0
  5617  000EDE  ECFC  F009         	call	_STLED316s_SPI_SendData
  5618                           
  5619                           ;Display.c: 220:         STLED316s_SPI_SendData (0x00);
  5620  000EE2  0E00               	movlw	0
  5621  000EE4  ECFC  F009         	call	_STLED316s_SPI_SendData
  5622                           
  5623                           ;Display.c: 221:        break;
  5624  000EE8  D03C               	goto	l423
  5625  000EEA                     l3047:
  5626                           
  5627                           ;Display.c: 223:      STLED316s_SPI_SendData (0x00);
  5628  000EEA  0E00               	movlw	0
  5629  000EEC  ECFC  F009         	call	_STLED316s_SPI_SendData
  5630                           
  5631                           ;Display.c: 224:         STLED316s_SPI_SendData (0x3F);
  5632  000EF0  0E3F               	movlw	63
  5633  000EF2  ECFC  F009         	call	_STLED316s_SPI_SendData
  5634                           
  5635                           ;Display.c: 225:         break;
  5636  000EF6  D035               	goto	l423
  5637  000EF8                     l3049:
  5638                           
  5639                           ;Display.c: 227:      STLED316s_SPI_SendData (0x79);
  5640  000EF8  0E79               	movlw	121
  5641  000EFA  ECFC  F009         	call	_STLED316s_SPI_SendData
  5642                           
  5643                           ;Display.c: 228:         STLED316s_SPI_SendData (0x06);
  5644  000EFE  0E06               	movlw	6
  5645  000F00  ECFC  F009         	call	_STLED316s_SPI_SendData
  5646                           
  5647                           ;Display.c: 229:         break;
  5648  000F04  D02E               	goto	l423
  5649  000F06                     l3051:
  5650                           
  5651                           ;Display.c: 231:      STLED316s_SPI_SendData (0x77);
  5652  000F06  0E77               	movlw	119
  5653  000F08  ECFC  F009         	call	_STLED316s_SPI_SendData
  5654                           
  5655                           ;Display.c: 232:         STLED316s_SPI_SendData (0x3E);
  5656  000F0C  0E3E               	movlw	62
  5657  000F0E  ECFC  F009         	call	_STLED316s_SPI_SendData
  5658                           
  5659                           ;Display.c: 233:         break;
  5660  000F12  D027               	goto	l423
  5661  000F14                     l3053:
  5662                           
  5663                           ;Display.c: 235:      STLED316s_SPI_SendData (0x00);
  5664  000F14  0E00               	movlw	0
  5665  000F16  ECFC  F009         	call	_STLED316s_SPI_SendData
  5666                           
  5667                           ;Display.c: 236:         STLED316s_SPI_SendData (0x3E);
  5668  000F1A  0E3E               	movlw	62
  5669  000F1C  ECFC  F009         	call	_STLED316s_SPI_SendData
  5670                           
  5671                           ;Display.c: 237:         break;
  5672  000F20  D020               	goto	l423
  5673  000F22                     l3057:
  5674  000F22  5044               	movf	WriteSTLED316SMode@msg,w,c
  5675  000F24  6E42               	movwf	??_WriteSTLED316SMode& (0+255),c
  5676  000F26  6A43               	clrf	(??_WriteSTLED316SMode+1)& (0+255),c
  5677                           
  5678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5679                           ; Switch size 1, requested type "simple"
  5680                           ; Number of cases is 1, Range of values is 0 to 0
  5681                           ; switch strategies available:
  5682                           ; Name         Instructions Cycles
  5683                           ; simple_byte            4     3 (average)
  5684                           ;	Chosen strategy is simple_byte
  5685  000F28  5043               	movf	??_WriteSTLED316SMode+1,w,c
  5686  000F2A  0A00               	xorlw	0	; case 0
  5687  000F2C  A4D8               	btfss	status,2,c
  5688  000F2E  D019               	goto	l423
  5689                           
  5690                           ; Switch size 1, requested type "simple"
  5691                           ; Number of cases is 8, Range of values is 65 to 88
  5692                           ; switch strategies available:
  5693                           ; Name         Instructions Cycles
  5694                           ; simple_byte           25    13 (average)
  5695                           ;	Chosen strategy is simple_byte
  5696  000F30  5042               	movf	??_WriteSTLED316SMode,w,c
  5697  000F32  0A41               	xorlw	65	; case 65
  5698  000F34  B4D8               	btfsc	status,2,c
  5699  000F36  D7E7               	goto	l3051
  5700  000F38  0A02               	xorlw	2	; case 67
  5701  000F3A  B4D8               	btfsc	status,2,c
  5702  000F3C  D7C8               	goto	l3043
  5703  000F3E  0A06               	xorlw	6	; case 69
  5704  000F40  B4D8               	btfsc	status,2,c
  5705  000F42  D7B7               	goto	l3039
  5706  000F44  0A02               	xorlw	2	; case 71
  5707  000F46  B4D8               	btfsc	status,2,c
  5708  000F48  D7D0               	goto	l3047
  5709  000F4A  0A08               	xorlw	8	; case 79
  5710  000F4C  B4D8               	btfsc	status,2,c
  5711  000F4E  D7B8               	goto	l3041
  5712  000F50  0A1C               	xorlw	28	; case 83
  5713  000F52  B4D8               	btfsc	status,2,c
  5714  000F54  D7D1               	goto	l3049
  5715  000F56  0A05               	xorlw	5	; case 86
  5716  000F58  B4D8               	btfsc	status,2,c
  5717  000F5A  D7DC               	goto	l3053
  5718  000F5C  0A0E               	xorlw	14	; case 88
  5719  000F5E  B4D8               	btfsc	status,2,c
  5720  000F60  D7BD               	goto	l3045
  5721  000F62                     l423:
  5722                           
  5723                           ;Display.c: 244:  LATCbits.LATC4 = 1;
  5724  000F62  888B               	bsf	3979,4,c	;volatile
  5725                           
  5726                           ;Display.c: 246:  LATCbits.LATC4 = 0;
  5727  000F64  988B               	bcf	3979,4,c	;volatile
  5728                           
  5729                           ;Display.c: 248:  STLED316s_SPI_SendData ( 0x0D );
  5730  000F66  0E0D               	movlw	13
  5731  000F68  ECFC  F009         	call	_STLED316s_SPI_SendData
  5732                           
  5733                           ;Display.c: 250:  LATCbits.LATC4 = 1;
  5734  000F6C  888B               	bsf	3979,4,c	;volatile
  5735  000F6E  0012               	return		;funcret
  5736  000F70                     __end_of_WriteSTLED316SMode:
  5737                           	opt callstack 0
  5738                           
  5739 ;; *************** function _WriteSTLED316SErr *****************
  5740 ;; Defined at:
  5741 ;;		line 291 in file "Display.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  msg             1    wreg     unsigned char 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  msg             1   14[COMRAM] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:        3 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    3
  5762 ;; This function calls:
  5763 ;;		_STLED316s_SPI_SendData
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;;		_MotorPosition_Init
  5767 ;;		_Homing_Again_Manual
  5768 ;;		_Homing_Again_Auto
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text32
  5773  00103C                     __ptext32:
  5774                           	opt callstack 0
  5775  00103C                     _WriteSTLED316SErr:
  5776                           	opt callstack 27
  5777                           
  5778                           ;incstack = 0
  5779                           ;WriteSTLED316SErr@msg stored from wreg
  5780  00103C  6E44               	movwf	WriteSTLED316SErr@msg,c
  5781                           
  5782                           ;Display.c: 291: void WriteSTLED316SErr( char msg);Display.c: 292: {;Display.c: 293:  LA
      +                          TCbits.LATC4 = 0;
  5783  00103E  988B               	bcf	3979,4,c	;volatile
  5784                           
  5785                           ;Display.c: 295:  STLED316s_SPI_SendData (0x00 );
  5786  001040  0E00               	movlw	0
  5787  001042  ECFC  F009         	call	_STLED316s_SPI_SendData
  5788                           
  5789                           ;Display.c: 298:  LATCbits.LATC4 = 1;
  5790  001046  888B               	bsf	3979,4,c	;volatile
  5791                           
  5792                           ;Display.c: 300:  LATCbits.LATC4 = 0;
  5793  001048  988B               	bcf	3979,4,c	;volatile
  5794                           
  5795                           ;Display.c: 302:  STLED316s_SPI_SendData (0x00);
  5796  00104A  0E00               	movlw	0
  5797  00104C  ECFC  F009         	call	_STLED316s_SPI_SendData
  5798                           
  5799                           ;Display.c: 304:  switch(msg)
  5800  001050  D031               	goto	l2977
  5801  001052                     l2961:
  5802                           
  5803                           ;Display.c: 307:      STLED316s_SPI_SendData (0x79);
  5804  001052  0E79               	movlw	121
  5805  001054  ECFC  F009         	call	_STLED316s_SPI_SendData
  5806                           
  5807                           ;Display.c: 308:         STLED316s_SPI_SendData (0x77);
  5808  001058  0E77               	movlw	119
  5809  00105A  ECFC  F009         	call	_STLED316s_SPI_SendData
  5810                           
  5811                           ;Display.c: 309:        break;
  5812  00105E  D047               	goto	l442
  5813  001060                     l2963:
  5814                           
  5815                           ;Display.c: 311:      STLED316s_SPI_SendData (0x79);
  5816  001060  0E79               	movlw	121
  5817  001062  ECFC  F009         	call	_STLED316s_SPI_SendData
  5818                           
  5819                           ;Display.c: 312:         STLED316s_SPI_SendData (0x3F);
  5820  001066  0E3F               	movlw	63
  5821  001068  ECFC  F009         	call	_STLED316s_SPI_SendData
  5822                           
  5823                           ;Display.c: 313:       break;
  5824  00106C  D040               	goto	l442
  5825  00106E                     l2965:
  5826                           
  5827                           ;Display.c: 315:      STLED316s_SPI_SendData (0x79);
  5828  00106E  0E79               	movlw	121
  5829  001070  ECFC  F009         	call	_STLED316s_SPI_SendData
  5830                           
  5831                           ;Display.c: 316:         STLED316s_SPI_SendData (0x06);
  5832  001074  0E06               	movlw	6
  5833  001076  ECFC  F009         	call	_STLED316s_SPI_SendData
  5834                           
  5835                           ;Display.c: 317:        break;
  5836  00107A  D039               	goto	l442
  5837  00107C                     l2967:
  5838                           
  5839                           ;Display.c: 319:      STLED316s_SPI_SendData (0x79);
  5840  00107C  0E79               	movlw	121
  5841  00107E  ECFC  F009         	call	_STLED316s_SPI_SendData
  5842                           
  5843                           ;Display.c: 320:         STLED316s_SPI_SendData (0x5B);
  5844  001082  0E5B               	movlw	91
  5845  001084  ECFC  F009         	call	_STLED316s_SPI_SendData
  5846                           
  5847                           ;Display.c: 321:        break;
  5848  001088  D032               	goto	l442
  5849  00108A                     l2969:
  5850                           
  5851                           ;Display.c: 323:      STLED316s_SPI_SendData (0x00);
  5852  00108A  0E00               	movlw	0
  5853  00108C  ECFC  F009         	call	_STLED316s_SPI_SendData
  5854                           
  5855                           ;Display.c: 324:         STLED316s_SPI_SendData (0x3F);
  5856  001090  0E3F               	movlw	63
  5857  001092  ECFC  F009         	call	_STLED316s_SPI_SendData
  5858                           
  5859                           ;Display.c: 325:         break;
  5860  001096  D02B               	goto	l442
  5861  001098                     l2971:
  5862                           
  5863                           ;Display.c: 327:      STLED316s_SPI_SendData (0x79);
  5864  001098  0E79               	movlw	121
  5865  00109A  ECFC  F009         	call	_STLED316s_SPI_SendData
  5866                           
  5867                           ;Display.c: 328:         STLED316s_SPI_SendData (0x06);
  5868  00109E  0E06               	movlw	6
  5869  0010A0  ECFC  F009         	call	_STLED316s_SPI_SendData
  5870                           
  5871                           ;Display.c: 329:         break;
  5872  0010A4  D024               	goto	l442
  5873  0010A6                     l2973:
  5874                           
  5875                           ;Display.c: 331:      STLED316s_SPI_SendData (0x77);
  5876  0010A6  0E77               	movlw	119
  5877  0010A8  ECFC  F009         	call	_STLED316s_SPI_SendData
  5878                           
  5879                           ;Display.c: 332:         STLED316s_SPI_SendData (0x3E);
  5880  0010AC  0E3E               	movlw	62
  5881  0010AE  ECFC  F009         	call	_STLED316s_SPI_SendData
  5882                           
  5883                           ;Display.c: 333:         break;
  5884  0010B2  D01D               	goto	l442
  5885  0010B4                     l2977:
  5886  0010B4  5044               	movf	WriteSTLED316SErr@msg,w,c
  5887  0010B6  6E42               	movwf	??_WriteSTLED316SErr& (0+255),c
  5888  0010B8  6A43               	clrf	(??_WriteSTLED316SErr+1)& (0+255),c
  5889                           
  5890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5891                           ; Switch size 1, requested type "simple"
  5892                           ; Number of cases is 1, Range of values is 0 to 0
  5893                           ; switch strategies available:
  5894                           ; Name         Instructions Cycles
  5895                           ; simple_byte            4     3 (average)
  5896                           ;	Chosen strategy is simple_byte
  5897  0010BA  5043               	movf	??_WriteSTLED316SErr+1,w,c
  5898  0010BC  0A00               	xorlw	0	; case 0
  5899  0010BE  A4D8               	btfss	status,2,c
  5900  0010C0  D016               	goto	l442
  5901                           
  5902                           ; Switch size 1, requested type "simple"
  5903                           ; Number of cases is 7, Range of values is 48 to 83
  5904                           ; switch strategies available:
  5905                           ; Name         Instructions Cycles
  5906                           ; simple_byte           22    12 (average)
  5907                           ;	Chosen strategy is simple_byte
  5908  0010C2  5042               	movf	??_WriteSTLED316SErr,w,c
  5909  0010C4  0A30               	xorlw	48	; case 48
  5910  0010C6  B4D8               	btfsc	status,2,c
  5911  0010C8  D7CB               	goto	l2963
  5912  0010CA  0A01               	xorlw	1	; case 49
  5913  0010CC  B4D8               	btfsc	status,2,c
  5914  0010CE  D7CF               	goto	l2965
  5915  0010D0  0A03               	xorlw	3	; case 50
  5916  0010D2  B4D8               	btfsc	status,2,c
  5917  0010D4  D7D3               	goto	l2967
  5918  0010D6  0A73               	xorlw	115	; case 65
  5919  0010D8  B4D8               	btfsc	status,2,c
  5920  0010DA  D7E5               	goto	l2973
  5921  0010DC  0A04               	xorlw	4	; case 69
  5922  0010DE  B4D8               	btfsc	status,2,c
  5923  0010E0  D7B8               	goto	l2961
  5924  0010E2  0A02               	xorlw	2	; case 71
  5925  0010E4  B4D8               	btfsc	status,2,c
  5926  0010E6  D7D1               	goto	l2969
  5927  0010E8  0A14               	xorlw	20	; case 83
  5928  0010EA  B4D8               	btfsc	status,2,c
  5929  0010EC  D7D5               	goto	l2971
  5930  0010EE                     l442:
  5931                           
  5932                           ;Display.c: 338:  LATCbits.LATC4 = 1;
  5933  0010EE  888B               	bsf	3979,4,c	;volatile
  5934                           
  5935                           ;Display.c: 340:  LATCbits.LATC4 = 0;
  5936  0010F0  988B               	bcf	3979,4,c	;volatile
  5937                           
  5938                           ;Display.c: 342:  STLED316s_SPI_SendData ( 0x0D );
  5939  0010F2  0E0D               	movlw	13
  5940  0010F4  ECFC  F009         	call	_STLED316s_SPI_SendData
  5941                           
  5942                           ;Display.c: 344:  LATCbits.LATC4 = 1;
  5943  0010F8  888B               	bsf	3979,4,c	;volatile
  5944  0010FA  0012               	return		;funcret
  5945  0010FC                     __end_of_WriteSTLED316SErr:
  5946                           	opt callstack 0
  5947                           
  5948 ;; *************** function _STLED316s_SPI_SendData *****************
  5949 ;; Defined at:
  5950 ;;		line 89 in file "Display.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  Data            1    wreg     unsigned char 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  Data            1    8[COMRAM] unsigned char 
  5955 ;;  t               1   11[COMRAM] unsigned char 
  5956 ;;  i               1   10[COMRAM] unsigned char 
  5957 ;;  temp            1    9[COMRAM] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;Total ram usage:        6 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    2
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_InitSTLED316
  5978 ;;		_WriteSTLED316SData
  5979 ;;		_WriteSTLED316SMode
  5980 ;;		_WriteSTLED316SVibMode
  5981 ;;		_WriteSTLED316SErr
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text33
  5986  0013F8                     __ptext33:
  5987                           	opt callstack 0
  5988  0013F8                     _STLED316s_SPI_SendData:
  5989                           	opt callstack 27
  5990                           
  5991                           ;incstack = 0
  5992                           ;STLED316s_SPI_SendData@Data stored from wreg
  5993  0013F8  6E3E               	movwf	STLED316s_SPI_SendData@Data,c
  5994                           
  5995                           ;Display.c: 89: void STLED316s_SPI_SendData( unsigned char Data );Display.c: 90: {;Displ
      +                          ay.c: 91:  char i,temp,t;;Display.c: 93:  for(i = 0; i < 8 ;i ++)
  5996  0013FA  0E00               	movlw	0
  5997  0013FC  6E40               	movwf	STLED316s_SPI_SendData@i,c
  5998  0013FE                     l388:
  5999                           
  6000                           ;Display.c: 94:  {;Display.c: 95:   LATCbits.LATC3 = 0;
  6001  0013FE  968B               	bcf	3979,3,c	;volatile
  6002                           
  6003                           ;Display.c: 96:   temp = Data & (0x1 << i);
  6004  001400  C040  F03C         	movff	STLED316s_SPI_SendData@i,??_STLED316s_SPI_SendData
  6005  001404  0E01               	movlw	1
  6006  001406  6E3D               	movwf	(??_STLED316s_SPI_SendData+1)& (0+255),c
  6007  001408  2A3C               	incf	??_STLED316s_SPI_SendData,f,c
  6008  00140A  D002               	goto	u1384
  6009  00140C                     u1385:
  6010  00140C  90D8               	bcf	status,0,c
  6011  00140E  363D               	rlcf	??_STLED316s_SPI_SendData+1,f,c
  6012  001410                     u1384:
  6013  001410  2E3C               	decfsz	??_STLED316s_SPI_SendData,f,c
  6014  001412  D7FC               	goto	u1385
  6015  001414  503D               	movf	??_STLED316s_SPI_SendData+1,w,c
  6016  001416  143E               	andwf	STLED316s_SPI_SendData@Data,w,c
  6017  001418  6E3F               	movwf	STLED316s_SPI_SendData@temp,c
  6018                           
  6019                           ;Display.c: 97:   if(temp)
  6020  00141A  503F               	movf	STLED316s_SPI_SendData@temp,w,c
  6021  00141C  B4D8               	btfsc	status,2,c
  6022  00141E  D002               	goto	l390
  6023                           
  6024                           ;Display.c: 98:    LATCbits.LATC5 = 1;
  6025  001420  8A8B               	bsf	3979,5,c	;volatile
  6026  001422  D001               	goto	l2709
  6027  001424                     l390:
  6028                           
  6029                           ;Display.c: 100:    LATCbits.LATC5 = 0;
  6030  001424  9A8B               	bcf	3979,5,c	;volatile
  6031  001426                     l2709:
  6032                           
  6033                           ;Display.c: 101:   for( t = 0 ; t < 5; t++);
  6034  001426  0E00               	movlw	0
  6035  001428  6E41               	movwf	STLED316s_SPI_SendData@t,c
  6036  00142A                     l2715:
  6037  00142A  2A41               	incf	STLED316s_SPI_SendData@t,f,c
  6038  00142C  0E04               	movlw	4
  6039  00142E  6441               	cpfsgt	STLED316s_SPI_SendData@t,c
  6040  001430  D7FC               	goto	l2715
  6041                           
  6042                           ;Display.c: 102:   LATCbits.LATC3 = 1;
  6043  001432  868B               	bsf	3979,3,c	;volatile
  6044                           
  6045                           ;Display.c: 103:   for( t = 0 ; t < 5 ; t++);
  6046  001434  0E00               	movlw	0
  6047  001436  6E41               	movwf	STLED316s_SPI_SendData@t,c
  6048  001438                     l2725:
  6049  001438  2A41               	incf	STLED316s_SPI_SendData@t,f,c
  6050  00143A  0E04               	movlw	4
  6051  00143C  6441               	cpfsgt	STLED316s_SPI_SendData@t,c
  6052  00143E  D7FC               	goto	l2725
  6053                           
  6054                           ;Display.c: 104:  }
  6055  001440  2A40               	incf	STLED316s_SPI_SendData@i,f,c
  6056  001442  0E07               	movlw	7
  6057  001444  6440               	cpfsgt	STLED316s_SPI_SendData@i,c
  6058  001446  D7DB               	goto	l388
  6059  001448  0012               	return	
  6060  00144A                     __end_of_STLED316s_SPI_SendData:
  6061                           	opt callstack 0
  6062                           
  6063 ;; *************** function _Read_IR *****************
  6064 ;; Defined at:
  6065 ;;		line 784 in file "main.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  2    6[COMRAM] unsigned int 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6079 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;Total ram usage:        2 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    2
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_MotorPosition_Init
  6090 ;;		_Homing_Again_Manual
  6091 ;;		_Homing_Again_Auto
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text34
  6096  0016E6                     __ptext34:
  6097                           	opt callstack 0
  6098  0016E6                     _Read_IR:
  6099                           	opt callstack 27
  6100                           
  6101                           ;main.c: 787:     if(PORTAbits.RA1 == 1)
  6102                           
  6103                           ;incstack = 0
  6104  0016E6  A280               	btfss	3968,1,c	;volatile
  6105  0016E8  D005               	goto	l3001
  6106                           
  6107                           ;main.c: 788:     {;main.c: 789:         return 0;
  6108  0016EA  0E00               	movlw	0
  6109  0016EC  6E3D               	movwf	?_Read_IR+1,c
  6110  0016EE  0E00               	movlw	0
  6111  0016F0  6E3C               	movwf	?_Read_IR,c
  6112  0016F2  0012               	return	
  6113  0016F4                     l3001:
  6114                           
  6115                           ;main.c: 792:     {;main.c: 793:         return 1;
  6116  0016F4  0E00               	movlw	0
  6117  0016F6  6E3D               	movwf	?_Read_IR+1,c
  6118  0016F8  0E01               	movlw	1
  6119  0016FA  6E3C               	movwf	?_Read_IR,c
  6120  0016FC  0012               	return		;funcret
  6121  0016FE                     __end_of_Read_IR:
  6122                           	opt callstack 0
  6123                           
  6124 ;; *************** function _MotorON_PWM *****************
  6125 ;; Defined at:
  6126 ;;		line 42 in file "MotorDriver.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;Total ram usage:        0 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    3
  6147 ;; This function calls:
  6148 ;;		_Set_RG3_PWM
  6149 ;; This function is called by:
  6150 ;;		_MotorPosition_Init
  6151 ;;		_Homing_Again_Manual
  6152 ;;		_Homing_Again_Auto
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text35
  6157  001778                     __ptext35:
  6158                           	opt callstack 0
  6159  001778                     _MotorON_PWM:
  6160                           	opt callstack 26
  6161                           
  6162                           ;MotorDriver.c: 44:  LATGbits.LATG3 = 1;
  6163                           
  6164                           ;incstack = 0
  6165  001778  868F               	bsf	3983,3,c	;volatile
  6166                           
  6167                           ;MotorDriver.c: 45:  LATGbits.LATG4 = 1;
  6168  00177A  888F               	bsf	3983,4,c	;volatile
  6169                           
  6170                           ;MotorDriver.c: 47:  Set_RG3_PWM();
  6171  00177C  ECB0  F00B         	call	_Set_RG3_PWM	;wreg free
  6172  001780  0012               	return		;funcret
  6173  001782                     __end_of_MotorON_PWM:
  6174                           	opt callstack 0
  6175                           
  6176 ;; *************** function _Set_RG3_PWM *****************
  6177 ;; Defined at:
  6178 ;;		line 29 in file "MotorDriver.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    2
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_MotorON_PWM
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text36
  6207  001760                     __ptext36:
  6208                           	opt callstack 0
  6209  001760                     _Set_RG3_PWM:
  6210                           	opt callstack 26
  6211                           
  6212                           ;MotorDriver.c: 31:     CCP4CON = 0x0C;
  6213                           
  6214                           ;incstack = 0
  6215  001760  0E0C               	movlw	12
  6216  001762  6E73               	movwf	3955,c	;volatile
  6217                           
  6218                           ;MotorDriver.c: 32:     CCPR4L = PWM_reg;
  6219  001764  C058  FF74         	movff	_PWM_reg,3956	;volatile
  6220                           
  6221                           ;MotorDriver.c: 33:   T4CONbits.TMR4ON = 1;
  6222  001768  8476               	bsf	3958,2,c	;volatile
  6223  00176A  0012               	return		;funcret
  6224  00176C                     __end_of_Set_RG3_PWM:
  6225                           	opt callstack 0
  6226                           
  6227 ;; *************** function _MotorBREAK *****************
  6228 ;; Defined at:
  6229 ;;		line 50 in file "MotorDriver.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;		None
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      void 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;Total ram usage:        0 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    3
  6250 ;; This function calls:
  6251 ;;		_Clr_RG3_PWM
  6252 ;; This function is called by:
  6253 ;;		_MotorPosition_Init
  6254 ;;		_Homing_Again_Manual
  6255 ;;		_Homing_Again_Auto
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text37
  6260  001782                     __ptext37:
  6261                           	opt callstack 0
  6262  001782                     _MotorBREAK:
  6263                           	opt callstack 26
  6264                           
  6265                           ;MotorDriver.c: 53:  Clr_RG3_PWM();
  6266                           
  6267                           ;incstack = 0
  6268  001782  ECD2  F00B         	call	_Clr_RG3_PWM	;wreg free
  6269                           
  6270                           ;MotorDriver.c: 55:  LATGbits.LATG3 = 1;
  6271  001786  868F               	bsf	3983,3,c	;volatile
  6272                           
  6273                           ;MotorDriver.c: 56:  LATGbits.LATG4 = 1;
  6274  001788  888F               	bsf	3983,4,c	;volatile
  6275  00178A  0012               	return		;funcret
  6276  00178C                     __end_of_MotorBREAK:
  6277                           	opt callstack 0
  6278                           
  6279 ;; *************** function _Clr_RG3_PWM *****************
  6280 ;; Defined at:
  6281 ;;		line 36 in file "MotorDriver.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, status,2
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    2
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_MotorBREAK
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text38
  6310  0017A4                     __ptext38:
  6311                           	opt callstack 0
  6312  0017A4                     _Clr_RG3_PWM:
  6313                           	opt callstack 26
  6314                           
  6315                           ;MotorDriver.c: 38:  CCP4CON = 0x00;
  6316                           
  6317                           ;incstack = 0
  6318  0017A4  0E00               	movlw	0
  6319  0017A6  6E73               	movwf	3955,c	;volatile
  6320                           
  6321                           ;MotorDriver.c: 39:     T4CONbits.TMR4ON = 0;
  6322  0017A8  9476               	bcf	3958,2,c	;volatile
  6323  0017AA  0012               	return		;funcret
  6324  0017AC                     __end_of_Clr_RG3_PWM:
  6325                           	opt callstack 0
  6326                           
  6327 ;; *************** function _high_isr *****************
  6328 ;; Defined at:
  6329 ;;		line 656 in file "main.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;		None
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  i               1    5[COMRAM] unsigned char 
  6334 ;;  c               1    4[COMRAM] unsigned char 
  6335 ;;  Temp            1    3[COMRAM] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      void 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;Total ram usage:        5 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    1
  6352 ;; This function calls:
  6353 ;;		_Read1USART
  6354 ;;		i2_Write1USART
  6355 ;; This function is called by:
  6356 ;;		Interrupt level 2
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	intcode
  6361  000008                     __pintcode:
  6362                           	opt callstack 0
  6363  000008                     _high_isr:
  6364                           	opt callstack 25
  6365                           
  6366                           ;incstack = 0
  6367  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6368  00000A  CFD9 F037          	movff	fsr2l,??_high_isr
  6369  00000E  CFDA F038          	movff	fsr2h,??_high_isr+1
  6370                           
  6371                           ;main.c: 658:     unsigned char c, i;;main.c: 659:  unsigned char Temp;;main.c: 661:    
      +                           if ((PIR1bits.RC1IF))
  6372  000012  AA9E               	btfss	3998,5,c	;volatile
  6373  000014  D085               	goto	i2l259
  6374                           
  6375                           ;main.c: 662:  {;main.c: 664:   c=Read1USART();
  6376  000016  EC5A  F00B         	call	_Read1USART	;wreg free
  6377  00001A  6E3A               	movwf	high_isr@c,c
  6378                           
  6379                           ;main.c: 666:   if ((c == 0xA5) && ((Serial_Flag == 0)||(Busy == 1)))
  6380  00001C  0EA5               	movlw	165
  6381  00001E  183A               	xorwf	high_isr@c,w,c
  6382  000020  A4D8               	btfss	status,2,c
  6383  000022  D017               	goto	i2l3947
  6384  000024  5035               	movf	_Serial_Flag,w,c
  6385  000026  B4D8               	btfsc	status,2,c
  6386  000028  D003               	goto	i2u250_40
  6387  00002A  0431               	decf	_Busy,w,c
  6388  00002C  A4D8               	btfss	status,2,c
  6389  00002E  D011               	goto	i2l3947
  6390  000030                     i2u250_40:
  6391                           
  6392                           ;main.c: 667:   {;main.c: 668:    Serial_GData = 1;
  6393  000030  0E01               	movlw	1
  6394  000032  6E34               	movwf	_Serial_GData,c
  6395                           
  6396                           ;main.c: 669:    Serial_Count = 0;
  6397  000034  0E00               	movlw	0
  6398  000036  6E28               	movwf	_Serial_Count+1,c
  6399  000038  0E00               	movlw	0
  6400  00003A  6E27               	movwf	_Serial_Count,c
  6401                           
  6402                           ;main.c: 670:    Serial_Buffer[Serial_Count] = c;
  6403  00003C  0E01               	movlw	low _Serial_Buffer
  6404  00003E  2427               	addwf	_Serial_Count,w,c
  6405  000040  6ED9               	movwf	fsr2l,c
  6406  000042  0E00               	movlw	high _Serial_Buffer
  6407  000044  2028               	addwfc	_Serial_Count+1,w,c
  6408  000046  6EDA               	movwf	fsr2h,c
  6409  000048  C03A  FFDF         	movff	high_isr@c,indf2
  6410  00004C                     i2l3945:
  6411                           
  6412                           ;main.c: 671:             Serial_Count++;
  6413  00004C  4A27               	infsnz	_Serial_Count,f,c
  6414  00004E  2A28               	incf	_Serial_Count+1,f,c
  6415                           
  6416                           ;main.c: 672:   }
  6417  000050  D06C               	goto	i2l4013
  6418  000052                     i2l3947:
  6419  000052  0434               	decf	_Serial_GData,w,c
  6420  000054  A4D8               	btfss	status,2,c
  6421  000056  D069               	goto	i2l4013
  6422                           
  6423                           ;main.c: 674:   {;main.c: 675:    Serial_Buffer[Serial_Count] = c;
  6424  000058  0E01               	movlw	low _Serial_Buffer
  6425  00005A  2427               	addwf	_Serial_Count,w,c
  6426  00005C  6ED9               	movwf	fsr2l,c
  6427  00005E  0E00               	movlw	high _Serial_Buffer
  6428  000060  2028               	addwfc	_Serial_Count+1,w,c
  6429  000062  6EDA               	movwf	fsr2h,c
  6430  000064  C03A  FFDF         	movff	high_isr@c,indf2
  6431                           
  6432                           ;main.c: 677:    if(Serial_Count<5)
  6433  000068  5028               	movf	_Serial_Count+1,w,c
  6434  00006A  E157               	bnz	i2l4007
  6435  00006C  0E05               	movlw	5
  6436  00006E  5C27               	subwf	_Serial_Count,w,c
  6437  000070  B0D8               	btfsc	status,0,c
  6438  000072  D053               	goto	i2l4007
  6439                           
  6440                           ;main.c: 678:             {;main.c: 679:                 if (c == 0x5A)
  6441  000074  0E5A               	movlw	90
  6442  000076  183A               	xorwf	high_isr@c,w,c
  6443  000078  A4D8               	btfss	status,2,c
  6444  00007A  D7E8               	goto	i2l3945
  6445                           
  6446                           ;main.c: 680:                 {;main.c: 681:                     Temp = Serial_Buffer[1]
      +                           + Serial_Buffer[2];
  6447  00007C  5002               	movf	_Serial_Buffer+1,w,c
  6448  00007E  2403               	addwf	_Serial_Buffer+2,w,c
  6449  000080  6E39               	movwf	high_isr@Temp,c
  6450                           
  6451                           ;main.c: 683:                     if (Temp == Serial_Buffer[3])
  6452  000082  5039               	movf	high_isr@Temp,w,c
  6453  000084  1804               	xorwf	_Serial_Buffer+3,w,c
  6454  000086  A4D8               	btfss	status,2,c
  6455  000088  D02C               	goto	i2l3987
  6456                           
  6457                           ;main.c: 684:                     {;main.c: 685:                         if(Busy==0 || S
      +                          erial_Buffer[2]==0xF5)
  6458  00008A  5031               	movf	_Busy,w,c
  6459  00008C  B4D8               	btfsc	status,2,c
  6460  00008E  D004               	goto	i2u256_40
  6461  000090  0EF5               	movlw	245
  6462  000092  1803               	xorwf	_Serial_Buffer+2,w,c
  6463  000094  A4D8               	btfss	status,2,c
  6464  000096  D011               	goto	i2l268
  6465  000098                     i2u256_40:
  6466                           
  6467                           ;main.c: 686:                         {;main.c: 687:                             INTCONb
      +                          its.GIE=0;
  6468  000098  9EF2               	bcf	4082,7,c	;volatile
  6469                           
  6470                           ;main.c: 688:                             for (i=0; i<5; i++)
  6471  00009A  0E00               	movlw	0
  6472  00009C  6E3B               	movwf	high_isr@i,c
  6473  00009E                     i2l3967:
  6474                           
  6475                           ;main.c: 689:                             {;main.c: 690:                                
      +                           Write1USART(Serial_Buffer[i]);
  6476  00009E  0E01               	movlw	low _Serial_Buffer
  6477  0000A0  243B               	addwf	high_isr@i,w,c
  6478  0000A2  6ED9               	movwf	fsr2l,c
  6479  0000A4  6ADA               	clrf	fsr2h,c
  6480  0000A6  0E00               	movlw	high _Serial_Buffer
  6481  0000A8  22DA               	addwfc	fsr2h,f,c
  6482  0000AA  50DF               	movf	indf2,w,c
  6483  0000AC  ECB6  F00B         	call	i2_Write1USART
  6484                           
  6485                           ;main.c: 691:                             }
  6486  0000B0  2A3B               	incf	high_isr@i,f,c
  6487  0000B2  0E04               	movlw	4
  6488  0000B4  643B               	cpfsgt	high_isr@i,c
  6489  0000B6  D7F3               	goto	i2l3967
  6490  0000B8  D00A               	goto	i2u258_40
  6491  0000BA                     i2l268:
  6492                           
  6493                           ;main.c: 695:                         {;main.c: 696:                             INTCONb
      +                          its.GIE=0;
  6494  0000BA  9EF2               	bcf	4082,7,c	;volatile
  6495                           
  6496                           ;main.c: 697:                             for (i=0; i<5; i++)
  6497  0000BC  0E00               	movlw	0
  6498  0000BE  6E3B               	movwf	high_isr@i,c
  6499  0000C0                     i2l3979:
  6500                           
  6501                           ;main.c: 698:                             {;main.c: 699:                                
      +                           Write1USART(0x16);
  6502  0000C0  0E16               	movlw	22
  6503  0000C2  ECB6  F00B         	call	i2_Write1USART
  6504                           
  6505                           ;main.c: 700:                             }
  6506  0000C6  2A3B               	incf	high_isr@i,f,c
  6507  0000C8  0E04               	movlw	4
  6508  0000CA  643B               	cpfsgt	high_isr@i,c
  6509  0000CC  D7F9               	goto	i2l3979
  6510  0000CE                     i2u258_40:
  6511                           
  6512                           ;main.c: 701:                             INTCONbits.GIE=1;
  6513  0000CE  8EF2               	bsf	4082,7,c	;volatile
  6514                           
  6515                           ;main.c: 704:                         Serial_Flag = 1;
  6516  0000D0  0E01               	movlw	1
  6517  0000D2  6E35               	movwf	_Serial_Flag,c
  6518                           
  6519                           ;main.c: 705:                         Serial_Count = 0;
  6520  0000D4  0E00               	movlw	0
  6521  0000D6  6E28               	movwf	_Serial_Count+1,c
  6522  0000D8  0E00               	movlw	0
  6523  0000DA  6E27               	movwf	_Serial_Count,c
  6524                           
  6525                           ;main.c: 706:                         OpMode = AUTO_MODE;
  6526  0000DC  0E02               	movlw	2
  6527  0000DE  6E2E               	movwf	_OpMode,c	;volatile
  6528                           
  6529                           ;main.c: 708:                     }
  6530  0000E0  D011               	goto	i2l4001
  6531  0000E2                     i2l3987:
  6532                           
  6533                           ;main.c: 710:                     {;main.c: 711:                         Serial_Flag = 0
      +                          ;
  6534  0000E2  0E00               	movlw	0
  6535  0000E4  6E35               	movwf	_Serial_Flag,c
  6536                           
  6537                           ;main.c: 712:                         Serial_Count = 0;
  6538  0000E6  0E00               	movlw	0
  6539  0000E8  6E28               	movwf	_Serial_Count+1,c
  6540  0000EA  0E00               	movlw	0
  6541  0000EC  6E27               	movwf	_Serial_Count,c
  6542                           
  6543                           ;main.c: 714:                         INTCONbits.GIE=0;
  6544  0000EE  9EF2               	bcf	4082,7,c	;volatile
  6545                           
  6546                           ;main.c: 715:                         for (i=0; i<5; i++)
  6547  0000F0  0E00               	movlw	0
  6548  0000F2  6E3B               	movwf	high_isr@i,c
  6549  0000F4                     i2l3995:
  6550                           
  6551                           ;main.c: 716:                         {;main.c: 717:                             Write1U
      +                          SART(0x15);
  6552  0000F4  0E15               	movlw	21
  6553  0000F6  ECB6  F00B         	call	i2_Write1USART
  6554                           
  6555                           ;main.c: 718:                         }
  6556  0000FA  2A3B               	incf	high_isr@i,f,c
  6557  0000FC  0E04               	movlw	4
  6558  0000FE  643B               	cpfsgt	high_isr@i,c
  6559  000100  D7F9               	goto	i2l3995
  6560                           
  6561                           ;main.c: 719:                         INTCONbits.GIE=1;
  6562  000102  8EF2               	bsf	4082,7,c	;volatile
  6563  000104                     i2l4001:
  6564                           
  6565                           ;main.c: 722:                     if(Serial_Buffer[2]==0xF5 && OpMode == AUTO_MODE)
  6566  000104  0EF5               	movlw	245
  6567  000106  1803               	xorwf	_Serial_Buffer+2,w,c
  6568  000108  A4D8               	btfss	status,2,c
  6569  00010A  D7A0               	goto	i2l3945
  6570  00010C  0E02               	movlw	2
  6571  00010E  182E               	xorwf	_OpMode,w,c	;volatile
  6572  000110  A4D8               	btfss	status,2,c
  6573  000112  D79C               	goto	i2l3945
  6574                           
  6575                           ;main.c: 723:                     {;main.c: 724:                         Stop = 1;
  6576  000114  0E01               	movlw	1
  6577  000116  6E33               	movwf	_Stop,c
  6578  000118  D799               	goto	i2l3945
  6579  00011A                     i2l4007:
  6580                           
  6581                           ;main.c: 729:             {;main.c: 730:                 Serial_GData = 0;
  6582  00011A  0E00               	movlw	0
  6583  00011C  6E34               	movwf	_Serial_GData,c
  6584  00011E  D796               	goto	i2l3945
  6585  000120                     i2l259:
  6586                           
  6587                           ;main.c: 737:     {;main.c: 738:         if (RCSTA1bits.OERR == 1)
  6588  000120  A2AC               	btfss	4012,1,c	;volatile
  6589  000122  D003               	goto	i2l4013
  6590                           
  6591                           ;main.c: 739:         {;main.c: 740:             RCSTA1bits.OERR = 0;
  6592  000124  92AC               	bcf	4012,1,c	;volatile
  6593                           
  6594                           ;main.c: 741:             RCSTA1bits.CREN = 0;
  6595  000126  98AC               	bcf	4012,4,c	;volatile
  6596                           
  6597                           ;main.c: 742:             RCSTA1bits.CREN = 1;
  6598  000128  88AC               	bsf	4012,4,c	;volatile
  6599  00012A                     i2l4013:
  6600                           
  6601                           ;main.c: 746:     if (TMR1IF_triggered == 1)
  6602  00012A  0429               	decf	_TMR1IF_triggered,w,c	;volatile
  6603  00012C  A4D8               	btfss	status,2,c
  6604  00012E  D01C               	goto	i2l4021
  6605                           
  6606                           ;main.c: 747:     {;main.c: 748:         if(errorcounter >0)
  6607  000130  BE55               	btfsc	_errorcounter+3,7,c	;volatile
  6608  000132  D010               	goto	i2l4019
  6609  000134  5055               	movf	_errorcounter+3,w,c	;volatile
  6610  000136  1054               	iorwf	_errorcounter+2,w,c	;volatile
  6611  000138  1053               	iorwf	_errorcounter+1,w,c	;volatile
  6612  00013A  E103               	bnz	i2u264_40
  6613  00013C  0452               	decf	_errorcounter,w,c	;volatile
  6614  00013E  A0D8               	btfss	status,0,c
  6615  000140  D009               	goto	i2l4019
  6616  000142                     i2u264_40:
  6617                           
  6618                           ;main.c: 749:         {;main.c: 750:             errorcounter--;
  6619  000142  0EFF               	movlw	255
  6620  000144  2652               	addwf	_errorcounter,f,c	;volatile
  6621  000146  0EFF               	movlw	255
  6622  000148  2253               	addwfc	_errorcounter+1,f,c	;volatile
  6623  00014A  0EFF               	movlw	255
  6624  00014C  2254               	addwfc	_errorcounter+2,f,c	;volatile
  6625  00014E  0EFF               	movlw	255
  6626  000150  2255               	addwfc	_errorcounter+3,f,c	;volatile
  6627                           
  6628                           ;main.c: 751:         }
  6629  000152  D008               	goto	i2l285
  6630  000154                     i2l4019:
  6631                           
  6632                           ;main.c: 753:         {;main.c: 754:             errorcounter = 0;
  6633  000154  0E00               	movlw	0
  6634  000156  6E52               	movwf	_errorcounter,c	;volatile
  6635  000158  0E00               	movlw	0
  6636  00015A  6E53               	movwf	_errorcounter+1,c	;volatile
  6637  00015C  0E00               	movlw	0
  6638  00015E  6E54               	movwf	_errorcounter+2,c	;volatile
  6639  000160  0E00               	movlw	0
  6640  000162  6E55               	movwf	_errorcounter+3,c	;volatile
  6641  000164                     i2l285:
  6642                           
  6643                           ;main.c: 757:         TMR1IF_triggered = 0;
  6644  000164  0E00               	movlw	0
  6645  000166  6E29               	movwf	_TMR1IF_triggered,c	;volatile
  6646  000168                     i2l4021:
  6647                           
  6648                           ;main.c: 760:     if(TMR1IF)
  6649  000168  A09E               	btfss	3998,0,c	;volatile
  6650  00016A  D007               	goto	i2l287
  6651                           
  6652                           ;main.c: 761:     {;main.c: 762:         TMR1 = 0x9E57;
  6653  00016C  0E9E               	movlw	158
  6654  00016E  6ECF               	movwf	4047,c	;volatile
  6655  000170  0E57               	movlw	87
  6656  000172  6ECE               	movwf	4046,c	;volatile
  6657                           
  6658                           ;main.c: 763:         TMR1IF = 0;
  6659  000174  909E               	bcf	3998,0,c	;volatile
  6660                           
  6661                           ;main.c: 764:         TMR1IF_triggered = 1;
  6662  000176  0E01               	movlw	1
  6663  000178  6E29               	movwf	_TMR1IF_triggered,c	;volatile
  6664  00017A                     i2l287:
  6665  00017A  C038  FFDA         	movff	??_high_isr+1,fsr2h
  6666  00017E  C037  FFD9         	movff	??_high_isr,fsr2l
  6667  000182  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6668  000184  0011               	retfie		f
  6669  000186                     __end_of_high_isr:
  6670                           	opt callstack 0
  6671                           
  6672 ;; *************** function i2_Write1USART *****************
  6673 ;; Defined at:
  6674 ;;		line 48 in file "usart.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  data            1    wreg     unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  data            1    0[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:        1 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_high_isr
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text40
  6702  00176C                     __ptext40:
  6703                           	opt callstack 0
  6704  00176C                     i2_Write1USART:
  6705                           	opt callstack 25
  6706                           
  6707                           ;incstack = 0
  6708                           ;i2Write1USART@data stored from wreg
  6709  00176C  6E36               	movwf	i2Write1USART@data,c
  6710                           
  6711                           ;usart.c: 48: void Write1USART(char data);usart.c: 49: {;usart.c: 50:    TXREG1 = data;
  6712  00176E  C036  FFAE         	movff	i2Write1USART@data,4014	;volatile
  6713  001772                     i2l535:
  6714  001772  B2AD               	btfsc	4013,1,c	;volatile
  6715  001774  0012               	return	
  6716  001776  D7FD               	goto	i2l535
  6717  001778                     __end_ofi2_Write1USART:
  6718                           	opt callstack 0
  6719                           
  6720 ;; *************** function _Read1USART *****************
  6721 ;; Defined at:
  6722 ;;		line 58 in file "usart.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  result          1    0[COMRAM] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      unsigned char 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        1 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_high_isr
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text41
  6750  0016B4                     __ptext41:
  6751                           	opt callstack 0
  6752  0016B4                     _Read1USART:
  6753                           	opt callstack 25
  6754                           
  6755                           ;usart.c: 60:     char result;;usart.c: 62:     if (RCSTA1bits.OERR)
  6756                           
  6757                           ;incstack = 0
  6758  0016B4  A2AC               	btfss	4012,1,c	;volatile
  6759  0016B6  D007               	goto	i2l541
  6760                           
  6761                           ;usart.c: 63:     {;usart.c: 64:         RCSTA1bits.CREN = 0;
  6762  0016B8  98AC               	bcf	4012,4,c	;volatile
  6763                           
  6764                           ;usart.c: 65:         result = RCREG1;
  6765  0016BA  CFAF F036          	movff	4015,Read1USART@result	;volatile
  6766                           
  6767                           ;usart.c: 66:         result = RCREG1;
  6768  0016BE  CFAF F036          	movff	4015,Read1USART@result	;volatile
  6769                           
  6770                           ;usart.c: 67:         RCSTA1bits.CREN = 1;
  6771  0016C2  88AC               	bsf	4012,4,c	;volatile
  6772                           
  6773                           ;usart.c: 68:     }
  6774  0016C4  D002               	goto	i2l2071
  6775  0016C6                     i2l541:
  6776                           
  6777                           ;usart.c: 70:     {;usart.c: 71:         result = RCREG1;
  6778  0016C6  CFAF F036          	movff	4015,Read1USART@result	;volatile
  6779  0016CA                     i2l2071:
  6780                           
  6781                           ;usart.c: 74:     return result;
  6782  0016CA  5036               	movf	Read1USART@result,w,c
  6783  0016CC  0012               	return		;funcret
  6784  0016CE                     __end_of_Read1USART:
  6785                           	opt callstack 0
  6786  0000                     
  6787                           	psect	rparam
  6788  0000                     
  6789                           	psect	temp
  6790  000059                     btemp:
  6791                           	opt callstack 0
  6792  000059                     	ds	1
  6793  0000                     int$flags	set	btemp
  6794  0000                     wtemp8	set	btemp+1
  6795  0000                     ttemp5	set	btemp+1
  6796  0000                     ttemp6	set	btemp+4
  6797  0000                     ttemp7	set	btemp+8
  6798                           tosu	equ	0xFFF
  6799                           tosh	equ	0xFFE
  6800                           tosl	equ	0xFFD
  6801                           stkptr	equ	0xFFC
  6802                           pclatu	equ	0xFFB
  6803                           pclath	equ	0xFFA
  6804                           pcl	equ	0xFF9
  6805                           tblptru	equ	0xFF8
  6806                           tblptrh	equ	0xFF7
  6807                           tblptrl	equ	0xFF6
  6808                           tablat	equ	0xFF5
  6809                           prodh	equ	0xFF4
  6810                           prodl	equ	0xFF3
  6811                           indf0	equ	0xFEF
  6812                           postinc0	equ	0xFEE
  6813                           postdec0	equ	0xFED
  6814                           preinc0	equ	0xFEC
  6815                           plusw0	equ	0xFEB
  6816                           fsr0h	equ	0xFEA
  6817                           fsr0l	equ	0xFE9
  6818                           wreg	equ	0xFE8
  6819                           indf1	equ	0xFE7
  6820                           postinc1	equ	0xFE6
  6821                           postdec1	equ	0xFE5
  6822                           preinc1	equ	0xFE4
  6823                           plusw1	equ	0xFE3
  6824                           fsr1h	equ	0xFE2
  6825                           fsr1l	equ	0xFE1
  6826                           bsr	equ	0xFE0
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           preinc2	equ	0xFDC
  6831                           plusw2	equ	0xFDB
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      88
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_read_i2c
    _main->_write_i2c
    _read_i2c->___aldiv
    _i2c_Restart->_i2c_Wait
    _i2c_Read->_i2c_Wait
    _WriteSTLED316SVibMode->_STLED316s_SPI_SendData
    _ToggleVIB_Mode->_write_i2c
    _write_i2c->___aldiv
    _i2c_Write->_i2c_Wait
    _i2c_Stop->_i2c_Wait
    _i2c_Start->_i2c_Wait
    _i2c_Address->_i2c_Wait
    _MotorPosition_Init->_WriteSTLED316SErr
    _InitSTLED316->_STLED316s_SPI_SendData
    _Homing_Again_Manual->_WriteSTLED316SData
    _WriteSTLED316SData->___awdiv
    _Homing_Again_Auto->_WriteSTLED316SErr
    _Homing_Again_Auto->_WriteSTLED316SMode
    _readWeighingData->_flushOut
    _WriteSTLED316SMode->_STLED316s_SPI_SendData
    _WriteSTLED316SErr->_STLED316s_SPI_SendData

Critical Paths under _high_isr in COMRAM

    _high_isr->_Read1USART
    _high_isr->i2_Write1USART

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   16872
                                             26 COMRAM     2     2      0
                  _Homing_Again_Auto
                _Homing_Again_Manual
                       _InitSTLED316
                         _InitTimer1
                 _MotorPosition_Init
                     _ToggleVIB_Mode
                        _Write1USART
                 _WriteSTLED316SData
                  _WriteSTLED316SErr
              _WriteSTLED316SVibMode
                              _flush
                           _flushOut
                           _i2c_Init
                               _init
                          _initMotor
                          _initUSART
                           _read_i2c
                          _write_i2c
 ---------------------------------------------------------------------------------
 (1) _read_i2c                                             6     2      4    1794
                                             20 COMRAM     6     2      4
                            ___aldiv
                        _i2c_Address
                           _i2c_Read
                        _i2c_Restart
                          _i2c_Start
                           _i2c_Stop
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (2) _i2c_Restart                                          0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Read                                             4     2      2      45
                                              7 COMRAM     4     2      2
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flush                                                2     2      0      68
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _WriteSTLED316SVibMode                                1     1      0     227
                                             12 COMRAM     1     1      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (1) _ToggleVIB_Mode                                       0     0      0    2660
                          _write_i2c
 ---------------------------------------------------------------------------------
 (1) _write_i2c                                            6     0      6    2660
                                             20 COMRAM     6     0      6
                            ___aldiv
                        _i2c_Address
                          _i2c_Start
                           _i2c_Stop
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (2) _i2c_Write                                            1     1      0      22
                                              7 COMRAM     1     1      0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Stop                                             0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Start                                            0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Address                                          3     2      1     296
                                              7 COMRAM     3     2      1
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (3) _i2c_Wait                                             1     1      0       0
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              6 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _MotorPosition_Init                                   2     2      0    1238
                                             15 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                  _WriteSTLED316SErr
                          _delay_1ms
 ---------------------------------------------------------------------------------
 (1) _InitTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSTLED316                                         5     5      0     381
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (1) _Homing_Again_Manual                                  2     2      0    3650
                                             23 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                 _WriteSTLED316SData
                  _WriteSTLED316SErr
                          _delay_1ms
                   _readWeighingData
 ---------------------------------------------------------------------------------
 (1) _WriteSTLED316SData                                   9     6      3    2254
                                             14 COMRAM     9     6      3
                            _Get7Seg
             _STLED316s_SPI_SendData
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              6 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Get7Seg                                              5     3      2     207
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Homing_Again_Auto                                    2     2      0    1623
                                             15 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                  _WriteSTLED316SErr
                 _WriteSTLED316SMode
                          _delay_1ms
                   _readWeighingData
 ---------------------------------------------------------------------------------
 (2) _readWeighingData                                     2     2      0     158
                                              8 COMRAM     2     2      0
                        _Write1USART
                           _flushOut
 ---------------------------------------------------------------------------------
 (1) _flushOut                                             2     2      0      68
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Write1USART                                          1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _delay_1ms                                            3     1      2    1011
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteSTLED316SMode                                   3     3      0     227
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (1) _WriteSTLED316SErr                                    3     3      0     227
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (2) _STLED316s_SPI_SendData                               6     6      0     205
                                              6 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Read_IR                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _MotorON_PWM                                          0     0      0       0
                        _Set_RG3_PWM
 ---------------------------------------------------------------------------------
 (3) _Set_RG3_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorBREAK                                           0     0      0       0
                        _Clr_RG3_PWM
 ---------------------------------------------------------------------------------
 (3) _Clr_RG3_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                             5     5      0     309
                                              1 COMRAM     5     5      0
                         _Read1USART
                      i2_Write1USART
 ---------------------------------------------------------------------------------
 (6) i2_Write1USART                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Read1USART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Homing_Again_Auto
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _WriteSTLED316SErr
       _STLED316s_SPI_SendData
     _WriteSTLED316SMode
       _STLED316s_SPI_SendData
     _delay_1ms
     _readWeighingData
       _Write1USART
       _flushOut
   _Homing_Again_Manual
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _WriteSTLED316SData
       _Get7Seg
       _STLED316s_SPI_SendData
       ___awdiv
       ___awmod
     _WriteSTLED316SErr
       _STLED316s_SPI_SendData
     _delay_1ms
     _readWeighingData
       _Write1USART
       _flushOut
   _InitSTLED316
     _STLED316s_SPI_SendData
   _InitTimer1
   _MotorPosition_Init
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _WriteSTLED316SErr
       _STLED316s_SPI_SendData
     _delay_1ms
   _ToggleVIB_Mode
     _write_i2c
       ___aldiv
       _i2c_Address
         _i2c_Wait
       _i2c_Start
         _i2c_Wait
       _i2c_Stop
         _i2c_Wait
       _i2c_Write
         _i2c_Wait
   _Write1USART
   _WriteSTLED316SData
     _Get7Seg
     _STLED316s_SPI_SendData
     ___awdiv
     ___awmod
   _WriteSTLED316SErr
     _STLED316s_SPI_SendData
   _WriteSTLED316SVibMode
     _STLED316s_SPI_SendData
   _flush
   _flushOut
   _i2c_Init
   _init
   _initMotor
   _initUSART
   _read_i2c
     ___aldiv
     _i2c_Address
       _i2c_Wait
     _i2c_Read
       _i2c_Wait
     _i2c_Restart
       _i2c_Wait
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Write
       _i2c_Wait
   _write_i2c
     ___aldiv
     _i2c_Address
       _i2c_Wait
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Write
       _i2c_Wait

 _high_isr (ROOT)
   _Read1USART
   i2_Write1USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      20       5       20.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      58       1       93.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      78      12        0.0%
DATA                 0      0      78       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jun 01 13:49:08 2020

                              _i 0013                    ??_i2c_Address 003E  
                   ___awdiv@sign 0041                    ?_InitSTLED316 0036  
                   __CFG_CP0$OFF 000000                      i2c_Read@ack 003F  
                            l212 0704                              l242 0966  
                            l234 08D8                              l154 038C  
                            l219 0796                              l164 03E2  
                            l229 088E                              l165 03E8  
                            l342 0C44                              l318 0A4C  
                            l423 0F62                              l503 1662  
                            l504 1664                              l192 05D6  
                            l193 05D2                              l185 0596  
                            l177 0534                              l442 10EE  
                            l290 16AA                              l179 0548  
                            l349 0D4C                              l197 05F2  
                            l189 05B2                              l390 1424  
                            l535 175A                              l388 13FE  
                            _GIE 007F97                              _PR4 000F77  
                            _NUM 0017           __size_ofi2_Write1USART 000C  
                   ___awmod@sign 0041                              wreg 000FE8  
                     _TXSTA1bits 000FAD                    ??_i2c_Restart 003D  
                           l3001 16F4                             l3023 146A  
                           l3041 0EC0                             l3201 0E30  
                           l3051 0F06                             l3043 0ECE  
                           l3053 0F14                             l3045 0EDC  
                           l3301 0AFE                             l3047 0EEA  
                           l3039 0EB2                             l3049 0EF8  
                           l3057 0F22                             l3209 0E52  
                           l3411 0CF6                             l3403 0CD4  
                           l3227 1620                             l3325 0B72  
                           l3341 0BB4                             l3261 0A30  
                           l3335 0B98                             l3247 159C  
                           l3433 0D60                             l3337 0BAE  
                           l3249 15A8                             l2715 142A  
                           l3371 0C28                             l3195 0E00  
                           l3187 0DDE                             l3523 023C  
                           l2725 1438                             l2709 1426  
                           l3429 0D5A                             l2741 12AA  
                           l3357 0BF8                             l3293 0ADC  
                           l2821 0FD2                             l2813 0FA4  
                           l2751 12BE                             l2743 12AE  
                           l2735 129E                             l2911 136E  
                           l2903 134E                             l3287 0AAC  
                           l3279 0A8A                             l2831 1006  
                           l2807 0F8C                             l3631 0486  
                           l3623 0460                             l3449 0DA2  
                           l2753 12C2                             l2745 12B2  
                           l2737 12A2                             l2761 131C  
                           l2905 1356                             l3625 0468  
                           l3545 02C2                             l2691 15EE  
                           l2755 12C6                             l2747 12B6  
                           l2739 12A6                             l2851 122C  
                           l2915 1378                             l2819 0FC6  
                           l2835 1014                             l3459 15BE  
                           l3707 0644                             l3627 0476  
                           l3635 0490                             l3571 033C  
                           l3397 0CA4                             l3389 0C82  
                           l2749 12BA                             l3717 0678  
                           l3901 09FE                             l3661 0520  
                           l3629 047E                             l3637 04C0  
                           l3573 0344                             l3565 031E  
                           l2759 12CC                             l2863 1252  
                           l2919 1386                             l2839 102A  
                           l3815 086A                             l3751 0712  
                           l3575 034C                             l3567 032C  
                           l2961 1052                             l2865 125A  
                           l2857 123C                             l2937 1172  
                           l3825 0890                             l3761 0736  
                           l3753 0718                             l3737 06E0  
                           l3569 0334                             l2971 1098  
                           l2963 1060                             l2883 1292  
                           l2875 127A                             l2939 1174  
                           l3851 08F6                             l3835 08A6  
                           l3843 08B4                             l3763 073E  
                           l3747 0706                             l3579 0356  
                           l2973 10A6                             l2965 106E  
                           l3861 091C                             l3837 08AA  
                           l3829 0896                             l3765 0746  
                           l3773 0760                             l2967 107C  
                           l2879 1284                             l2895 1334  
                           l3863 0924                             l3839 08AE  
                           l3783 07BA                             l3767 074E  
                           l3759 0728                             l2969 108A  
                           l2977 10B4                             l3865 092C  
                           l3857 0906                             l3769 0756  
                           l2899 1340                             l3859 090E  
                           l3699 0632                             l2989 1696  
                           l3869 0936                             l3877 0988  
                           l3895 09BC                             l3889 09B8  
                           l3897 09F0                             l3899 09F8  
                           u2000 15E4                             u2030 028E  
                           u2040 029A                             u2210 059A  
                           u2300 05F6                             u2060 02F2  
                           u1520 125E                             u2320 063C  
                           u2240 05B6                             u2160 0554  
                           u1370 1614                             u1460 0FD6  
                           u2180 057C                             u2270 05D6  
                           u1384 1410                             u1385 140C  
                           u1650 1490                             u2290 05E6  
                           u1580 135A                             u1850 0BBC  
                           _PEN2 007B5A                             u1675 11B2  
                           u2707 0E12                             u2717 0E84  
                           u1870 0BCC                             u2807 0CB6  
                           u2727 0A3C                             u1960 0D66  
                           u2817 0D3E                             u2737 0A6C  
                           u2827 0D96                             u2747 0ABE  
                           u2667 01E2                             u1980 0D76  
                           u2837 169C                             u2757 0B64  
                           u2677 056A                             u2767 0BA2  
                           u2687 0852                             u2777 0BEC  
                           u2697 0DC0                             u2787 0C34  
                           u2797 0C64                             _SEN2 007B58  
                           _TMR1 000FCE                             _Busy 0031  
                           _Stop 0033                             _data 002F  
                           _main 018A                             _init 1498  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
             _MotorPosition_Init 0DB0                             btemp 0059  
                           start 0186                  __end_of_Get7Seg 1320  
                  __CFG_IESO$OFF 000000      __end_of_Homing_Again_Manual 0C06  
                   ___param_bank 000000                     high_isr@Temp 0039  
            ?_MotorPosition_Init 0036                  __end_of_Read_IR 16FE  
                 ??_InitSTLED316 0042                    __CFG_PLLDIV$1 000000  
                   _BAUDCON1bits 000F7E                  __end_of___aldiv 103C  
                          ?_main 0036                            ?_init 0036  
                __end_of___awdiv 129C                  __end_of___awmod 1390  
                ___awdiv@divisor 003E                            _T1CON 000FCD  
                          _T4CON 000F76                   __CFG_DEBUG$OFF 000000  
                          _RCEN2 007B5B                            i2l259 0120  
                          i2l268 00BA                            i2l541 16C6  
                          i2l285 0164                            i2l535 1772  
                          i2l287 017A                  ___awdiv@counter 0040  
                          _RSEN2 007B59                            _ETemp 0021  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TRISF 000F97  
                          _TRISG 000F98              __end_of_i2c_Address 1728  
                 __CFG_FCMEN$OFF 000000             ??_MotorPosition_Init 0045  
                          _flush 15B6                      _Clr_RG3_PWM 17A4  
                     _Read1USART 16B4                 _TMR1IF_triggered 0029  
                          tablat 000FF5         ??_STLED316s_SPI_SendData 003C  
            __end_of_i2c_Restart 1794                            ttemp5 005A  
                          ttemp6 005D                            ttemp7 0061  
                          status 000FD8                            wtemp8 005A  
                  i2_Write1USART 176C                    ??_Set_RG3_PWM 003C  
          _WriteSTLED316SVibMode 1574                  __initialization 152E  
                     _InitTimer1 16CE                     __end_of_main 0A1C  
                   __end_of_init 14E4                 __end_of_i2c_Init 1714  
               __end_of_i2c_Read 166E                 __end_of_i2c_Wait 173A  
               __end_of_i2c_Stop 179C        __size_of_readWeighingData 004E  
                         ??_main 0050                           ??_init 003C  
                  __activetblptr 000002                           _ACKEN2 007B5C  
                         _ACKDT2 007B5D                           ?_flush 0036  
                         _CCPR4L 000F74                 ___awdiv@dividend 003C  
             __size_of_i2c_Start 0008                        ??_Get7Seg 003E  
                         i2l2071 16CA                           i2l4001 0104  
             __size_of_i2c_Write 000C                           i2l4021 0168  
                         i2l4013 012A                           i2l4007 011A  
                         i2l4019 0154                   __CFG_WDTEN$OFF 000000  
                         i2l3945 004C                           i2l3947 0052  
                         i2l3967 009E                           i2l3995 00F4  
                         i2l3979 00C0                           i2l3987 00E2  
                         _RCREG1 000FAF                           _SPBRG1 000FB0  
                         _TMR1IE 007CE8                           _TMR1IF 007CF0  
                         _TRISD5 007CAD                           _TRISD6 007CAE  
                 ?i2_Write1USART 0036                           _TXREG1 000FAE  
                  ??_MotorON_PWM 003C                       _MotorBREAK 1782  
                      ??_Read_IR 003E                  read_i2c@address 004A  
                         _OpMode 002E                   __CFG_XINST$OFF 000000  
               __end_of_high_isr 0186                        ??___aldiv 0044  
                      ??___awdiv 0040                   __CFG_STVREN$ON 000000  
                      ??___awmod 0040                   _PWM_Duty_Cycle 002A  
               __end_of_flushOut 1616              __end_of_Set_RG3_PWM 176C  
               __end_of_read_i2c 13F8                      _i2c_Address 1714  
                         clear_0 1554                           clear_1 1560  
               ___awdiv@quotient 0042                  ___awmod@divisor 003E  
                ___awmod@counter 0040                 Read1USART@result 0036  
     __end_of_WriteSTLED316SData 118E       __end_of_WriteSTLED316SMode 0F70  
                         flush@i 003C                    i2c_Write@data 003D  
                   __pdataCOMRAM 0052                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                    _i2c_Restart 178C                      ?_Read1USART 0036  
           __end_of_InitSTLED316 1218                       __accesstop 0060  
        __end_of__initialization 1566  __size_of_STLED316s_SPI_SendData 0052  
              _WriteSTLED316SErr 103C                    ___rparam_used 000001  
         ?_WriteSTLED316SVibMode 0036               ?_WriteSTLED316SErr 0036  
                 __pcstackCOMRAM 0036                      ?_InitTimer1 0036  
            __end_of_MotorON_PWM 1782                    __end_of_flush 15E6  
             __size_of_delay_1ms 0020                __end_of_i2c_Start 17A4  
            ??_WriteSTLED316SErr 0042                __end_of_i2c_Write 1754  
                        ??_flush 003C                        ?_i2c_Init 0036  
                      ?_i2c_Read 003D                       __pbssBANK0 0060  
                      ?_i2c_Wait 0036                  ??i2_Write1USART 0036  
                      ?_i2c_Stop 0036               __size_of_initUSART 0026  
      __end_of_WriteSTLED316SErr 10FC                    ??_Write1USART 003C  
             __size_of_initMotor 000E                      ?_MotorBREAK 0036  
                    _Set_RG3_PWM 1760          __size_of_ToggleVIB_Mode 002E  
                        _CCP4CON 000F73              __size_of_Read1USART 001A  
         _STLED316s_SPI_SendData 13F8                 _readWeighingData 144A  
             i2c_Address@address 003E                  __CFG_WDTPS$2048 000000  
                        _SPBRGH1 000F7F                          _SSP2ADD 000F6E  
                        _SSP2BUF 000F6F                          _NUM_REC 0015  
            __size_of_InitTimer1 0018                     ?_Clr_RG3_PWM 0036  
                      ?_high_isr 0036                       ??_i2c_Init 003C  
                     ??_i2c_Read 003F                          _PWM_reg 0058  
                     ??_i2c_Wait 003C                          _Get7Seg 129C  
    WriteSTLED316SVibMode@v_mode 0042                       ??_i2c_Stop 003D  
              __end_of_delay_1ms 16B4                i2Write1USART@data 0036  
                      ?_flushOut 0036                        ?_read_i2c 004A  
                    _Serial_Flag 0035               __size_of_write_i2c 004A  
                    _MotorON_PWM 1778                          _Read_IR 16E6  
          WriteSTLED316SMode@msg 0044                          __Hparam 0000  
                        __Lparam 0000              __end_of_Write1USART 1760  
     WriteSTLED316SData@NUM_DIG0 0047       WriteSTLED316SData@NUM_DIG1 0049  
                        ___aldiv 0F70                      _Motor_Speed 001F  
                        ___awdiv 1218                          ___awmod 1320  
                   Get7Seg@Digit 003C     __size_of_Homing_Again_Manual 01EA  
                        __pcinit 152E                          __ramtop 1000  
              __end_of_initUSART 1694                          __ptext0 018A  
                        __ptext1 1390                          __ptext2 178C  
                        __ptext3 1644                          __ptext4 166E  
                        __ptext5 173A                          __ptext6 1498  
                        __ptext7 16FE                          __ptext8 15B6  
                        __ptext9 1574                __end_of_initMotor 1748  
                      _T3CONbits 000F79              __size_of_MotorBREAK 000A  
               ___awmod@dividend 003C                 ___aldiv@dividend 003C  
                      _T4CONbits 000F76                    delay_1ms@time 003C  
              __CFG_MSSPMSK$MSK5 000000            __size_of_InitSTLED316 008A  
    __size_of_MotorPosition_Init 00EC                       _pause_Time 002D  
                      _EAdd_High 0025                       ??_high_isr 0037  
           end_of_initialization 1566       __size_of_WriteSTLED316SErr 00C0  
           i2c_Address@l_address 003F                       ??_flushOut 003C  
                     ??_read_i2c 004E                    __Lmediumconst 0000  
        WriteSTLED316SData@data3 004B          WriteSTLED316SData@data4 004C  
               ___aldiv@quotient 0046                          postdec1 000FE5  
                        postinc0 000FEE                     ?_i2c_Address 003D  
                   _InitSTLED316 118E                        _PORTAbits 000F80  
                      _PORTBbits 000F81                __end_of_write_i2c 152E  
               __CFG_CPUDIV$OSC1 000000                        _TRISCbits 000F94  
                   ?_i2c_Restart 0036                     ??_Read1USART 0036  
             _WriteSTLED316SData 10FC          ??_WriteSTLED316SVibMode 0042  
             _WriteSTLED316SMode 0E9C                      _Write1USART 1754  
            ?_WriteSTLED316SData 0044              ?_WriteSTLED316SMode 0036  
                   ??_InitTimer1 003C                   _ToggleVIB_Mode 1616  
                      _Device_ID 001B                      _Vmotor_Time 0056  
                  __pidataCOMRAM 17AC               __end_of_Read1USART 16CE  
                  _Serial_Buffer 0001                        _i2c_Start 179C  
                      _i2c_Write 1748             ??_WriteSTLED316SData 0047  
            start_initialization 152E             ??_WriteSTLED316SMode 0042  
             __end_of_InitTimer1 16E6             __size_of_Clr_RG3_PWM 0008  
       __end_of_readWeighingData 1498                __size_of_i2c_Init 0016  
              __size_of_i2c_Read 002A                __size_of_i2c_Wait 0012  
                   ??_MotorBREAK 003C                __size_of_i2c_Stop 0008  
         __end_of_ToggleVIB_Mode 1644                     ?_Set_RG3_PWM 0036  
        ?_STLED316s_SPI_SendData 0036                       ?_i2c_Start 0036  
                     ?_i2c_Write 0036                      __pbssCOMRAM 0001  
             __end_of_MotorBREAK 178C              __CFG_CCP2MX$DEFAULT 000000  
                       ?_Get7Seg 003C              _Homing_Again_Manual 0A1C  
              __size_of_high_isr 017E            __end_ofi2_Write1USART 1778  
                   ?_MotorON_PWM 0036                         ?_Read_IR 003C  
              __size_of_flushOut 0030                        _delay_1ms 1694  
              __size_of_read_i2c 0068                _Homing_Again_Auto 0C06  
                ?_ToggleVIB_Mode 0036   __end_of_STLED316s_SPI_SendData 144A  
             ?_Homing_Again_Auto 0036                        __pintcode 0008  
                       ?___aldiv 003C                         ?___awdiv 003C  
                       ?___awmod 003C             ?_Homing_Again_Manual 0036  
                   _errorcounter 0052              ??_Homing_Again_Auto 0045  
           __size_of_i2c_Address 0014             WriteSTLED316SErr@msg 0044  
                      _initUSART 166E                        _initMotor 173A  
                    Get7Seg@Data 0040                   __size_of_flush 0030  
                Write1USART@data 003C             __size_of_i2c_Restart 0008  
                ___aldiv@divisor 0040                  ___aldiv@counter 0044  
      __end_of_Homing_Again_Auto 0DB0                         _LATAbits 000F89  
                       _EAdd_Low 0023                         _LATCbits 000F8B  
                       _LATDbits 000F8C                         _LATGbits 000F8F  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                     ?_delay_1ms 003C                readWeighingData@i 003E  
                       i2u250_40 0030                         i2u264_40 0142  
                       i2u256_40 0098                         _PIR1bits 000F9E  
                       i2u258_40 00CE                         _RCONbits 000FD0  
                       _SSP2CON1 000F6C                         _SSP2CON2 000F6B  
                       _SSP2STAT 000F6D            ??_Homing_Again_Manual 004D  
                     _ADCON0bits 000FC2                       _ADCON1bits 000FC1  
                      high_isr@c 003A                        high_isr@i 003B  
                    ??_i2c_Start 003D                      ??_i2c_Write 003D  
     __end_of_MotorPosition_Init 0E9C                       ?_initUSART 0036  
          _delay_motor_stop_time 002B                       ?_initMotor 0036  
                   _Serial_GData 0034                        _write_i2c 14E4  
                      copy_data0 1542           InitSTLED316@Brightness 0044  
                   _Serial_Count 0027                         _i2c_Init 16FE  
                       _i2c_Read 1644                         _i2c_Wait 1728  
                       _i2c_Stop 1794                 __size_of_Get7Seg 0084  
                   ?_Write1USART 0036   __size_of_WriteSTLED316SVibMode 0042  
  __end_of_WriteSTLED316SVibMode 15B6                        flushOut@i 003C  
                     _ANCON0bits 000FC1                         __Hrparam 0000  
               __size_of_Read_IR 0018                         __Lrparam 0000  
           __size_of_Set_RG3_PWM 000C                 __size_of___aldiv 00CC  
               __size_of___awdiv 0084                 __size_of___awmod 0070  
                 _vibration_mode 0030                         __ptext10 1616  
                       __ptext11 14E4                         __ptext20 118E  
                       __ptext12 1748                         __ptext21 0A1C  
                       __ptext13 1794                         __ptext30 1694  
                       __ptext22 10FC                         __ptext14 179C  
                       __ptext31 0E9C                         __ptext23 1320  
                       __ptext15 1714                         __ptext40 176C  
                       __ptext32 103C                         __ptext24 1218  
                       __ptext16 1728                         __ptext41 16B4  
                       __ptext33 13F8                         __ptext25 129C  
                       __ptext17 0F70                         __ptext34 16E6  
                       __ptext26 0C06                         __ptext18 0DB0  
                       __ptext35 1778                         __ptext27 144A  
                       __ptext19 16CE                         __ptext36 1760  
                       __ptext28 15E6                         __ptext37 1782  
                       __ptext29 1754                         __ptext38 17A4  
                     ?_write_i2c 004A                 write_i2c@address 004A  
                       _high_isr 0008                read_i2c@read_byte 004E  
                       _flushOut 15E6                         _read_i2c 1390  
                  __size_of_main 0892       __size_of_Homing_Again_Auto 01AA  
                  __size_of_init 004C                ?_readWeighingData 0036  
                    ??_delay_1ms 003E               ??_readWeighingData 003E  
                       _vib_Time 002C             __size_of_MotorON_PWM 000A  
          _Motor_Stop_Delay_Time 001D                         int$flags 0059  
              _Serial_Buffer_Out 0060       STLED316s_SPI_SendData@Data 003E  
                     _INTCONbits 000FF2                      ??_initUSART 003C  
    __size_of_WriteSTLED316SData 0092       STLED316s_SPI_SendData@temp 003F  
    __size_of_WriteSTLED316SMode 00D4                      ??_initMotor 003C  
                  ??_Clr_RG3_PWM 003C             __CFG_FOSC$INTOSCPLLO 000000  
                       intlevel2 0000                     _motor_status 0032  
               ??_ToggleVIB_Mode 0050                  i2c_Address@mode 003D  
                     _RCSTA1bits 000FAC                       _OSCCONbits 000FD3  
       WriteSTLED316SData@v_mode 0046         WriteSTLED316SData@number 0044  
                     _IR_SENSORF 0011                 _Motor_Pause_Time 0019  
             _Serial_Temp_Buffer 0070          STLED316s_SPI_SendData@i 0040  
        STLED316s_SPI_SendData@t 0041                     ___aldiv@sign 0045  
                     _WDTCONbits 000FC0                      ??_write_i2c 0050  
            i2c_Read@i2cReadData 0040                    write_i2c@data 004E  
            __end_of_Clr_RG3_PWM 17AC             __size_of_Write1USART 000C  
