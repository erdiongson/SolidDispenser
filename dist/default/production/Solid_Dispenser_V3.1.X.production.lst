

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 18 16:48:47 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F65J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F65J50 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  0013DA                     __pidataCOMRAM:
    92                           	opt callstack 0
    93                           
    94                           ;initializer for _Vmotor_Time
    95  0013DA  07D0               	dw	2000
    96                           
    97                           ;initializer for _PWM_reg
    98  0013DC  3F                 	db	63
    99                           
   100                           ;initializer for _OpMode
   101  0013DD  02                 	db	2
   102  0000                     _LATAbits	set	3977
   103  0000                     _LATGbits	set	3983
   104  0000                     _T4CONbits	set	3958
   105  0000                     _CCPR4L	set	3956
   106  0000                     _CCP4CON	set	3955
   107  0000                     _T4CON	set	3958
   108  0000                     _T3CONbits	set	3961
   109  0000                     _PR4	set	3959
   110  0000                     _RCREG1	set	4015
   111  0000                     _TXREG1	set	4014
   112  0000                     _SPBRGH1	set	3967
   113  0000                     _SPBRG1	set	4016
   114  0000                     _PIE1bits	set	3997
   115  0000                     _BAUDCON1bits	set	3966
   116  0000                     _TXSTA1bits	set	4013
   117  0000                     _TRISCbits	set	3988
   118  0000                     _OSCCONbits	set	4051
   119  0000                     _ANCON0bits	set	4033
   120  0000                     _ADCON1bits	set	4033
   121  0000                     _ADCON0bits	set	4034
   122  0000                     _TRISG	set	3992
   123  0000                     _TRISF	set	3991
   124  0000                     _TRISE	set	3990
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISA	set	3986
   129  0000                     _RCSTA1bits	set	4012
   130  0000                     _PIR1bits	set	3998
   131  0000                     _PORTAbits	set	3968
   132  0000                     _PORTBbits	set	3969
   133  0000                     _LATDbits	set	3980
   134  0000                     _WDTCONbits	set	4032
   135  0000                     _INTCONbits	set	4082
   136  0000                     _IPR1bits	set	3999
   137  0000                     _RCONbits	set	4048
   138  0000                     _LATCbits	set	3979
   139  0000                     _SSP2BUF	set	3951
   140  0000                     _SSP2STAT	set	3949
   141  0000                     _SSP2ADD	set	3950
   142  0000                     _SSP2CON2	set	3947
   143  0000                     _SSP2CON1	set	3948
   144  0000                     _ACKEN2	set	31580
   145  0000                     _ACKDT2	set	31581
   146  0000                     _RCEN2	set	31579
   147  0000                     _PEN2	set	31578
   148  0000                     _RSEN2	set	31577
   149  0000                     _SEN2	set	31576
   150  0000                     _TRISD6	set	31918
   151  0000                     _TRISD5	set	31917
   152                           
   153                           ; #config settings
   154  0000                     
   155                           	psect	cinit
   156  0011C0                     __pcinit:
   157                           	opt callstack 0
   158  0011C0                     start_initialization:
   159                           	opt callstack 0
   160  0011C0                     __initialization:
   161                           	opt callstack 0
   162                           
   163                           ; Initialize objects allocated to COMRAM (4 bytes)
   164                           ; load TBLPTR registers with __pidataCOMRAM
   165  0011C0  0EDA               	movlw	low __pidataCOMRAM
   166  0011C2  6EF6               	movwf	tblptrl,c
   167  0011C4  0E13               	movlw	high __pidataCOMRAM
   168  0011C6  6EF7               	movwf	tblptrh,c
   169  0011C8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   170  0011CA  6EF8               	movwf	tblptru,c
   171  0011CC  EE00  F04F         	lfsr	0,__pdataCOMRAM
   172  0011D0  EE10 F004          	lfsr	1,4
   173  0011D4                     copy_data0:
   174  0011D4  0009               	tblrd		*+
   175  0011D6  CFF5 FFEE          	movff	tablat,postinc0
   176  0011DA  50E5               	movf	postdec1,w,c
   177  0011DC  50E1               	movf	fsr1l,w,c
   178  0011DE  E1FA               	bnz	copy_data0
   179                           
   180                           ; Clear objects allocated to BANK0 (32 bytes)
   181  0011E0  EE00  F060         	lfsr	0,__pbssBANK0
   182  0011E4  0E20               	movlw	32
   183  0011E6                     clear_0:
   184  0011E6  6AEE               	clrf	postinc0,c
   185  0011E8  06E8               	decf	wreg,f,c
   186  0011EA  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to COMRAM (50 bytes)
   189  0011EC  EE00  F001         	lfsr	0,__pbssCOMRAM
   190  0011F0  0E32               	movlw	50
   191  0011F2                     clear_1:
   192  0011F2  6AEE               	clrf	postinc0,c
   193  0011F4  06E8               	decf	wreg,f,c
   194  0011F6  E1FD               	bnz	clear_1
   195  0011F8                     end_of_initialization:
   196                           	opt callstack 0
   197  0011F8                     __end_of__initialization:
   198                           	opt callstack 0
   199  0011F8  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   200  0011FA  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   201  0011FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  0011FE  6EF8               	movwf	tblptru,c
   203  001200  0100               	movlb	0
   204  001202  EF98  F000         	goto	_main	;jump to C main() function
   205                           
   206                           	psect	bssCOMRAM
   207  000001                     __pbssCOMRAM:
   208                           	opt callstack 0
   209  000001                     _Serial_Buffer:
   210                           	opt callstack 0
   211  000001                     	ds	16
   212  000011                     _i:
   213                           	opt callstack 0
   214  000011                     	ds	2
   215  000013                     _NUM_REC:
   216                           	opt callstack 0
   217  000013                     	ds	2
   218  000015                     _NUM:
   219                           	opt callstack 0
   220  000015                     	ds	2
   221  000017                     _Motor_Pause_Time:
   222                           	opt callstack 0
   223  000017                     	ds	2
   224  000019                     _Device_ID:
   225                           	opt callstack 0
   226  000019                     	ds	2
   227  00001B                     _Motor_Stop_Delay_Time:
   228                           	opt callstack 0
   229  00001B                     	ds	2
   230  00001D                     _Motor_Speed:
   231                           	opt callstack 0
   232  00001D                     	ds	2
   233  00001F                     _ETemp:
   234                           	opt callstack 0
   235  00001F                     	ds	2
   236  000021                     _EAdd_Low:
   237                           	opt callstack 0
   238  000021                     	ds	2
   239  000023                     _EAdd_High:
   240                           	opt callstack 0
   241  000023                     	ds	2
   242  000025                     _Serial_Count:
   243                           	opt callstack 0
   244  000025                     	ds	2
   245  000027                     _PWM_Duty_Cycle:
   246                           	opt callstack 0
   247  000027                     	ds	1
   248  000028                     _delay_motor_stop_time:
   249                           	opt callstack 0
   250  000028                     	ds	1
   251  000029                     _vib_Time:
   252                           	opt callstack 0
   253  000029                     	ds	1
   254  00002A                     _pause_Time:
   255                           	opt callstack 0
   256  00002A                     	ds	1
   257  00002B                     _IR_SENSORF:
   258                           	opt callstack 0
   259  00002B                     	ds	1
   260  00002C                     _data:
   261                           	opt callstack 0
   262  00002C                     	ds	1
   263  00002D                     _vibration_mode:
   264                           	opt callstack 0
   265  00002D                     	ds	1
   266  00002E                     _Busy:
   267                           	opt callstack 0
   268  00002E                     	ds	1
   269  00002F                     _motor_status:
   270                           	opt callstack 0
   271  00002F                     	ds	1
   272  000030                     _Stop:
   273                           	opt callstack 0
   274  000030                     	ds	1
   275  000031                     _Serial_GData:
   276                           	opt callstack 0
   277  000031                     	ds	1
   278  000032                     _Serial_Flag:
   279                           	opt callstack 0
   280  000032                     	ds	1
   281                           
   282                           	psect	dataCOMRAM
   283  00004F                     __pdataCOMRAM:
   284                           	opt callstack 0
   285  00004F                     _Vmotor_Time:
   286                           	opt callstack 0
   287  00004F                     	ds	2
   288  000051                     _PWM_reg:
   289                           	opt callstack 0
   290  000051                     	ds	1
   291  000052                     _OpMode:
   292                           	opt callstack 0
   293  000052                     	ds	1
   294                           
   295                           	psect	bssBANK0
   296  000060                     __pbssBANK0:
   297                           	opt callstack 0
   298  000060                     _Serial_Buffer_Out:
   299                           	opt callstack 0
   300  000060                     	ds	16
   301  000070                     _Serial_Temp_Buffer:
   302                           	opt callstack 0
   303  000070                     	ds	16
   304                           
   305                           	psect	cstackCOMRAM
   306  000033                     __pcstackCOMRAM:
   307                           	opt callstack 0
   308  000033                     Read1USART@result:
   309                           	opt callstack 0
   310  000033                     i2Write1USART@data:
   311                           	opt callstack 0
   312                           
   313                           ; 1 bytes @ 0x0
   314  000033                     	ds	1
   315  000034                     ??_high_isr:
   316                           
   317                           ; 1 bytes @ 0x1
   318  000034                     	ds	2
   319  000036                     high_isr@Temp:
   320                           	opt callstack 0
   321                           
   322                           ; 1 bytes @ 0x3
   323  000036                     	ds	1
   324  000037                     high_isr@c:
   325                           	opt callstack 0
   326                           
   327                           ; 1 bytes @ 0x4
   328  000037                     	ds	1
   329  000038                     high_isr@i:
   330                           	opt callstack 0
   331                           
   332                           ; 1 bytes @ 0x5
   333  000038                     	ds	1
   334  000039                     ??_STLED316s_SPI_SendData:
   335  000039                     ??_i2c_Wait:
   336  000039                     ?___awdiv:
   337                           	opt callstack 0
   338  000039                     ?___awmod:
   339                           	opt callstack 0
   340  000039                     ?___aldiv:
   341                           	opt callstack 0
   342  000039                     Write1USART@data:
   343                           	opt callstack 0
   344  000039                     delay_1ms@time:
   345                           	opt callstack 0
   346  000039                     Get7Seg@Digit:
   347                           	opt callstack 0
   348  000039                     flush@i:
   349                           	opt callstack 0
   350  000039                     flushOut@i:
   351                           	opt callstack 0
   352  000039                     ___awdiv@dividend:
   353                           	opt callstack 0
   354  000039                     ___awmod@dividend:
   355                           	opt callstack 0
   356  000039                     ___aldiv@dividend:
   357                           	opt callstack 0
   358                           
   359                           ; 4 bytes @ 0x6
   360  000039                     	ds	1
   361  00003A                     ?_i2c_Read:
   362                           	opt callstack 0
   363  00003A                     i2c_Write@data:
   364                           	opt callstack 0
   365  00003A                     i2c_Address@mode:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0x7
   369  00003A                     	ds	1
   370  00003B                     ??_delay_1ms:
   371  00003B                     ??_Get7Seg:
   372  00003B                     i2c_Address@address:
   373                           	opt callstack 0
   374  00003B                     STLED316s_SPI_SendData@Data:
   375                           	opt callstack 0
   376  00003B                     readWeighingData@i:
   377                           	opt callstack 0
   378  00003B                     ___awdiv@divisor:
   379                           	opt callstack 0
   380  00003B                     ___awmod@divisor:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x8
   384  00003B                     	ds	1
   385  00003C                     ??_MotorPosition_Init:
   386  00003C                     i2c_Address@l_address:
   387                           	opt callstack 0
   388  00003C                     i2c_Read@ack:
   389                           	opt callstack 0
   390  00003C                     STLED316s_SPI_SendData@temp:
   391                           	opt callstack 0
   392                           
   393                           ; 1 bytes @ 0x9
   394  00003C                     	ds	1
   395  00003D                     i2c_Read@i2cReadData:
   396                           	opt callstack 0
   397  00003D                     STLED316s_SPI_SendData@i:
   398                           	opt callstack 0
   399  00003D                     Get7Seg@Data:
   400                           	opt callstack 0
   401  00003D                     ___awdiv@counter:
   402                           	opt callstack 0
   403  00003D                     ___awmod@counter:
   404                           	opt callstack 0
   405  00003D                     ___aldiv@divisor:
   406                           	opt callstack 0
   407                           
   408                           ; 4 bytes @ 0xA
   409  00003D                     	ds	1
   410  00003E                     STLED316s_SPI_SendData@t:
   411                           	opt callstack 0
   412  00003E                     ___awdiv@sign:
   413                           	opt callstack 0
   414  00003E                     ___awmod@sign:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00003E                     	ds	1
   419  00003F                     ??_InitSTLED316:
   420  00003F                     ??_WriteSTLED316SErr:
   421  00003F                     ??_WriteSTLED316SMode:
   422  00003F                     ___awdiv@quotient:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0xC
   426  00003F                     	ds	2
   427  000041                     InitSTLED316@Brightness:
   428                           	opt callstack 0
   429  000041                     WriteSTLED316SMode@msg:
   430                           	opt callstack 0
   431  000041                     WriteSTLED316SErr@msg:
   432                           	opt callstack 0
   433  000041                     ___aldiv@counter:
   434                           	opt callstack 0
   435  000041                     WriteSTLED316SData@number:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0xE
   439  000041                     	ds	1
   440  000042                     ??_Homing_Again_Auto:
   441  000042                     ___aldiv@sign:
   442                           	opt callstack 0
   443                           
   444                           ; 1 bytes @ 0xF
   445  000042                     	ds	1
   446  000043                     WriteSTLED316SData@v_mode:
   447                           	opt callstack 0
   448  000043                     ___aldiv@quotient:
   449                           	opt callstack 0
   450                           
   451                           ; 4 bytes @ 0x10
   452  000043                     	ds	1
   453  000044                     WriteSTLED316SData@NUM_DIG0:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x11
   457  000044                     	ds	2
   458  000046                     WriteSTLED316SData@NUM_DIG1:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x13
   462  000046                     	ds	1
   463  000047                     ?_read_i2c:
   464                           	opt callstack 0
   465  000047                     write_i2c@address:
   466                           	opt callstack 0
   467  000047                     read_i2c@address:
   468                           	opt callstack 0
   469                           
   470                           ; 4 bytes @ 0x14
   471  000047                     	ds	1
   472  000048                     WriteSTLED316SData@data3:
   473                           	opt callstack 0
   474                           
   475                           ; 1 bytes @ 0x15
   476  000048                     	ds	1
   477  000049                     WriteSTLED316SData@data4:
   478                           	opt callstack 0
   479                           
   480                           ; 1 bytes @ 0x16
   481  000049                     	ds	1
   482  00004A                     ??_Homing_Again_Manual:
   483                           
   484                           ; 1 bytes @ 0x17
   485  00004A                     	ds	1
   486  00004B                     write_i2c@data:
   487                           	opt callstack 0
   488  00004B                     read_i2c@read_byte:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x18
   492  00004B                     	ds	2
   493  00004D                     ??_main:
   494                           
   495                           ; 1 bytes @ 0x1A
   496  00004D                     	ds	2
   497                           
   498 ;;
   499 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   500 ;;
   501 ;; *************** function _main *****************
   502 ;; Defined at:
   503 ;;		line 111 in file "main.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;Total ram usage:        2 bytes
   522 ;; Hardware stack levels required when called:    5
   523 ;; This function calls:
   524 ;;		_Homing_Again_Auto
   525 ;;		_Homing_Again_Manual
   526 ;;		_InitSTLED316
   527 ;;		_MotorPosition_Init
   528 ;;		_ToggleVIB_Mode
   529 ;;		_Write1USART
   530 ;;		_WriteSTLED316SData
   531 ;;		_WriteSTLED316SErr
   532 ;;		_flush
   533 ;;		_flushOut
   534 ;;		_i2c_Init
   535 ;;		_init
   536 ;;		_initMotor
   537 ;;		_initUSART
   538 ;;		_read_i2c
   539 ;;		_write_i2c
   540 ;; This function is called by:
   541 ;;		Startup code after reset
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text0
   546  000130                     __ptext0:
   547                           	opt callstack 0
   548  000130                     _main:
   549                           	opt callstack 26
   550                           
   551                           ;main.c: 113:     init();
   552                           
   553                           ;incstack = 0
   554  000130  EC70  F008         	call	_init	;wreg free
   555                           
   556                           ;main.c: 114:     InitSTLED316(0x77);
   557  000134  0E77               	movlw	119
   558  000136  ECE1  F006         	call	_InitSTLED316
   559                           
   560                           ;main.c: 115:     initMotor();
   561  00013A  ECB4  F009         	call	_initMotor	;wreg free
   562                           
   563                           ;main.c: 116:     i2c_Init();
   564  00013E  EC8E  F009         	call	_i2c_Init	;wreg free
   565                           
   566                           ;main.c: 117:     initUSART();
   567  000142  EC5E  F009         	call	_initUSART	;wreg free
   568                           
   569                           ;main.c: 118:     LATCbits.LATC1 = 0;
   570  000146  928B               	bcf	3979,1,c	;volatile
   571                           
   572                           ;main.c: 121:    RCONbits.IPEN = 1;
   573  000148  8ED0               	bsf	4048,7,c	;volatile
   574                           
   575                           ;main.c: 124:    IPR1bits.RCIP = 1;
   576  00014A  8A9F               	bsf	3999,5,c	;volatile
   577                           
   578                           ;main.c: 127:    INTCONbits.GIEH = 1;
   579  00014C  8EF2               	bsf	4082,7,c	;volatile
   580                           
   581                           ;main.c: 128:     INTCONbits.GIE=1;
   582  00014E  8EF2               	bsf	4082,7,c	;volatile
   583                           
   584                           ;main.c: 133:     WDTCONbits.SWDTEN = 1;
   585  000150  80C0               	bsf	4032,0,c	;volatile
   586                           
   587                           ;main.c: 135:     LATDbits.LATD0 = 1;
   588  000152  808C               	bsf	3980,0,c	;volatile
   589                           
   590                           ;main.c: 137:     WriteSTLED316SData(31, 0xFF);
   591  000154  0E00               	movlw	0
   592  000156  6E42               	movwf	WriteSTLED316SData@number+1,c
   593  000158  0E1F               	movlw	31
   594  00015A  6E41               	movwf	WriteSTLED316SData@number,c
   595  00015C  0EFF               	movlw	255
   596  00015E  6E43               	movwf	WriteSTLED316SData@v_mode,c
   597  000160  EC98  F006         	call	_WriteSTLED316SData	;wreg free
   598                           
   599                           ;main.c: 138:     _delay((unsigned long)((100)*(8000000/4000.0)));
   600  000164  0E02               	movlw	2
   601  000166  6E4E               	movwf	(??_main+1)& (0+255),c
   602  000168  0E04               	movlw	4
   603  00016A  6E4D               	movwf	??_main& (0+255),c
   604  00016C  0EBA               	movlw	186
   605  00016E                     u2507:
   606  00016E  2EE8               	decfsz	wreg,f,c
   607  000170  D7FE               	bra	u2507
   608  000172  2E4D               	decfsz	??_main& (0+255),f,c
   609  000174  D7FC               	bra	u2507
   610  000176  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   611  000178  D7FA               	bra	u2507
   612  00017A  D000               	nop2	
   613                           
   614                           ;main.c: 141:     NUM = 1;
   615  00017C  0E00               	movlw	0
   616  00017E  6E16               	movwf	_NUM+1,c
   617  000180  0E01               	movlw	1
   618  000182  6E15               	movwf	_NUM,c
   619                           
   620                           ;main.c: 142:     WriteSTLED316SData(NUM, vibration_mode);
   621  000184  C015  F041         	movff	_NUM,WriteSTLED316SData@number
   622  000188  C016  F042         	movff	_NUM+1,WriteSTLED316SData@number+1
   623  00018C  C02D  F043         	movff	_vibration_mode,WriteSTLED316SData@v_mode
   624  000190  EC98  F006         	call	_WriteSTLED316SData	;wreg free
   625                           
   626                           ;main.c: 143:     NUM_REC = 1;
   627  000194  0E00               	movlw	0
   628  000196  6E14               	movwf	_NUM_REC+1,c
   629  000198  0E01               	movlw	1
   630  00019A  6E13               	movwf	_NUM_REC,c
   631                           
   632                           ;main.c: 145:     vibration_mode = 1;
   633  00019C  0E01               	movlw	1
   634  00019E  6E2D               	movwf	_vibration_mode,c
   635                           
   636                           ;main.c: 147:     if (vibration_mode)
   637  0001A0  502D               	movf	_vibration_mode,w,c
   638  0001A2  B4D8               	btfsc	status,2,c
   639  0001A4  D002               	goto	l244
   640                           
   641                           ;main.c: 148:         LATDbits.LATD1 = 1;
   642  0001A6  828C               	bsf	3980,1,c	;volatile
   643  0001A8  D001               	goto	l3160
   644  0001AA                     l244:
   645                           
   646                           ;main.c: 150:         LATDbits.LATD1 = 0;
   647  0001AA  928C               	bcf	3980,1,c	;volatile
   648  0001AC                     l3160:
   649                           
   650                           ;main.c: 160:     ETemp = read_i2c(0x0020);
   651  0001AC  0E20               	movlw	32
   652  0001AE  6E47               	movwf	read_i2c@address,c
   653  0001B0  0E00               	movlw	0
   654  0001B2  6E48               	movwf	read_i2c@address+1,c
   655  0001B4  0E00               	movlw	0
   656  0001B6  6E49               	movwf	read_i2c@address+2,c
   657  0001B8  0E00               	movlw	0
   658  0001BA  6E4A               	movwf	read_i2c@address+3,c
   659  0001BC  ECE2  F007         	call	_read_i2c	;wreg free
   660  0001C0  C047  F01F         	movff	?_read_i2c,_ETemp
   661  0001C4  C048  F020         	movff	?_read_i2c+1,_ETemp+1
   662                           
   663                           ;main.c: 161:     Device_ID = ETemp & 0x00FF;
   664  0001C8  501F               	movf	_ETemp,w,c
   665  0001CA  6E19               	movwf	_Device_ID,c
   666  0001CC  6A1A               	clrf	_Device_ID+1,c
   667                           
   668                           ;main.c: 162:     if(Device_ID<0x31 || Device_ID>0x3A)
   669  0001CE  501A               	movf	_Device_ID+1,w,c
   670  0001D0  E104               	bnz	u1890
   671  0001D2  0E31               	movlw	49
   672  0001D4  5C19               	subwf	_Device_ID,w,c
   673  0001D6  A0D8               	btfss	status,0,c
   674  0001D8  D006               	goto	u1900
   675  0001DA                     u1890:
   676  0001DA  501A               	movf	_Device_ID+1,w,c
   677  0001DC  E104               	bnz	u1900
   678  0001DE  0E3B               	movlw	59
   679  0001E0  5C19               	subwf	_Device_ID,w,c
   680  0001E2  A0D8               	btfss	status,0,c
   681  0001E4  D012               	goto	l3172
   682  0001E6                     u1900:
   683                           
   684                           ;main.c: 163:     {;main.c: 164:         Device_ID=0x31;
   685  0001E6  0E00               	movlw	0
   686  0001E8  6E1A               	movwf	_Device_ID+1,c
   687  0001EA  0E31               	movlw	49
   688  0001EC  6E19               	movwf	_Device_ID,c
   689                           
   690                           ;main.c: 165:         write_i2c(0x0020, Device_ID);
   691  0001EE  0E20               	movlw	32
   692  0001F0  6E47               	movwf	write_i2c@address,c
   693  0001F2  0E00               	movlw	0
   694  0001F4  6E48               	movwf	write_i2c@address+1,c
   695  0001F6  0E00               	movlw	0
   696  0001F8  6E49               	movwf	write_i2c@address+2,c
   697  0001FA  0E00               	movlw	0
   698  0001FC  6E4A               	movwf	write_i2c@address+3,c
   699  0001FE  0E00               	movlw	0
   700  000200  6E4C               	movwf	write_i2c@data+1,c
   701  000202  0E31               	movlw	49
   702  000204  6E4B               	movwf	write_i2c@data,c
   703  000206  EC96  F008         	call	_write_i2c	;wreg free
   704  00020A                     l3172:
   705                           
   706                           ;main.c: 171:     ETemp = read_i2c(0x0060);
   707  00020A  0E60               	movlw	96
   708  00020C  6E47               	movwf	read_i2c@address,c
   709  00020E  0E00               	movlw	0
   710  000210  6E48               	movwf	read_i2c@address+1,c
   711  000212  0E00               	movlw	0
   712  000214  6E49               	movwf	read_i2c@address+2,c
   713  000216  0E00               	movlw	0
   714  000218  6E4A               	movwf	read_i2c@address+3,c
   715  00021A  ECE2  F007         	call	_read_i2c	;wreg free
   716  00021E  C047  F01F         	movff	?_read_i2c,_ETemp
   717  000222  C048  F020         	movff	?_read_i2c+1,_ETemp+1
   718                           
   719                           ;main.c: 172:     pause_Time = ETemp & 0x00FF;
   720  000226  C01F  F02A         	movff	_ETemp,_pause_Time	;volatile
   721                           
   722                           ;main.c: 173:     if(pause_Time<0x30 || pause_Time>0x35)
   723  00022A  0E2F               	movlw	47
   724  00022C  642A               	cpfsgt	_pause_Time,c	;volatile
   725  00022E  D003               	goto	u1920
   726  000230  0E35               	movlw	53
   727  000232  642A               	cpfsgt	_pause_Time,c	;volatile
   728  000234  D013               	goto	l3184
   729  000236                     u1920:
   730                           
   731                           ;main.c: 174:     {;main.c: 175:         pause_Time = 0x30;
   732  000236  0E30               	movlw	48
   733  000238  6E2A               	movwf	_pause_Time,c	;volatile
   734                           
   735                           ;main.c: 176:         Motor_Pause_Time=0;
   736  00023A  0E00               	movlw	0
   737  00023C  6E18               	movwf	_Motor_Pause_Time+1,c
   738  00023E  0E00               	movlw	0
   739  000240  6E17               	movwf	_Motor_Pause_Time,c
   740                           
   741                           ;main.c: 177:         write_i2c(0x0060, pause_Time);
   742  000242  0E60               	movlw	96
   743  000244  6E47               	movwf	write_i2c@address,c
   744  000246  0E00               	movlw	0
   745  000248  6E48               	movwf	write_i2c@address+1,c
   746  00024A  0E00               	movlw	0
   747  00024C  6E49               	movwf	write_i2c@address+2,c
   748  00024E  0E00               	movlw	0
   749  000250  6E4A               	movwf	write_i2c@address+3,c
   750  000252  C02A  F04B         	movff	_pause_Time,write_i2c@data	;volatile
   751  000256  6A4C               	clrf	write_i2c@data+1,c
   752  000258  EC96  F008         	call	_write_i2c	;wreg free
   753  00025C                     l3184:
   754                           
   755                           ;main.c: 183:     ETemp = read_i2c(0x0050);
   756  00025C  0E50               	movlw	80
   757  00025E  6E47               	movwf	read_i2c@address,c
   758  000260  0E00               	movlw	0
   759  000262  6E48               	movwf	read_i2c@address+1,c
   760  000264  0E00               	movlw	0
   761  000266  6E49               	movwf	read_i2c@address+2,c
   762  000268  0E00               	movlw	0
   763  00026A  6E4A               	movwf	read_i2c@address+3,c
   764  00026C  ECE2  F007         	call	_read_i2c	;wreg free
   765  000270  C047  F01F         	movff	?_read_i2c,_ETemp
   766  000274  C048  F020         	movff	?_read_i2c+1,_ETemp+1
   767                           
   768                           ;main.c: 184:     delay_motor_stop_time = ETemp & 0x00FF;
   769  000278  C01F  F028         	movff	_ETemp,_delay_motor_stop_time	;volatile
   770                           
   771                           ;main.c: 185:     if(delay_motor_stop_time>0x96)
   772  00027C  0E96               	movlw	150
   773  00027E  6428               	cpfsgt	_delay_motor_stop_time,c	;volatile
   774  000280  D014               	goto	l252
   775                           
   776                           ;main.c: 186:     {;main.c: 187:         delay_motor_stop_time=0x00;
   777  000282  0E00               	movlw	0
   778  000284  6E28               	movwf	_delay_motor_stop_time,c	;volatile
   779                           
   780                           ;main.c: 188:         write_i2c(0x0050, delay_motor_stop_time);
   781  000286  0E50               	movlw	80
   782  000288  6E47               	movwf	write_i2c@address,c
   783  00028A  0E00               	movlw	0
   784  00028C  6E48               	movwf	write_i2c@address+1,c
   785  00028E  0E00               	movlw	0
   786  000290  6E49               	movwf	write_i2c@address+2,c
   787  000292  0E00               	movlw	0
   788  000294  6E4A               	movwf	write_i2c@address+3,c
   789  000296  C028  F04B         	movff	_delay_motor_stop_time,write_i2c@data	;volatile
   790  00029A  6A4C               	clrf	write_i2c@data+1,c
   791  00029C  EC96  F008         	call	_write_i2c	;wreg free
   792                           
   793                           ;main.c: 189:         Motor_Stop_Delay_Time=0;
   794  0002A0  0E00               	movlw	0
   795  0002A2  6E1C               	movwf	_Motor_Stop_Delay_Time+1,c
   796  0002A4  0E00               	movlw	0
   797  0002A6  6E1B               	movwf	_Motor_Stop_Delay_Time,c
   798                           
   799                           ;main.c: 190:     }
   800  0002A8  D003               	goto	l3196
   801  0002AA                     l252:
   802                           
   803                           ;main.c: 192:     {;main.c: 193:         Motor_Stop_Delay_Time = delay_motor_stop_time;
   804  0002AA  C028  F01B         	movff	_delay_motor_stop_time,_Motor_Stop_Delay_Time	;volatile
   805  0002AE  6A1C               	clrf	_Motor_Stop_Delay_Time+1,c
   806  0002B0                     l3196:
   807                           
   808                           ;main.c: 199:     ETemp = read_i2c(0x0040);
   809  0002B0  0E40               	movlw	64
   810  0002B2  6E47               	movwf	read_i2c@address,c
   811  0002B4  0E00               	movlw	0
   812  0002B6  6E48               	movwf	read_i2c@address+1,c
   813  0002B8  0E00               	movlw	0
   814  0002BA  6E49               	movwf	read_i2c@address+2,c
   815  0002BC  0E00               	movlw	0
   816  0002BE  6E4A               	movwf	read_i2c@address+3,c
   817  0002C0  ECE2  F007         	call	_read_i2c	;wreg free
   818  0002C4  C047  F01F         	movff	?_read_i2c,_ETemp
   819  0002C8  C048  F020         	movff	?_read_i2c+1,_ETemp+1
   820                           
   821                           ;main.c: 200:     vib_Time = ETemp & 0x00FF;
   822  0002CC  C01F  F029         	movff	_ETemp,_vib_Time	;volatile
   823                           
   824                           ;main.c: 201:     if( (vib_Time!=0x81 && vib_Time!=0x82 && vib_Time!=0x83 && vib_Time!=0
      +                          x84 && vib_Time!=0x85) )
   825  0002D0  0E81               	movlw	129
   826  0002D2  1829               	xorwf	_vib_Time,w,c	;volatile
   827  0002D4  B4D8               	btfsc	status,2,c
   828  0002D6  D03C               	goto	l3226
   829  0002D8  0E82               	movlw	130
   830  0002DA  1829               	xorwf	_vib_Time,w,c	;volatile
   831  0002DC  B4D8               	btfsc	status,2,c
   832  0002DE  D038               	goto	l3226
   833  0002E0  0E83               	movlw	131
   834  0002E2  1829               	xorwf	_vib_Time,w,c	;volatile
   835  0002E4  B4D8               	btfsc	status,2,c
   836  0002E6  D034               	goto	l3226
   837  0002E8  0E84               	movlw	132
   838  0002EA  1829               	xorwf	_vib_Time,w,c	;volatile
   839  0002EC  B4D8               	btfsc	status,2,c
   840  0002EE  D030               	goto	l3226
   841  0002F0  0E85               	movlw	133
   842  0002F2  1829               	xorwf	_vib_Time,w,c	;volatile
   843  0002F4  B4D8               	btfsc	status,2,c
   844  0002F6  D02C               	goto	l3226
   845                           
   846                           ;main.c: 202:     {;main.c: 203:         Vmotor_Time = 2000;
   847  0002F8  0E07               	movlw	7
   848  0002FA  6E50               	movwf	_Vmotor_Time+1,c
   849  0002FC  0ED0               	movlw	208
   850  0002FE  6E4F               	movwf	_Vmotor_Time,c
   851                           
   852                           ;main.c: 204:         vib_Time = 0x82;
   853  000300  0E82               	movlw	130
   854  000302  6E29               	movwf	_vib_Time,c	;volatile
   855                           
   856                           ;main.c: 205:         write_i2c(0x0040,vib_Time);
   857  000304  0E40               	movlw	64
   858  000306  6E47               	movwf	write_i2c@address,c
   859  000308  0E00               	movlw	0
   860  00030A  6E48               	movwf	write_i2c@address+1,c
   861  00030C  0E00               	movlw	0
   862  00030E  6E49               	movwf	write_i2c@address+2,c
   863  000310  0E00               	movlw	0
   864  000312  6E4A               	movwf	write_i2c@address+3,c
   865  000314  C029  F04B         	movff	_vib_Time,write_i2c@data	;volatile
   866  000318  6A4C               	clrf	write_i2c@data+1,c
   867  00031A  EC96  F008         	call	_write_i2c	;wreg free
   868                           
   869                           ;main.c: 206:     }
   870  00031E  D030               	goto	l3228
   871  000320                     l3214:
   872                           
   873                           ;main.c: 212:                 Vmotor_Time=1000;
   874  000320  0E03               	movlw	3
   875  000322  6E50               	movwf	_Vmotor_Time+1,c
   876  000324  0EE8               	movlw	232
   877  000326  D012               	goto	L3
   878  000328                     l3216:
   879                           
   880                           ;main.c: 216:                 Vmotor_Time=2000;
   881  000328  0E07               	movlw	7
   882  00032A  6E50               	movwf	_Vmotor_Time+1,c
   883  00032C  0ED0               	movlw	208
   884  00032E  6E4F               	movwf	_Vmotor_Time,c
   885                           
   886                           ;main.c: 217:                 vib_Time=0x82;
   887  000330  0E82               	movlw	130
   888  000332  6E29               	movwf	_vib_Time,c	;volatile
   889                           
   890                           ;main.c: 218:                 break;
   891  000334  D025               	goto	l3228
   892  000336                     l3218:
   893                           
   894                           ;main.c: 220:                 Vmotor_Time=3000;
   895  000336  0E0B               	movlw	11
   896  000338  6E50               	movwf	_Vmotor_Time+1,c
   897  00033A  0EB8               	movlw	184
   898  00033C  D007               	goto	L3
   899  00033E                     l3220:
   900                           
   901                           ;main.c: 223:                 Vmotor_Time=4000;
   902  00033E  0E0F               	movlw	15
   903  000340  6E50               	movwf	_Vmotor_Time+1,c
   904  000342  0EA0               	movlw	160
   905  000344  D003               	goto	L3
   906  000346                     l3222:
   907                           
   908                           ;main.c: 226:                 Vmotor_Time=5000;
   909  000346  0E13               	movlw	19
   910  000348  6E50               	movwf	_Vmotor_Time+1,c
   911  00034A  0E88               	movlw	136
   912  00034C                     L3:
   913  00034C  6E4F               	movwf	_Vmotor_Time,c
   914                           
   915                           ;main.c: 227:                 break;
   916  00034E  D018               	goto	l3228
   917  000350                     l3226:
   918  000350  5029               	movf	_vib_Time,w,c	;volatile
   919  000352  6E4D               	movwf	??_main& (0+255),c
   920  000354  6A4E               	clrf	(??_main+1)& (0+255),c
   921                           
   922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   923                           ; Switch size 1, requested type "simple"
   924                           ; Number of cases is 1, Range of values is 0 to 0
   925                           ; switch strategies available:
   926                           ; Name         Instructions Cycles
   927                           ; simple_byte            4     3 (average)
   928                           ;	Chosen strategy is simple_byte
   929  000356  504E               	movf	??_main+1,w,c
   930  000358  0A00               	xorlw	0	; case 0
   931  00035A  A4D8               	btfss	status,2,c
   932  00035C  D7E5               	goto	l3216
   933                           
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 5, Range of values is 129 to 133
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte           16     9 (average)
   939                           ;	Chosen strategy is simple_byte
   940  00035E  504D               	movf	??_main,w,c
   941  000360  0A81               	xorlw	129	; case 129
   942  000362  B4D8               	btfsc	status,2,c
   943  000364  D7DD               	goto	l3214
   944  000366  0A03               	xorlw	3	; case 130
   945  000368  B4D8               	btfsc	status,2,c
   946  00036A  D7DE               	goto	l3216
   947  00036C  0A01               	xorlw	1	; case 131
   948  00036E  B4D8               	btfsc	status,2,c
   949  000370  D7E2               	goto	l3218
   950  000372  0A07               	xorlw	7	; case 132
   951  000374  B4D8               	btfsc	status,2,c
   952  000376  D7E3               	goto	l3220
   953  000378  0A01               	xorlw	1	; case 133
   954  00037A  B4D8               	btfsc	status,2,c
   955  00037C  D7E4               	goto	l3222
   956  00037E  D7D4               	goto	l3216
   957  000380                     l3228:
   958                           
   959                           ;main.c: 234:     PWM_reg = 0x3F;
   960  000380  0E3F               	movlw	63
   961  000382  6E51               	movwf	_PWM_reg,c	;volatile
   962                           
   963                           ;main.c: 236:     ETemp = read_i2c(0x0030);
   964  000384  0E30               	movlw	48
   965  000386  6E47               	movwf	read_i2c@address,c
   966  000388  0E00               	movlw	0
   967  00038A  6E48               	movwf	read_i2c@address+1,c
   968  00038C  0E00               	movlw	0
   969  00038E  6E49               	movwf	read_i2c@address+2,c
   970  000390  0E00               	movlw	0
   971  000392  6E4A               	movwf	read_i2c@address+3,c
   972  000394  ECE2  F007         	call	_read_i2c	;wreg free
   973  000398  C047  F01F         	movff	?_read_i2c,_ETemp
   974  00039C  C048  F020         	movff	?_read_i2c+1,_ETemp+1
   975                           
   976                           ;main.c: 238:     PWM_reg = ETemp & 0x00FF;
   977  0003A0  C01F  F051         	movff	_ETemp,_PWM_reg	;volatile
   978                           
   979                           ;main.c: 240:     if( (PWM_reg!=0x00 && PWM_reg!=0x3F && PWM_reg!=0x7F) )
   980  0003A4  5051               	movf	_PWM_reg,w,c	;volatile
   981  0003A6  B4D8               	btfsc	status,2,c
   982  0003A8  D017               	goto	l3244
   983  0003AA  0E3F               	movlw	63
   984  0003AC  1851               	xorwf	_PWM_reg,w,c	;volatile
   985  0003AE  B4D8               	btfsc	status,2,c
   986  0003B0  D013               	goto	l3244
   987  0003B2  0E7F               	movlw	127
   988  0003B4  1851               	xorwf	_PWM_reg,w,c	;volatile
   989  0003B6  B4D8               	btfsc	status,2,c
   990  0003B8  D00F               	goto	l3244
   991                           
   992                           ;main.c: 241:     {;main.c: 242:         PWM_reg=0x3F;
   993  0003BA  0E3F               	movlw	63
   994  0003BC  6E51               	movwf	_PWM_reg,c	;volatile
   995                           
   996                           ;main.c: 243:         write_i2c(0x0030,PWM_reg);
   997  0003BE  0E30               	movlw	48
   998  0003C0  6E47               	movwf	write_i2c@address,c
   999  0003C2  0E00               	movlw	0
  1000  0003C4  6E48               	movwf	write_i2c@address+1,c
  1001  0003C6  0E00               	movlw	0
  1002  0003C8  6E49               	movwf	write_i2c@address+2,c
  1003  0003CA  0E00               	movlw	0
  1004  0003CC  6E4A               	movwf	write_i2c@address+3,c
  1005  0003CE  C051  F04B         	movff	_PWM_reg,write_i2c@data	;volatile
  1006  0003D2  6A4C               	clrf	write_i2c@data+1,c
  1007  0003D4  EC96  F008         	call	_write_i2c	;wreg free
  1008  0003D8                     l3244:
  1009                           
  1010                           ;main.c: 246:     MotorPosition_Init();
  1011  0003D8  EC16  F008         	call	_MotorPosition_Init	;wreg free
  1012  0003DC                     l265:
  1013  0003DC  0004               	clrwdt		;# 
  1014                           
  1015                           ;main.c: 255:         switch(OpMode)
  1016  0003DE  D229               	goto	l3462
  1017  0003E0                     l267:
  1018                           
  1019                           ;main.c: 262:                 NUM = NUM_REC;
  1020  0003E0  C013  F015         	movff	_NUM_REC,_NUM
  1021  0003E4  C014  F016         	movff	_NUM_REC+1,_NUM+1
  1022                           
  1023                           ;main.c: 264:                 if (PORTBbits.RB4 == 0)
  1024  0003E8  B881               	btfsc	3969,4,c	;volatile
  1025  0003EA  D004               	goto	u2030
  1026                           
  1027                           ;main.c: 265:                 {;main.c: 266:                     ToggleVIB_Mode();
  1028  0003EC  EC33  F009         	call	_ToggleVIB_Mode	;wreg free
  1029  0003F0                     l269:
  1030  0003F0  A881               	btfss	3969,4,c	;volatile
  1031  0003F2  D7FE               	goto	l269
  1032  0003F4                     u2030:
  1033                           
  1034                           ;main.c: 270:                 if ((PORTBbits.RB3 == 0) && NUM != 99)
  1035                           
  1036                           ;main.c: 268:                 }
  1037  0003F4  B681               	btfsc	3969,3,c	;volatile
  1038  0003F6  D00D               	goto	u2060
  1039  0003F8  0E63               	movlw	99
  1040  0003FA  1815               	xorwf	_NUM,w,c
  1041  0003FC  1016               	iorwf	_NUM+1,w,c
  1042  0003FE  B4D8               	btfsc	status,2,c
  1043  000400  D008               	goto	u2060
  1044                           
  1045                           ;main.c: 271:                 {;main.c: 272:                     NUM = NUM + 1;
  1046  000402  0E01               	movlw	1
  1047  000404  2415               	addwf	_NUM,w,c
  1048  000406  6E15               	movwf	_NUM,c
  1049  000408  0E00               	movlw	0
  1050  00040A  2016               	addwfc	_NUM+1,w,c
  1051  00040C  6E16               	movwf	_NUM+1,c
  1052  00040E                     l273:
  1053  00040E  A681               	btfss	3969,3,c	;volatile
  1054  000410  D7FE               	goto	l273
  1055  000412                     u2060:
  1056                           
  1057                           ;main.c: 276:                 if (PORTAbits.RA5 == 0 && NUM != 0)
  1058                           
  1059                           ;main.c: 274:                 }
  1060  000412  BA80               	btfsc	3968,5,c	;volatile
  1061  000414  D00C               	goto	u2090
  1062  000416  5015               	movf	_NUM,w,c
  1063  000418  1016               	iorwf	_NUM+1,w,c
  1064  00041A  B4D8               	btfsc	status,2,c
  1065  00041C  D008               	goto	u2090
  1066                           
  1067                           ;main.c: 277:                 {;main.c: 278:                     NUM = NUM - 1;
  1068  00041E  0EFF               	movlw	255
  1069  000420  2415               	addwf	_NUM,w,c
  1070  000422  6E15               	movwf	_NUM,c
  1071  000424  0EFF               	movlw	255
  1072  000426  2016               	addwfc	_NUM+1,w,c
  1073  000428  6E16               	movwf	_NUM+1,c
  1074  00042A                     l277:
  1075  00042A  AA80               	btfss	3968,5,c	;volatile
  1076  00042C  D7FE               	goto	l277
  1077  00042E                     u2090:
  1078                           
  1079                           ;main.c: 282:                 if (PORTAbits.RA4 == 0 && NUM <= 89)
  1080                           
  1081                           ;main.c: 280:                 }
  1082  00042E  B880               	btfsc	3968,4,c	;volatile
  1083  000430  D00E               	goto	u2120
  1084  000432  5016               	movf	_NUM+1,w,c
  1085  000434  E10C               	bnz	l280
  1086  000436  0E5A               	movlw	90
  1087  000438  5C15               	subwf	_NUM,w,c
  1088  00043A  B0D8               	btfsc	status,0,c
  1089  00043C  D008               	goto	u2120
  1090                           
  1091                           ;main.c: 283:                 {;main.c: 284:                     NUM = NUM + 10;
  1092  00043E  0E0A               	movlw	10
  1093  000440  2415               	addwf	_NUM,w,c
  1094  000442  6E15               	movwf	_NUM,c
  1095  000444  0E00               	movlw	0
  1096  000446  2016               	addwfc	_NUM+1,w,c
  1097  000448  6E16               	movwf	_NUM+1,c
  1098  00044A                     l281:
  1099  00044A  A880               	btfss	3968,4,c	;volatile
  1100  00044C  D7FE               	goto	l281
  1101  00044E                     u2120:
  1102  00044E                     l280:
  1103                           
  1104                           ;main.c: 288:                 if (PORTAbits.RA3 == 0 && NUM >= 10)
  1105  00044E  B680               	btfsc	3968,3,c	;volatile
  1106  000450  D00E               	goto	u2150
  1107  000452  5016               	movf	_NUM+1,w,c
  1108  000454  E104               	bnz	u2140
  1109  000456  0E0A               	movlw	10
  1110  000458  5C15               	subwf	_NUM,w,c
  1111  00045A  A0D8               	btfss	status,0,c
  1112  00045C  D008               	goto	u2150
  1113  00045E                     u2140:
  1114                           
  1115                           ;main.c: 289:                 {;main.c: 290:                     NUM = NUM - 10;
  1116  00045E  0EF6               	movlw	246
  1117  000460  2415               	addwf	_NUM,w,c
  1118  000462  6E15               	movwf	_NUM,c
  1119  000464  0EFF               	movlw	255
  1120  000466  2016               	addwfc	_NUM+1,w,c
  1121  000468  6E16               	movwf	_NUM+1,c
  1122  00046A                     l285:
  1123  00046A  A680               	btfss	3968,3,c	;volatile
  1124  00046C  D7FE               	goto	l285
  1125  00046E                     u2150:
  1126                           
  1127                           ;main.c: 294:                 NUM_REC = NUM;
  1128                           
  1129                           ;main.c: 292:                 }
  1130  00046E  C015  F013         	movff	_NUM,_NUM_REC
  1131  000472  C016  F014         	movff	_NUM+1,_NUM_REC+1
  1132                           
  1133                           ;main.c: 295:                 WriteSTLED316SData(NUM, vibration_mode);
  1134  000476  C015  F041         	movff	_NUM,WriteSTLED316SData@number
  1135  00047A  C016  F042         	movff	_NUM+1,WriteSTLED316SData@number+1
  1136  00047E  C02D  F043         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  1137  000482  EC98  F006         	call	_WriteSTLED316SData	;wreg free
  1138                           
  1139                           ;main.c: 297:                 if (PORTBbits.RB2 == 0)
  1140  000486  B481               	btfsc	3969,2,c	;volatile
  1141  000488  D00D               	goto	u2170
  1142                           
  1143                           ;main.c: 298:                 {;main.c: 299:                     Busy = 1;
  1144  00048A  0E01               	movlw	1
  1145  00048C  6E2E               	movwf	_Busy,c
  1146                           
  1147                           ;main.c: 300:                     Homing_Again_Manual();
  1148  00048E  EC28  F004         	call	_Homing_Again_Manual	;wreg free
  1149                           
  1150                           ;main.c: 301:                     Stop = 0;
  1151  000492  0E00               	movlw	0
  1152  000494  6E30               	movwf	_Stop,c
  1153                           
  1154                           ;main.c: 302:                     Busy = 0;
  1155  000496  0E00               	movlw	0
  1156  000498  6E2E               	movwf	_Busy,c
  1157  00049A                     l3276:
  1158                           
  1159                           ;main.c: 305:                     {;main.c: 306:                         WriteSTLED316SE
      +                          rr('E');
  1160  00049A  0E45               	movlw	69
  1161  00049C  ECD8  F005         	call	_WriteSTLED316SErr
  1162                           
  1163                           ;main.c: 307:                     }
  1164  0004A0  A481               	btfss	3969,2,c	;volatile
  1165  0004A2  D7FB               	goto	l3276
  1166  0004A4                     u2170:
  1167                           
  1168                           ;main.c: 316:                 if(Serial_Flag==1)
  1169  0004A4  0432               	decf	_Serial_Flag,w,c
  1170  0004A6  B4D8               	btfsc	status,2,c
  1171  0004A8  D1A3               	goto	l3456
  1172  0004AA  D1C0               	goto	l3460
  1173  0004AC                     l3284:
  1174                           
  1175                           ;main.c: 323:                             if(Serial_Buffer[2] == 0xF1 && Busy == 0)
  1176  0004AC  0EF1               	movlw	241
  1177  0004AE  1803               	xorwf	_Serial_Buffer+2,w,c
  1178  0004B0  A4D8               	btfss	status,2,c
  1179  0004B2  D00E               	goto	l3294
  1180  0004B4  502E               	movf	_Busy,w,c
  1181  0004B6  A4D8               	btfss	status,2,c
  1182  0004B8  D00B               	goto	l3294
  1183                           
  1184                           ;main.c: 324:                             {;main.c: 325:                                
      +                           Stop = 0;
  1185  0004BA  0E00               	movlw	0
  1186  0004BC  6E30               	movwf	_Stop,c
  1187                           
  1188                           ;main.c: 326:                                 Busy = 1;
  1189  0004BE  0E01               	movlw	1
  1190  0004C0  6E2E               	movwf	_Busy,c
  1191                           
  1192                           ;main.c: 327:                                 NUM = NUM_REC;
  1193  0004C2  C013  F015         	movff	_NUM_REC,_NUM
  1194  0004C6  C014  F016         	movff	_NUM_REC+1,_NUM+1
  1195                           
  1196                           ;main.c: 329:                                 Homing_Again_Auto();
  1197  0004CA  ECDF  F004         	call	_Homing_Again_Auto	;wreg free
  1198                           
  1199                           ;main.c: 331:                             }
  1200  0004CE  D03D               	goto	l3320
  1201  0004D0                     l3294:
  1202  0004D0  0EF2               	movlw	242
  1203  0004D2  1803               	xorwf	_Serial_Buffer+2,w,c
  1204  0004D4  A4D8               	btfss	status,2,c
  1205  0004D6  D039               	goto	l3320
  1206  0004D8  502E               	movf	_Busy,w,c
  1207  0004DA  A4D8               	btfss	status,2,c
  1208  0004DC  D036               	goto	l3320
  1209                           
  1210                           ;main.c: 333:                            {;main.c: 334:                                 
      +                          Stop = 0;
  1211  0004DE  0E00               	movlw	0
  1212  0004E0  6E30               	movwf	_Stop,c
  1213                           
  1214                           ;main.c: 335:                                 Busy = 1;
  1215  0004E2  0E01               	movlw	1
  1216  0004E4  6E2E               	movwf	_Busy,c
  1217                           
  1218                           ;main.c: 336:                                 NUM = NUM_REC;
  1219  0004E6  C013  F015         	movff	_NUM_REC,_NUM
  1220  0004EA  C014  F016         	movff	_NUM_REC+1,_NUM+1
  1221                           
  1222                           ;main.c: 337:                                 WriteSTLED316SData(NUM, vibration_mode);
  1223  0004EE  C015  F041         	movff	_NUM,WriteSTLED316SData@number
  1224  0004F2  C016  F042         	movff	_NUM+1,WriteSTLED316SData@number+1
  1225  0004F6  C02D  F043         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  1226  0004FA  EC98  F006         	call	_WriteSTLED316SData	;wreg free
  1227                           
  1228                           ;main.c: 339:                                 Homing_Again_Manual();
  1229  0004FE  EC28  F004         	call	_Homing_Again_Manual	;wreg free
  1230                           
  1231                           ;main.c: 342:                                 if(Stop == 0)
  1232  000502  5030               	movf	_Stop,w,c
  1233  000504  A4D8               	btfss	status,2,c
  1234  000506  D021               	goto	l3320
  1235                           
  1236                           ;main.c: 343:                                 {;main.c: 344:                            
      +                                   Serial_Buffer_Out[0] = 0xA5;
  1237  000508  0EA5               	movlw	165
  1238  00050A  0100               	movlb	0	; () banked
  1239  00050C  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  1240                           
  1241                           ;main.c: 345:                                     Serial_Buffer_Out[1] = 0x44;
  1242  00050E  0E44               	movlw	68
  1243  000510  6F61               	movwf	(_Serial_Buffer_Out+1)& (0+255),b
  1244                           
  1245                           ;main.c: 346:                                     Serial_Buffer_Out[2] = 0xF9;
  1246  000512  0EF9               	movlw	249
  1247  000514  6F62               	movwf	(_Serial_Buffer_Out+2)& (0+255),b
  1248                           
  1249                           ;main.c: 347:                                     Serial_Buffer_Out[3] = 0X3D;
  1250  000516  0E3D               	movlw	61
  1251  000518  6F63               	movwf	(_Serial_Buffer_Out+3)& (0+255),b
  1252                           
  1253                           ;main.c: 348:                                     Serial_Buffer_Out[4] = 0x5A;
  1254  00051A  0E5A               	movlw	90
  1255  00051C  6F64               	movwf	(_Serial_Buffer_Out+4)& (0+255),b
  1256                           
  1257                           ;main.c: 349:                                     for (i=0; i<5;i++)
  1258  00051E  0E00               	movlw	0
  1259  000520  6E12               	movwf	_i+1,c
  1260  000522  0E00               	movlw	0
  1261  000524  6E11               	movwf	_i,c
  1262  000526                     l3310:
  1263  000526  5012               	movf	_i+1,w,c
  1264  000528  E110               	bnz	l3320
  1265  00052A  0E05               	movlw	5
  1266  00052C  5C11               	subwf	_i,w,c
  1267  00052E  B0D8               	btfsc	status,0,c
  1268  000530  D00C               	goto	l3320
  1269                           
  1270                           ;main.c: 350:                                         Write1USART(Serial_Buffer_Out[i]);
  1271  000532  0E60               	movlw	low _Serial_Buffer_Out
  1272  000534  2411               	addwf	_i,w,c
  1273  000536  6ED9               	movwf	fsr2l,c
  1274  000538  0E00               	movlw	high _Serial_Buffer_Out
  1275  00053A  2012               	addwfc	_i+1,w,c
  1276  00053C  6EDA               	movwf	fsr2h,c
  1277  00053E  50DF               	movf	indf2,w,c
  1278  000540  ECC1  F009         	call	_Write1USART
  1279  000544  4A11               	infsnz	_i,f,c
  1280  000546  2A12               	incf	_i+1,f,c
  1281  000548  D7EE               	goto	l3310
  1282  00054A                     l3320:
  1283                           
  1284                           ;main.c: 354:                                 flush();
  1285  00054A  EC03  F009         	call	_flush	;wreg free
  1286                           
  1287                           ;main.c: 355:                                 flushOut();
  1288  00054E  EC1B  F009         	call	_flushOut	;wreg free
  1289                           
  1290                           ;main.c: 356:                                 Stop = 0;
  1291  000552  0E00               	movlw	0
  1292  000554  6E30               	movwf	_Stop,c
  1293  000556                     l3324:
  1294                           
  1295                           ;main.c: 357:                                 Busy = 0;
  1296  000556  0E00               	movlw	0
  1297  000558  6E2E               	movwf	_Busy,c
  1298                           
  1299                           ;main.c: 358:                                 break;
  1300  00055A  D164               	goto	l3458
  1301  00055C                     l3326:
  1302                           
  1303                           ;main.c: 363:                             if(Busy==0)
  1304  00055C  502E               	movf	_Busy,w,c
  1305  00055E  A4D8               	btfss	status,2,c
  1306  000560  D161               	goto	l3458
  1307                           
  1308                           ;main.c: 364:                             {;main.c: 365:                                
      +                           Busy = 1;
  1309  000562  0E01               	movlw	1
  1310  000564  6E2E               	movwf	_Busy,c
  1311                           
  1312                           ;main.c: 366:                                 if(Serial_Buffer[2]>=0x30 && Serial_Buffer
      +                          [2]<=0x35)
  1313  000566  0E2F               	movlw	47
  1314  000568  6403               	cpfsgt	_Serial_Buffer+2,c
  1315  00056A  D03A               	goto	l3352
  1316  00056C  0E36               	movlw	54
  1317  00056E  6003               	cpfslt	_Serial_Buffer+2,c
  1318  000570  D037               	goto	l3352
  1319                           
  1320                           ;main.c: 367:                                 {;main.c: 369:                            
      +                                   pause_Time = Serial_Buffer[2];
  1321  000572  C003  F02A         	movff	_Serial_Buffer+2,_pause_Time	;volatile
  1322                           
  1323                           ;main.c: 370:                                     switch(pause_Time)
  1324  000576  D019               	goto	l3350
  1325  000578                     l3336:
  1326                           
  1327                           ;main.c: 374:                                             Motor_Pause_Time = 0;
  1328  000578  0E00               	movlw	0
  1329  00057A  6E18               	movwf	_Motor_Pause_Time+1,c
  1330  00057C  0E00               	movlw	0
  1331  00057E  D013               	goto	L8
  1332  000580                     l3338:
  1333                           
  1334                           ;main.c: 378:                                             Motor_Pause_Time = 1000;
  1335  000580  0E03               	movlw	3
  1336  000582  6E18               	movwf	_Motor_Pause_Time+1,c
  1337  000584  0EE8               	movlw	232
  1338  000586  D00F               	goto	L8
  1339  000588                     l3340:
  1340                           
  1341                           ;main.c: 382:                                             Motor_Pause_Time = 2000;
  1342  000588  0E07               	movlw	7
  1343  00058A  6E18               	movwf	_Motor_Pause_Time+1,c
  1344  00058C  0ED0               	movlw	208
  1345  00058E  D00B               	goto	L8
  1346  000590                     l3342:
  1347                           
  1348                           ;main.c: 386:                                             Motor_Pause_Time = 3000;
  1349  000590  0E0B               	movlw	11
  1350  000592  6E18               	movwf	_Motor_Pause_Time+1,c
  1351  000594  0EB8               	movlw	184
  1352  000596  D007               	goto	L8
  1353  000598                     l3344:
  1354                           
  1355                           ;main.c: 390:                                             Motor_Pause_Time = 4000;
  1356  000598  0E0F               	movlw	15
  1357  00059A  6E18               	movwf	_Motor_Pause_Time+1,c
  1358  00059C  0EA0               	movlw	160
  1359  00059E  D003               	goto	L8
  1360  0005A0                     l3346:
  1361                           
  1362                           ;main.c: 394:                                             Motor_Pause_Time = 5000;
  1363  0005A0  0E13               	movlw	19
  1364  0005A2  6E18               	movwf	_Motor_Pause_Time+1,c
  1365  0005A4  0E88               	movlw	136
  1366  0005A6                     L8:
  1367  0005A6  6E17               	movwf	_Motor_Pause_Time,c
  1368                           
  1369                           ;main.c: 395:                                             break;
  1370  0005A8  D01B               	goto	l3352
  1371  0005AA                     l3350:
  1372  0005AA  502A               	movf	_pause_Time,w,c	;volatile
  1373  0005AC  6E4D               	movwf	??_main& (0+255),c
  1374  0005AE  6A4E               	clrf	(??_main+1)& (0+255),c
  1375                           
  1376                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1377                           ; Switch size 1, requested type "simple"
  1378                           ; Number of cases is 1, Range of values is 0 to 0
  1379                           ; switch strategies available:
  1380                           ; Name         Instructions Cycles
  1381                           ; simple_byte            4     3 (average)
  1382                           ;	Chosen strategy is simple_byte
  1383  0005B0  504E               	movf	??_main+1,w,c
  1384  0005B2  0A00               	xorlw	0	; case 0
  1385  0005B4  A4D8               	btfss	status,2,c
  1386  0005B6  D7E0               	goto	l3336
  1387                           
  1388                           ; Switch size 1, requested type "simple"
  1389                           ; Number of cases is 6, Range of values is 48 to 53
  1390                           ; switch strategies available:
  1391                           ; Name         Instructions Cycles
  1392                           ; simple_byte           19    10 (average)
  1393                           ;	Chosen strategy is simple_byte
  1394  0005B8  504D               	movf	??_main,w,c
  1395  0005BA  0A30               	xorlw	48	; case 48
  1396  0005BC  B4D8               	btfsc	status,2,c
  1397  0005BE  D7DC               	goto	l3336
  1398  0005C0  0A01               	xorlw	1	; case 49
  1399  0005C2  B4D8               	btfsc	status,2,c
  1400  0005C4  D7DD               	goto	l3338
  1401  0005C6  0A03               	xorlw	3	; case 50
  1402  0005C8  B4D8               	btfsc	status,2,c
  1403  0005CA  D7DE               	goto	l3340
  1404  0005CC  0A01               	xorlw	1	; case 51
  1405  0005CE  B4D8               	btfsc	status,2,c
  1406  0005D0  D7DF               	goto	l3342
  1407  0005D2  0A07               	xorlw	7	; case 52
  1408  0005D4  B4D8               	btfsc	status,2,c
  1409  0005D6  D7E0               	goto	l3344
  1410  0005D8  0A01               	xorlw	1	; case 53
  1411  0005DA  B4D8               	btfsc	status,2,c
  1412  0005DC  D7E1               	goto	l3346
  1413  0005DE  D7CC               	goto	l3336
  1414  0005E0                     l3352:
  1415                           
  1416                           ;main.c: 399:                                 write_i2c(0x0060, pause_Time);
  1417  0005E0  0E60               	movlw	96
  1418  0005E2  6E47               	movwf	write_i2c@address,c
  1419  0005E4  0E00               	movlw	0
  1420  0005E6  6E48               	movwf	write_i2c@address+1,c
  1421  0005E8  0E00               	movlw	0
  1422  0005EA  6E49               	movwf	write_i2c@address+2,c
  1423  0005EC  0E00               	movlw	0
  1424  0005EE  6E4A               	movwf	write_i2c@address+3,c
  1425  0005F0  C02A  F04B         	movff	_pause_Time,write_i2c@data	;volatile
  1426  0005F4  6A4C               	clrf	write_i2c@data+1,c
  1427  0005F6  EC96  F008         	call	_write_i2c	;wreg free
  1428                           
  1429                           ;main.c: 400:                                 flush();
  1430  0005FA  EC03  F009         	call	_flush	;wreg free
  1431  0005FE  D7AB               	goto	l3324
  1432  000600                     l3358:
  1433                           
  1434                           ;main.c: 408:                             if(Busy==0)
  1435  000600  502E               	movf	_Busy,w,c
  1436  000602  A4D8               	btfss	status,2,c
  1437  000604  D10F               	goto	l3458
  1438                           
  1439                           ;main.c: 409:                             {;main.c: 410:                                
      +                           if (Serial_Buffer[2] == 0x00)
  1440  000606  5003               	movf	_Serial_Buffer+2,w,c
  1441  000608  A4D8               	btfss	status,2,c
  1442  00060A  D061               	goto	l3394
  1443                           
  1444                           ;main.c: 411:                                 {;main.c: 412:                            
      +                                   Busy = 1;
  1445  00060C  0E01               	movlw	1
  1446  00060E  6E2E               	movwf	_Busy,c
  1447                           
  1448                           ;main.c: 414:                                     pause_Time = read_i2c(0x0060);
  1449  000610  0E60               	movlw	96
  1450  000612  6E47               	movwf	read_i2c@address,c
  1451  000614  0E00               	movlw	0
  1452  000616  6E48               	movwf	read_i2c@address+1,c
  1453  000618  0E00               	movlw	0
  1454  00061A  6E49               	movwf	read_i2c@address+2,c
  1455  00061C  0E00               	movlw	0
  1456  00061E  6E4A               	movwf	read_i2c@address+3,c
  1457  000620  ECE2  F007         	call	_read_i2c	;wreg free
  1458  000624  5047               	movf	?_read_i2c,w,c
  1459  000626  6E2A               	movwf	_pause_Time,c	;volatile
  1460                           
  1461                           ;main.c: 415:                                     vib_Time = read_i2c(0x0040);
  1462  000628  0E40               	movlw	64
  1463  00062A  6E47               	movwf	read_i2c@address,c
  1464  00062C  0E00               	movlw	0
  1465  00062E  6E48               	movwf	read_i2c@address+1,c
  1466  000630  0E00               	movlw	0
  1467  000632  6E49               	movwf	read_i2c@address+2,c
  1468  000634  0E00               	movlw	0
  1469  000636  6E4A               	movwf	read_i2c@address+3,c
  1470  000638  ECE2  F007         	call	_read_i2c	;wreg free
  1471  00063C  5047               	movf	?_read_i2c,w,c
  1472  00063E  6E29               	movwf	_vib_Time,c	;volatile
  1473                           
  1474                           ;main.c: 416:                                     Motor_Speed = read_i2c(0x0030);
  1475  000640  0E30               	movlw	48
  1476  000642  6E47               	movwf	read_i2c@address,c
  1477  000644  0E00               	movlw	0
  1478  000646  6E48               	movwf	read_i2c@address+1,c
  1479  000648  0E00               	movlw	0
  1480  00064A  6E49               	movwf	read_i2c@address+2,c
  1481  00064C  0E00               	movlw	0
  1482  00064E  6E4A               	movwf	read_i2c@address+3,c
  1483  000650  ECE2  F007         	call	_read_i2c	;wreg free
  1484  000654  C047  F01D         	movff	?_read_i2c,_Motor_Speed
  1485  000658  C048  F01E         	movff	?_read_i2c+1,_Motor_Speed+1
  1486                           
  1487                           ;main.c: 417:                                     delay_motor_stop_time = read_i2c(0x005
      +                          0);
  1488  00065C  0E50               	movlw	80
  1489  00065E  6E47               	movwf	read_i2c@address,c
  1490  000660  0E00               	movlw	0
  1491  000662  6E48               	movwf	read_i2c@address+1,c
  1492  000664  0E00               	movlw	0
  1493  000666  6E49               	movwf	read_i2c@address+2,c
  1494  000668  0E00               	movlw	0
  1495  00066A  6E4A               	movwf	read_i2c@address+3,c
  1496  00066C  ECE2  F007         	call	_read_i2c	;wreg free
  1497  000670  5047               	movf	?_read_i2c,w,c
  1498  000672  6E28               	movwf	_delay_motor_stop_time,c	;volatile
  1499                           
  1500                           ;main.c: 419:                                     Serial_Buffer_Out[0] = 0x51;
  1501  000674  0E51               	movlw	81
  1502  000676  0100               	movlb	0	; () banked
  1503  000678  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 421:                                     Serial_Buffer_Out[1] = pause_Time;
  1507  00067A  C02A  F061         	movff	_pause_Time,_Serial_Buffer_Out+1	;volatile
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 422:                                     Serial_Buffer_Out[2] = Motor_Speed;
  1511  00067E  C01D  F062         	movff	_Motor_Speed,_Serial_Buffer_Out+2
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 423:                                     Serial_Buffer_Out[3] = vib_Time;
  1515  000682  C029  F063         	movff	_vib_Time,_Serial_Buffer_Out+3	;volatile
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 424:                                     Serial_Buffer_Out[4] = delay_motor_sto
      +                          p_time;
  1519  000686  C028  F064         	movff	_delay_motor_stop_time,_Serial_Buffer_Out+4	;volatile
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 426:                                     _delay((unsigned long)((100)*(8000000/
      +                          4000.0)));
  1523  00068A  0E02               	movlw	2
  1524  00068C  6E4E               	movwf	(??_main+1)& (0+255),c
  1525  00068E  0E04               	movlw	4
  1526  000690  6E4D               	movwf	??_main& (0+255),c
  1527  000692  0EBA               	movlw	186
  1528  000694                     u2517:
  1529  000694  2EE8               	decfsz	wreg,f,c
  1530  000696  D7FE               	bra	u2517
  1531  000698  2E4D               	decfsz	??_main& (0+255),f,c
  1532  00069A  D7FC               	bra	u2517
  1533  00069C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1534  00069E  D7FA               	bra	u2517
  1535  0006A0  D000               	nop2	
  1536                           
  1537                           ;main.c: 428:                                     for (i=0; i<5;i++)
  1538  0006A2  0E00               	movlw	0
  1539  0006A4  6E12               	movwf	_i+1,c
  1540  0006A6  0E00               	movlw	0
  1541  0006A8  6E11               	movwf	_i,c
  1542  0006AA                     l3384:
  1543  0006AA  5012               	movf	_i+1,w,c
  1544  0006AC  E110               	bnz	l3394
  1545  0006AE  0E05               	movlw	5
  1546  0006B0  5C11               	subwf	_i,w,c
  1547  0006B2  B0D8               	btfsc	status,0,c
  1548  0006B4  D00C               	goto	l3394
  1549                           
  1550                           ;main.c: 429:                                         Write1USART(Serial_Buffer_Out[i]);
  1551  0006B6  0E60               	movlw	low _Serial_Buffer_Out
  1552  0006B8  2411               	addwf	_i,w,c
  1553  0006BA  6ED9               	movwf	fsr2l,c
  1554  0006BC  0E00               	movlw	high _Serial_Buffer_Out
  1555  0006BE  2012               	addwfc	_i+1,w,c
  1556  0006C0  6EDA               	movwf	fsr2h,c
  1557  0006C2  50DF               	movf	indf2,w,c
  1558  0006C4  ECC1  F009         	call	_Write1USART
  1559  0006C8  4A11               	infsnz	_i,f,c
  1560  0006CA  2A12               	incf	_i+1,f,c
  1561  0006CC  D7EE               	goto	l3384
  1562  0006CE                     l3394:
  1563                           
  1564                           ;main.c: 431:                                 flushOut();
  1565  0006CE  EC1B  F009         	call	_flushOut	;wreg free
  1566  0006D2  D741               	goto	l3324
  1567  0006D4                     l3398:
  1568                           
  1569                           ;main.c: 438:                             if(Busy==0)
  1570  0006D4  502E               	movf	_Busy,w,c
  1571  0006D6  A4D8               	btfss	status,2,c
  1572  0006D8  D0A5               	goto	l3458
  1573                           
  1574                           ;main.c: 439:                             {;main.c: 440:                                
      +                           Busy = 1;
  1575  0006DA  0E01               	movlw	1
  1576  0006DC  6E2E               	movwf	_Busy,c
  1577                           
  1578                           ;main.c: 441:                                 PWM_Duty_Cycle = Serial_Buffer[2];
  1579  0006DE  C003  F027         	movff	_Serial_Buffer+2,_PWM_Duty_Cycle	;volatile
  1580                           
  1581                           ;main.c: 443:                                 switch(PWM_Duty_Cycle)
  1582  0006E2  D007               	goto	l3412
  1583  0006E4                     l3404:
  1584                           
  1585                           ;main.c: 446:                                         PWM_reg=0x00;
  1586  0006E4  0E00               	movlw	0
  1587  0006E6  D003               	goto	L10
  1588  0006E8                     l3406:
  1589                           
  1590                           ;main.c: 451:                                         PWM_reg=0x3F;
  1591  0006E8  0E3F               	movlw	63
  1592  0006EA  D001               	goto	L10
  1593  0006EC                     l3408:
  1594                           
  1595                           ;main.c: 455:                                         PWM_reg=0x7F;
  1596  0006EC  0E7F               	movlw	127
  1597  0006EE                     L10:
  1598  0006EE  6E51               	movwf	_PWM_reg,c	;volatile
  1599                           
  1600                           ;main.c: 456:                                         break;
  1601  0006F0  D012               	goto	l3414
  1602  0006F2                     l3412:
  1603  0006F2  5027               	movf	_PWM_Duty_Cycle,w,c	;volatile
  1604  0006F4  6E4D               	movwf	??_main& (0+255),c
  1605  0006F6  6A4E               	clrf	(??_main+1)& (0+255),c
  1606                           
  1607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1608                           ; Switch size 1, requested type "simple"
  1609                           ; Number of cases is 1, Range of values is 0 to 0
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte            4     3 (average)
  1613                           ;	Chosen strategy is simple_byte
  1614  0006F8  504E               	movf	??_main+1,w,c
  1615  0006FA  0A00               	xorlw	0	; case 0
  1616  0006FC  A4D8               	btfss	status,2,c
  1617  0006FE  D7F4               	goto	l3406
  1618                           
  1619                           ; Switch size 1, requested type "simple"
  1620                           ; Number of cases is 3, Range of values is 0 to 127
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte           10     6 (average)
  1624                           ;	Chosen strategy is simple_byte
  1625  000700  504D               	movf	??_main,w,c
  1626  000702  0A00               	xorlw	0	; case 0
  1627  000704  B4D8               	btfsc	status,2,c
  1628  000706  D7EE               	goto	l3404
  1629  000708  0A3F               	xorlw	63	; case 63
  1630  00070A  B4D8               	btfsc	status,2,c
  1631  00070C  D7ED               	goto	l3406
  1632  00070E  0A40               	xorlw	64	; case 127
  1633  000710  B4D8               	btfsc	status,2,c
  1634  000712  D7EC               	goto	l3408
  1635  000714  D7E9               	goto	l3406
  1636  000716                     l3414:
  1637                           
  1638                           ;main.c: 458:                                     write_i2c(0x0030,PWM_reg);
  1639  000716  0E30               	movlw	48
  1640  000718  6E47               	movwf	write_i2c@address,c
  1641  00071A  0E00               	movlw	0
  1642  00071C  6E48               	movwf	write_i2c@address+1,c
  1643  00071E  0E00               	movlw	0
  1644  000720  6E49               	movwf	write_i2c@address+2,c
  1645  000722  0E00               	movlw	0
  1646  000724  6E4A               	movwf	write_i2c@address+3,c
  1647  000726  C051  F04B         	movff	_PWM_reg,write_i2c@data	;volatile
  1648  00072A  6A4C               	clrf	write_i2c@data+1,c
  1649  00072C  EC96  F008         	call	_write_i2c	;wreg free
  1650  000730  D712               	goto	l3324
  1651  000732                     l3418:
  1652                           
  1653                           ;main.c: 465:                             if(Busy == 0)
  1654  000732  502E               	movf	_Busy,w,c
  1655  000734  A4D8               	btfss	status,2,c
  1656  000736  D044               	goto	l3442
  1657                           
  1658                           ;main.c: 466:                             {;main.c: 467:                                
      +                           Busy = 1;
  1659  000738  0E01               	movlw	1
  1660  00073A  6E2E               	movwf	_Busy,c
  1661                           
  1662                           ;main.c: 468:                                 vib_Time = Serial_Buffer[2];
  1663  00073C  C003  F029         	movff	_Serial_Buffer+2,_vib_Time	;volatile
  1664                           
  1665                           ;main.c: 470:                                 switch(vib_Time)
  1666  000740  D018               	goto	l3436
  1667  000742                     l3424:
  1668                           
  1669                           ;main.c: 473:                                         Vmotor_Time=1000;
  1670  000742  0E03               	movlw	3
  1671  000744  6E50               	movwf	_Vmotor_Time+1,c
  1672  000746  0EE8               	movlw	232
  1673  000748  D012               	goto	L13
  1674  00074A                     l3426:
  1675                           
  1676                           ;main.c: 478:                                         Vmotor_Time=2000;
  1677  00074A  0E07               	movlw	7
  1678  00074C  6E50               	movwf	_Vmotor_Time+1,c
  1679  00074E  0ED0               	movlw	208
  1680  000750  6E4F               	movwf	_Vmotor_Time,c
  1681                           
  1682                           ;main.c: 479:                                         vib_Time=0x82;
  1683  000752  0E82               	movlw	130
  1684  000754  6E29               	movwf	_vib_Time,c	;volatile
  1685                           
  1686                           ;main.c: 480:                                         break;
  1687  000756  D025               	goto	l3438
  1688  000758                     l3428:
  1689                           
  1690                           ;main.c: 483:                                         Vmotor_Time=3000;
  1691  000758  0E0B               	movlw	11
  1692  00075A  6E50               	movwf	_Vmotor_Time+1,c
  1693  00075C  0EB8               	movlw	184
  1694  00075E  D007               	goto	L13
  1695  000760                     l3430:
  1696                           
  1697                           ;main.c: 487:                                         Vmotor_Time=4000;
  1698  000760  0E0F               	movlw	15
  1699  000762  6E50               	movwf	_Vmotor_Time+1,c
  1700  000764  0EA0               	movlw	160
  1701  000766  D003               	goto	L13
  1702  000768                     l3432:
  1703                           
  1704                           ;main.c: 491:                                         Vmotor_Time=5000;
  1705  000768  0E13               	movlw	19
  1706  00076A  6E50               	movwf	_Vmotor_Time+1,c
  1707  00076C  0E88               	movlw	136
  1708  00076E                     L13:
  1709  00076E  6E4F               	movwf	_Vmotor_Time,c
  1710                           
  1711                           ;main.c: 492:                                         break;
  1712  000770  D018               	goto	l3438
  1713  000772                     l3436:
  1714  000772  5029               	movf	_vib_Time,w,c	;volatile
  1715  000774  6E4D               	movwf	??_main& (0+255),c
  1716  000776  6A4E               	clrf	(??_main+1)& (0+255),c
  1717                           
  1718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1719                           ; Switch size 1, requested type "simple"
  1720                           ; Number of cases is 1, Range of values is 0 to 0
  1721                           ; switch strategies available:
  1722                           ; Name         Instructions Cycles
  1723                           ; simple_byte            4     3 (average)
  1724                           ;	Chosen strategy is simple_byte
  1725  000778  504E               	movf	??_main+1,w,c
  1726  00077A  0A00               	xorlw	0	; case 0
  1727  00077C  A4D8               	btfss	status,2,c
  1728  00077E  D7E5               	goto	l3426
  1729                           
  1730                           ; Switch size 1, requested type "simple"
  1731                           ; Number of cases is 5, Range of values is 129 to 133
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte           16     9 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  000780  504D               	movf	??_main,w,c
  1737  000782  0A81               	xorlw	129	; case 129
  1738  000784  B4D8               	btfsc	status,2,c
  1739  000786  D7DD               	goto	l3424
  1740  000788  0A03               	xorlw	3	; case 130
  1741  00078A  B4D8               	btfsc	status,2,c
  1742  00078C  D7DE               	goto	l3426
  1743  00078E  0A01               	xorlw	1	; case 131
  1744  000790  B4D8               	btfsc	status,2,c
  1745  000792  D7E2               	goto	l3428
  1746  000794  0A07               	xorlw	7	; case 132
  1747  000796  B4D8               	btfsc	status,2,c
  1748  000798  D7E3               	goto	l3430
  1749  00079A  0A01               	xorlw	1	; case 133
  1750  00079C  B4D8               	btfsc	status,2,c
  1751  00079E  D7E4               	goto	l3432
  1752  0007A0  D7D4               	goto	l3426
  1753  0007A2                     l3438:
  1754                           
  1755                           ;main.c: 494:                                     write_i2c(0x0040,vib_Time);
  1756  0007A2  0E40               	movlw	64
  1757  0007A4  6E47               	movwf	write_i2c@address,c
  1758  0007A6  0E00               	movlw	0
  1759  0007A8  6E48               	movwf	write_i2c@address+1,c
  1760  0007AA  0E00               	movlw	0
  1761  0007AC  6E49               	movwf	write_i2c@address+2,c
  1762  0007AE  0E00               	movlw	0
  1763  0007B0  6E4A               	movwf	write_i2c@address+3,c
  1764  0007B2  C029  F04B         	movff	_vib_Time,write_i2c@data	;volatile
  1765  0007B6  6A4C               	clrf	write_i2c@data+1,c
  1766  0007B8  EC96  F008         	call	_write_i2c	;wreg free
  1767                           
  1768                           ;main.c: 495:                                     Busy = 0;
  1769  0007BC  0E00               	movlw	0
  1770  0007BE  6E2E               	movwf	_Busy,c
  1771  0007C0                     l3442:
  1772                           
  1773                           ;main.c: 500:                             if(Busy == 0)
  1774  0007C0  502E               	movf	_Busy,w,c
  1775  0007C2  A4D8               	btfss	status,2,c
  1776  0007C4  D02F               	goto	l3458
  1777                           
  1778                           ;main.c: 501:                             {;main.c: 502:                                
      +                           Busy = 1;
  1779  0007C6  0E01               	movlw	1
  1780  0007C8  6E2E               	movwf	_Busy,c
  1781                           
  1782                           ;main.c: 503:                                 delay_motor_stop_time = Serial_Buffer[2];
  1783  0007CA  C003  F028         	movff	_Serial_Buffer+2,_delay_motor_stop_time	;volatile
  1784                           
  1785                           ;main.c: 504:                                 Motor_Stop_Delay_Time = delay_motor_stop_t
      +                          ime;
  1786  0007CE  C028  F01B         	movff	_delay_motor_stop_time,_Motor_Stop_Delay_Time	;volatile
  1787  0007D2  6A1C               	clrf	_Motor_Stop_Delay_Time+1,c
  1788                           
  1789                           ;main.c: 505:                                 write_i2c(0x0050,delay_motor_stop_time);
  1790  0007D4  0E50               	movlw	80
  1791  0007D6  6E47               	movwf	write_i2c@address,c
  1792  0007D8  0E00               	movlw	0
  1793  0007DA  6E48               	movwf	write_i2c@address+1,c
  1794  0007DC  0E00               	movlw	0
  1795  0007DE  6E49               	movwf	write_i2c@address+2,c
  1796  0007E0  0E00               	movlw	0
  1797  0007E2  6E4A               	movwf	write_i2c@address+3,c
  1798  0007E4  C028  F04B         	movff	_delay_motor_stop_time,write_i2c@data	;volatile
  1799  0007E8  6A4C               	clrf	write_i2c@data+1,c
  1800  0007EA  EC96  F008         	call	_write_i2c	;wreg free
  1801  0007EE  D6B3               	goto	l3324
  1802  0007F0                     l3456:
  1803  0007F0  5002               	movf	_Serial_Buffer+1,w,c
  1804  0007F2  6E4D               	movwf	??_main& (0+255),c
  1805  0007F4  6A4E               	clrf	(??_main+1)& (0+255),c
  1806                           
  1807                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1808                           ; Switch size 1, requested type "simple"
  1809                           ; Number of cases is 1, Range of values is 0 to 0
  1810                           ; switch strategies available:
  1811                           ; Name         Instructions Cycles
  1812                           ; simple_byte            4     3 (average)
  1813                           ;	Chosen strategy is simple_byte
  1814  0007F6  504E               	movf	??_main+1,w,c
  1815  0007F8  0A00               	xorlw	0	; case 0
  1816  0007FA  A4D8               	btfss	status,2,c
  1817  0007FC  D013               	goto	l3458
  1818                           
  1819                           ; Switch size 1, requested type "simple"
  1820                           ; Number of cases is 6, Range of values is 35 to 102
  1821                           ; switch strategies available:
  1822                           ; Name         Instructions Cycles
  1823                           ; simple_byte           19    10 (average)
  1824                           ;	Chosen strategy is simple_byte
  1825  0007FE  504D               	movf	??_main,w,c
  1826  000800  0A23               	xorlw	35	; case 35
  1827  000802  B4D8               	btfsc	status,2,c
  1828  000804  D6AB               	goto	l3326
  1829  000806  0A67               	xorlw	103	; case 68
  1830  000808  B4D8               	btfsc	status,2,c
  1831  00080A  D650               	goto	l3284
  1832  00080C  0A15               	xorlw	21	; case 81
  1833  00080E  B4D8               	btfsc	status,2,c
  1834  000810  D6F7               	goto	l3358
  1835  000812  0A35               	xorlw	53	; case 100
  1836  000814  B4D8               	btfsc	status,2,c
  1837  000816  D75E               	goto	l3398
  1838  000818  0A01               	xorlw	1	; case 101
  1839  00081A  B4D8               	btfsc	status,2,c
  1840  00081C  D78A               	goto	l3418
  1841  00081E  0A03               	xorlw	3	; case 102
  1842  000820  B4D8               	btfsc	status,2,c
  1843  000822  D7CE               	goto	l3442
  1844  000824                     l3458:
  1845                           
  1846                           ;main.c: 513:                     Serial_Flag = 0;
  1847  000824  0E00               	movlw	0
  1848  000826  6E32               	movwf	_Serial_Flag,c
  1849                           
  1850                           ;main.c: 514:                     Serial_GData = 0;
  1851  000828  0E00               	movlw	0
  1852  00082A  6E31               	movwf	_Serial_GData,c
  1853  00082C                     l3460:
  1854                           
  1855                           ;main.c: 518:                 {;main.c: 519:                     OpMode = 2;
  1856  00082C  0E02               	movlw	2
  1857  00082E  6E52               	movwf	_OpMode,c	;volatile
  1858  000830  D5D5               	goto	l265
  1859  000832                     l3462:
  1860  000832  5052               	movf	_OpMode,w,c	;volatile
  1861  000834  6E4D               	movwf	??_main& (0+255),c
  1862  000836  6A4E               	clrf	(??_main+1)& (0+255),c
  1863                           
  1864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1865                           ; Switch size 1, requested type "simple"
  1866                           ; Number of cases is 1, Range of values is 0 to 0
  1867                           ; switch strategies available:
  1868                           ; Name         Instructions Cycles
  1869                           ; simple_byte            4     3 (average)
  1870                           ;	Chosen strategy is simple_byte
  1871  000838  504E               	movf	??_main+1,w,c
  1872  00083A  0A00               	xorlw	0	; case 0
  1873  00083C  A4D8               	btfss	status,2,c
  1874  00083E  D5CE               	goto	l265
  1875                           
  1876                           ; Switch size 1, requested type "simple"
  1877                           ; Number of cases is 2, Range of values is 2 to 4
  1878                           ; switch strategies available:
  1879                           ; Name         Instructions Cycles
  1880                           ; simple_byte            7     4 (average)
  1881                           ;	Chosen strategy is simple_byte
  1882  000840  504D               	movf	??_main,w,c
  1883  000842  0A02               	xorlw	2	; case 2
  1884  000844  B4D8               	btfsc	status,2,c
  1885  000846  D5CC               	goto	l267
  1886  000848  0A06               	xorlw	6	; case 4
  1887  00084A  B4D8               	btfsc	status,2,c
  1888  00084C  D62B               	goto	u2170
  1889  00084E  D5C6               	goto	l265
  1890  000850                     __end_of_main:
  1891                           	opt callstack 0
  1892                           
  1893 ;; *************** function _write_i2c *****************
  1894 ;; Defined at:
  1895 ;;		line 741 in file "main.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  address         4   20[COMRAM] long 
  1898 ;;  data            2   24[COMRAM] int 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        6 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    4
  1917 ;; This function calls:
  1918 ;;		___aldiv
  1919 ;;		_i2c_Address
  1920 ;;		_i2c_Start
  1921 ;;		_i2c_Stop
  1922 ;;		_i2c_Write
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text1
  1929  00112C                     __ptext1:
  1930                           	opt callstack 0
  1931  00112C                     _write_i2c:
  1932                           	opt callstack 26
  1933                           
  1934                           ;main.c: 741: void write_i2c(long address, int data);main.c: 742: {;main.c: 743:  i2c_St
      +                          art();
  1935                           
  1936                           ;incstack = 0
  1937  00112C  ECE1  F009         	call	_i2c_Start	;wreg free
  1938                           
  1939                           ;main.c: 744:  i2c_Address(0xA0, 0);
  1940  001130  0E00               	movlw	0
  1941  001132  6E3A               	movwf	i2c_Address@mode,c
  1942  001134  0EA0               	movlw	160
  1943  001136  EC99  F009         	call	_i2c_Address
  1944                           
  1945                           ;main.c: 745:  i2c_Write((unsigned char)(address/0x100));
  1946  00113A  C047  F039         	movff	write_i2c@address,___aldiv@dividend
  1947  00113E  C048  F03A         	movff	write_i2c@address+1,___aldiv@dividend+1
  1948  001142  C049  F03B         	movff	write_i2c@address+2,___aldiv@dividend+2
  1949  001146  C04A  F03C         	movff	write_i2c@address+3,___aldiv@dividend+3
  1950  00114A  0E00               	movlw	0
  1951  00114C  6E3D               	movwf	___aldiv@divisor,c
  1952  00114E  0E01               	movlw	1
  1953  001150  6E3E               	movwf	___aldiv@divisor+1,c
  1954  001152  0E00               	movlw	0
  1955  001154  6E3F               	movwf	___aldiv@divisor+2,c
  1956  001156  0E00               	movlw	0
  1957  001158  6E40               	movwf	___aldiv@divisor+3,c
  1958  00115A  EC72  F005         	call	___aldiv	;wreg free
  1959  00115E  5039               	movf	?___aldiv,w,c
  1960  001160  ECBB  F009         	call	_i2c_Write
  1961                           
  1962                           ;main.c: 746:  i2c_Write((unsigned char)(address&0xFF));
  1963  001164  5047               	movf	write_i2c@address,w,c
  1964  001166  ECBB  F009         	call	_i2c_Write
  1965                           
  1966                           ;main.c: 747:  i2c_Write((unsigned char)data);
  1967  00116A  504B               	movf	write_i2c@data,w,c
  1968  00116C  ECBB  F009         	call	_i2c_Write
  1969                           
  1970                           ;main.c: 748:   i2c_Stop();
  1971  001170  ECDD  F009         	call	_i2c_Stop	;wreg free
  1972  001174  0012               	return		;funcret
  1973  001176                     __end_of_write_i2c:
  1974                           	opt callstack 0
  1975                           
  1976 ;; *************** function _read_i2c *****************
  1977 ;; Defined at:
  1978 ;;		line 752 in file "main.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  address         4   20[COMRAM] long 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  read_byte       2   24[COMRAM] int 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2   20[COMRAM] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;Total ram usage:        6 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    4
  1999 ;; This function calls:
  2000 ;;		___aldiv
  2001 ;;		_i2c_Address
  2002 ;;		_i2c_Read
  2003 ;;		_i2c_Restart
  2004 ;;		_i2c_Start
  2005 ;;		_i2c_Stop
  2006 ;;		_i2c_Write
  2007 ;; This function is called by:
  2008 ;;		_main
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text2
  2013  000FC4                     __ptext2:
  2014                           	opt callstack 0
  2015  000FC4                     _read_i2c:
  2016                           	opt callstack 26
  2017                           
  2018                           ;main.c: 752: int read_i2c(long address);main.c: 753: {;main.c: 754:  int read_byte;;mai
      +                          n.c: 757:  i2c_Start();
  2019                           
  2020                           ;incstack = 0
  2021  000FC4  ECE1  F009         	call	_i2c_Start	;wreg free
  2022                           
  2023                           ;main.c: 758:  i2c_Address(0xA0, 0);
  2024  000FC8  0E00               	movlw	0
  2025  000FCA  6E3A               	movwf	i2c_Address@mode,c
  2026  000FCC  0EA0               	movlw	160
  2027  000FCE  EC99  F009         	call	_i2c_Address
  2028                           
  2029                           ;main.c: 759:  i2c_Write((unsigned char)(address/0x100));
  2030  000FD2  C047  F039         	movff	read_i2c@address,___aldiv@dividend
  2031  000FD6  C048  F03A         	movff	read_i2c@address+1,___aldiv@dividend+1
  2032  000FDA  C049  F03B         	movff	read_i2c@address+2,___aldiv@dividend+2
  2033  000FDE  C04A  F03C         	movff	read_i2c@address+3,___aldiv@dividend+3
  2034  000FE2  0E00               	movlw	0
  2035  000FE4  6E3D               	movwf	___aldiv@divisor,c
  2036  000FE6  0E01               	movlw	1
  2037  000FE8  6E3E               	movwf	___aldiv@divisor+1,c
  2038  000FEA  0E00               	movlw	0
  2039  000FEC  6E3F               	movwf	___aldiv@divisor+2,c
  2040  000FEE  0E00               	movlw	0
  2041  000FF0  6E40               	movwf	___aldiv@divisor+3,c
  2042  000FF2  EC72  F005         	call	___aldiv	;wreg free
  2043  000FF6  5039               	movf	?___aldiv,w,c
  2044  000FF8  ECBB  F009         	call	_i2c_Write
  2045                           
  2046                           ;main.c: 760:  i2c_Write((unsigned char)(address&0xFF));
  2047  000FFC  5047               	movf	read_i2c@address,w,c
  2048  000FFE  ECBB  F009         	call	_i2c_Write
  2049                           
  2050                           ;main.c: 761:  i2c_Restart();
  2051  001002  ECE5  F009         	call	_i2c_Restart	;wreg free
  2052                           
  2053                           ;main.c: 762:  i2c_Address(0xA0, 1);
  2054  001006  0E01               	movlw	1
  2055  001008  6E3A               	movwf	i2c_Address@mode,c
  2056  00100A  0EA0               	movlw	160
  2057  00100C  EC99  F009         	call	_i2c_Address
  2058                           
  2059                           ;main.c: 763:  read_byte = i2c_Read(0);
  2060  001010  0E00               	movlw	0
  2061  001012  EC49  F009         	call	_i2c_Read
  2062  001016  C03A  F04B         	movff	?_i2c_Read,read_i2c@read_byte
  2063  00101A  C03B  F04C         	movff	?_i2c_Read+1,read_i2c@read_byte+1
  2064                           
  2065                           ;main.c: 767:     i2c_Stop();
  2066  00101E  ECDD  F009         	call	_i2c_Stop	;wreg free
  2067                           
  2068                           ;main.c: 768:  return (read_byte);
  2069  001022  C04B  F047         	movff	read_i2c@read_byte,?_read_i2c
  2070  001026  C04C  F048         	movff	read_i2c@read_byte+1,?_read_i2c+1
  2071  00102A  0012               	return		;funcret
  2072  00102C                     __end_of_read_i2c:
  2073                           	opt callstack 0
  2074                           
  2075 ;; *************** function _i2c_Write *****************
  2076 ;; Defined at:
  2077 ;;		line 55 in file "./i2c.h"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  data            1    wreg     unsigned char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  data            1    7[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;Total ram usage:        1 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    3
  2098 ;; This function calls:
  2099 ;;		_i2c_Wait
  2100 ;; This function is called by:
  2101 ;;		_write_i2c
  2102 ;;		_read_i2c
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text3
  2107  001376                     __ptext3:
  2108                           	opt callstack 0
  2109  001376                     _i2c_Write:
  2110                           	opt callstack 26
  2111                           
  2112                           ;incstack = 0
  2113                           ;i2c_Write@data stored from wreg
  2114  001376  6E3A               	movwf	i2c_Write@data,c
  2115                           
  2116                           ;./i2c.h: 55: void i2c_Write(unsigned char data);./i2c.h: 56: {;./i2c.h: 57:   i2c_Wait(
      +                          );
  2117  001378  ECA3  F009         	call	_i2c_Wait	;wreg free
  2118                           
  2119                           ;./i2c.h: 58:   SSP2BUF = data;
  2120  00137C  C03A  FF6F         	movff	i2c_Write@data,3951	;volatile
  2121  001380  0012               	return		;funcret
  2122  001382                     __end_of_i2c_Write:
  2123                           	opt callstack 0
  2124                           
  2125 ;; *************** function _i2c_Stop *****************
  2126 ;; Defined at:
  2127 ;;		line 48 in file "./i2c.h"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;Total ram usage:        0 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    3
  2148 ;; This function calls:
  2149 ;;		_i2c_Wait
  2150 ;; This function is called by:
  2151 ;;		_write_i2c
  2152 ;;		_read_i2c
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text4
  2157  0013BA                     __ptext4:
  2158                           	opt callstack 0
  2159  0013BA                     _i2c_Stop:
  2160                           	opt callstack 26
  2161                           
  2162                           ;./i2c.h: 50:   i2c_Wait();
  2163                           
  2164                           ;incstack = 0
  2165  0013BA  ECA3  F009         	call	_i2c_Wait	;wreg free
  2166                           
  2167                           ;./i2c.h: 51:   PEN2=1;
  2168  0013BE  846B               	bsf	3947,2,c	;volatile
  2169  0013C0  0012               	return		;funcret
  2170  0013C2                     __end_of_i2c_Stop:
  2171                           	opt callstack 0
  2172                           
  2173 ;; *************** function _i2c_Start *****************
  2174 ;; Defined at:
  2175 ;;		line 35 in file "./i2c.h"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    3
  2196 ;; This function calls:
  2197 ;;		_i2c_Wait
  2198 ;; This function is called by:
  2199 ;;		_write_i2c
  2200 ;;		_read_i2c
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text5
  2205  0013C2                     __ptext5:
  2206                           	opt callstack 0
  2207  0013C2                     _i2c_Start:
  2208                           	opt callstack 26
  2209                           
  2210                           ;./i2c.h: 37:   i2c_Wait();
  2211                           
  2212                           ;incstack = 0
  2213  0013C2  ECA3  F009         	call	_i2c_Wait	;wreg free
  2214                           
  2215                           ;./i2c.h: 38:  SEN2=1;
  2216  0013C6  806B               	bsf	3947,0,c	;volatile
  2217  0013C8  0012               	return		;funcret
  2218  0013CA                     __end_of_i2c_Start:
  2219                           	opt callstack 0
  2220                           
  2221 ;; *************** function _i2c_Restart *****************
  2222 ;; Defined at:
  2223 ;;		line 42 in file "./i2c.h"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    3
  2244 ;; This function calls:
  2245 ;;		_i2c_Wait
  2246 ;; This function is called by:
  2247 ;;		_read_i2c
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text6
  2252  0013CA                     __ptext6:
  2253                           	opt callstack 0
  2254  0013CA                     _i2c_Restart:
  2255                           	opt callstack 26
  2256                           
  2257                           ;./i2c.h: 43:   i2c_Wait();
  2258                           
  2259                           ;incstack = 0
  2260  0013CA  ECA3  F009         	call	_i2c_Wait	;wreg free
  2261                           
  2262                           ;./i2c.h: 44:  RSEN2=1;
  2263  0013CE  826B               	bsf	3947,1,c	;volatile
  2264  0013D0  0012               	return		;funcret
  2265  0013D2                     __end_of_i2c_Restart:
  2266                           	opt callstack 0
  2267                           
  2268 ;; *************** function _i2c_Read *****************
  2269 ;; Defined at:
  2270 ;;		line 74 in file "./i2c.h"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  ack             1    wreg     unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  ack             1    9[COMRAM] unsigned char 
  2275 ;;  i2cReadData     1   10[COMRAM] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2    7[COMRAM] int 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2285 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;Total ram usage:        4 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    3
  2292 ;; This function calls:
  2293 ;;		_i2c_Wait
  2294 ;; This function is called by:
  2295 ;;		_read_i2c
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text7
  2300  001292                     __ptext7:
  2301                           	opt callstack 0
  2302  001292                     _i2c_Read:
  2303                           	opt callstack 26
  2304                           
  2305                           ;incstack = 0
  2306                           ;i2c_Read@ack stored from wreg
  2307  001292  6E3C               	movwf	i2c_Read@ack,c
  2308                           
  2309                           ;./i2c.h: 74: int i2c_Read(unsigned char ack);./i2c.h: 75: {;./i2c.h: 79:   unsigned cha
      +                          r i2cReadData;;./i2c.h: 81:   i2c_Wait();
  2310  001294  ECA3  F009         	call	_i2c_Wait	;wreg free
  2311                           
  2312                           ;./i2c.h: 82:  RCEN2=1;
  2313  001298  866B               	bsf	3947,3,c	;volatile
  2314                           
  2315                           ;./i2c.h: 83:   i2c_Wait();
  2316  00129A  ECA3  F009         	call	_i2c_Wait	;wreg free
  2317                           
  2318                           ;./i2c.h: 84:   i2cReadData = SSP2BUF;
  2319  00129E  CF6F F03D          	movff	3951,i2c_Read@i2cReadData	;volatile
  2320                           
  2321                           ;./i2c.h: 85:   i2c_Wait();
  2322  0012A2  ECA3  F009         	call	_i2c_Wait	;wreg free
  2323                           
  2324                           ;./i2c.h: 86:   if ( ack )
  2325  0012A6  503C               	movf	i2c_Read@ack,w,c
  2326  0012A8  B4D8               	btfsc	status,2,c
  2327  0012AA  D002               	goto	l179
  2328                           
  2329                           ;./i2c.h: 87:   ACKDT2=0;
  2330  0012AC  9A6B               	bcf	3947,5,c	;volatile
  2331  0012AE  D001               	goto	l180
  2332  0012B0                     l179:
  2333                           
  2334                           ;./i2c.h: 89:   ACKDT2=1;
  2335  0012B0  8A6B               	bsf	3947,5,c	;volatile
  2336  0012B2                     l180:
  2337                           
  2338                           ;./i2c.h: 90:  ACKEN2=1;
  2339  0012B2  886B               	bsf	3947,4,c	;volatile
  2340                           
  2341                           ;./i2c.h: 92:  return( i2cReadData );
  2342  0012B4  C03D  F03A         	movff	i2c_Read@i2cReadData,?_i2c_Read
  2343  0012B8  6A3B               	clrf	?_i2c_Read+1,c
  2344  0012BA  0012               	return		;funcret
  2345  0012BC                     __end_of_i2c_Read:
  2346                           	opt callstack 0
  2347                           
  2348 ;; *************** function _i2c_Address *****************
  2349 ;; Defined at:
  2350 ;;		line 63 in file "./i2c.h"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  address         1    wreg     unsigned char 
  2353 ;;  mode            1    7[COMRAM] unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  address         1    8[COMRAM] unsigned char 
  2356 ;;  l_address       1    9[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2366 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;Total ram usage:        3 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    3
  2373 ;; This function calls:
  2374 ;;		_i2c_Wait
  2375 ;; This function is called by:
  2376 ;;		_write_i2c
  2377 ;;		_read_i2c
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text8
  2382  001332                     __ptext8:
  2383                           	opt callstack 0
  2384  001332                     _i2c_Address:
  2385                           	opt callstack 26
  2386                           
  2387                           ;incstack = 0
  2388                           ;i2c_Address@address stored from wreg
  2389  001332  6E3B               	movwf	i2c_Address@address,c
  2390                           
  2391                           ;./i2c.h: 63: void i2c_Address(unsigned char address, unsigned char mode);./i2c.h: 64: {
      +                          ;./i2c.h: 65:  unsigned char l_address;;./i2c.h: 67:  l_address=address;
  2392  001334  C03B  F03C         	movff	i2c_Address@address,i2c_Address@l_address
  2393                           
  2394                           ;./i2c.h: 68:  l_address += mode;
  2395  001338  503A               	movf	i2c_Address@mode,w,c
  2396  00133A  263C               	addwf	i2c_Address@l_address,f,c
  2397                           
  2398                           ;./i2c.h: 69:   i2c_Wait();
  2399  00133C  ECA3  F009         	call	_i2c_Wait	;wreg free
  2400                           
  2401                           ;./i2c.h: 70:   SSP2BUF = l_address;
  2402  001340  C03C  FF6F         	movff	i2c_Address@l_address,3951	;volatile
  2403  001344  0012               	return		;funcret
  2404  001346                     __end_of_i2c_Address:
  2405                           	opt callstack 0
  2406                           
  2407 ;; *************** function _i2c_Wait *****************
  2408 ;; Defined at:
  2409 ;;		line 30 in file "./i2c.h"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, status,2, status,0
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;Total ram usage:        1 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    2
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_i2c_Start
  2434 ;;		_i2c_Restart
  2435 ;;		_i2c_Stop
  2436 ;;		_i2c_Write
  2437 ;;		_i2c_Address
  2438 ;;		_i2c_Read
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text9
  2443  001346                     __ptext9:
  2444                           	opt callstack 0
  2445  001346                     _i2c_Wait:
  2446                           	opt callstack 26
  2447                           
  2448                           ;./i2c.h: 31:     while ( ( SSP2CON2 & 0x1F ) || ( SSP2STAT & 0x04 ) );
  2449                           
  2450                           ;incstack = 0
  2451  001346  CF6B F039          	movff	3947,??_i2c_Wait	;volatile
  2452  00134A  0E1F               	movlw	31
  2453  00134C  1639               	andwf	??_i2c_Wait,f,c
  2454  00134E  A4D8               	btfss	status,2,c
  2455  001350  D7FA               	goto	_i2c_Wait
  2456  001352  A46D               	btfss	3949,2,c	;volatile
  2457  001354  0012               	return	
  2458  001356  D7F7               	goto	_i2c_Wait
  2459  001358                     __end_of_i2c_Wait:
  2460                           	opt callstack 0
  2461                           
  2462 ;; *************** function ___aldiv *****************
  2463 ;; Defined at:
  2464 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  dividend        4    6[COMRAM] long 
  2467 ;;  divisor         4   10[COMRAM] long 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  quotient        4   16[COMRAM] long 
  2470 ;;  sign            1   15[COMRAM] unsigned char 
  2471 ;;  counter         1   14[COMRAM] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  4    6[COMRAM] long 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2481 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;Total ram usage:       14 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    2
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_write_i2c
  2492 ;;		_read_i2c
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text10
  2497  000AE4                     __ptext10:
  2498                           	opt callstack 0
  2499  000AE4                     ___aldiv:
  2500                           	opt callstack 27
  2501                           
  2502                           ;incstack = 0
  2503  000AE4  0E00               	movlw	0
  2504  000AE6  6E42               	movwf	___aldiv@sign,c
  2505  000AE8  AE40               	btfss	___aldiv@divisor+3,7,c
  2506  000AEA  D00A               	goto	l2744
  2507  000AEC  1E40               	comf	___aldiv@divisor+3,f,c
  2508  000AEE  1E3F               	comf	___aldiv@divisor+2,f,c
  2509  000AF0  1E3E               	comf	___aldiv@divisor+1,f,c
  2510  000AF2  6C3D               	negf	___aldiv@divisor,c
  2511  000AF4  0E00               	movlw	0
  2512  000AF6  223E               	addwfc	___aldiv@divisor+1,f,c
  2513  000AF8  223F               	addwfc	___aldiv@divisor+2,f,c
  2514  000AFA  2240               	addwfc	___aldiv@divisor+3,f,c
  2515  000AFC  0E01               	movlw	1
  2516  000AFE  6E42               	movwf	___aldiv@sign,c
  2517  000B00                     l2744:
  2518  000B00  AE3C               	btfss	___aldiv@dividend+3,7,c
  2519  000B02  D00A               	goto	l2750
  2520  000B04  1E3C               	comf	___aldiv@dividend+3,f,c
  2521  000B06  1E3B               	comf	___aldiv@dividend+2,f,c
  2522  000B08  1E3A               	comf	___aldiv@dividend+1,f,c
  2523  000B0A  6C39               	negf	___aldiv@dividend,c
  2524  000B0C  0E00               	movlw	0
  2525  000B0E  223A               	addwfc	___aldiv@dividend+1,f,c
  2526  000B10  223B               	addwfc	___aldiv@dividend+2,f,c
  2527  000B12  223C               	addwfc	___aldiv@dividend+3,f,c
  2528  000B14  0E01               	movlw	1
  2529  000B16  1A42               	xorwf	___aldiv@sign,f,c
  2530  000B18                     l2750:
  2531  000B18  0E00               	movlw	0
  2532  000B1A  6E43               	movwf	___aldiv@quotient,c
  2533  000B1C  0E00               	movlw	0
  2534  000B1E  6E44               	movwf	___aldiv@quotient+1,c
  2535  000B20  0E00               	movlw	0
  2536  000B22  6E45               	movwf	___aldiv@quotient+2,c
  2537  000B24  0E00               	movlw	0
  2538  000B26  6E46               	movwf	___aldiv@quotient+3,c
  2539  000B28  503D               	movf	___aldiv@divisor,w,c
  2540  000B2A  103E               	iorwf	___aldiv@divisor+1,w,c
  2541  000B2C  103F               	iorwf	___aldiv@divisor+2,w,c
  2542  000B2E  1040               	iorwf	___aldiv@divisor+3,w,c
  2543  000B30  B4D8               	btfsc	status,2,c
  2544  000B32  D02A               	goto	l2772
  2545  000B34  0E01               	movlw	1
  2546  000B36  6E41               	movwf	___aldiv@counter,c
  2547  000B38  D006               	goto	l2758
  2548  000B3A                     l2756:
  2549  000B3A  90D8               	bcf	status,0,c
  2550  000B3C  363D               	rlcf	___aldiv@divisor,f,c
  2551  000B3E  363E               	rlcf	___aldiv@divisor+1,f,c
  2552  000B40  363F               	rlcf	___aldiv@divisor+2,f,c
  2553  000B42  3640               	rlcf	___aldiv@divisor+3,f,c
  2554  000B44  2A41               	incf	___aldiv@counter,f,c
  2555  000B46                     l2758:
  2556  000B46  AE40               	btfss	___aldiv@divisor+3,7,c
  2557  000B48  D7F8               	goto	l2756
  2558  000B4A                     u1560:
  2559  000B4A  90D8               	bcf	status,0,c
  2560  000B4C  3643               	rlcf	___aldiv@quotient,f,c
  2561  000B4E  3644               	rlcf	___aldiv@quotient+1,f,c
  2562  000B50  3645               	rlcf	___aldiv@quotient+2,f,c
  2563  000B52  3646               	rlcf	___aldiv@quotient+3,f,c
  2564  000B54  503D               	movf	___aldiv@divisor,w,c
  2565  000B56  5C39               	subwf	___aldiv@dividend,w,c
  2566  000B58  503E               	movf	___aldiv@divisor+1,w,c
  2567  000B5A  583A               	subwfb	___aldiv@dividend+1,w,c
  2568  000B5C  503F               	movf	___aldiv@divisor+2,w,c
  2569  000B5E  583B               	subwfb	___aldiv@dividend+2,w,c
  2570  000B60  5040               	movf	___aldiv@divisor+3,w,c
  2571  000B62  583C               	subwfb	___aldiv@dividend+3,w,c
  2572  000B64  A0D8               	btfss	status,0,c
  2573  000B66  D009               	goto	l2768
  2574  000B68  503D               	movf	___aldiv@divisor,w,c
  2575  000B6A  5E39               	subwf	___aldiv@dividend,f,c
  2576  000B6C  503E               	movf	___aldiv@divisor+1,w,c
  2577  000B6E  5A3A               	subwfb	___aldiv@dividend+1,f,c
  2578  000B70  503F               	movf	___aldiv@divisor+2,w,c
  2579  000B72  5A3B               	subwfb	___aldiv@dividend+2,f,c
  2580  000B74  5040               	movf	___aldiv@divisor+3,w,c
  2581  000B76  5A3C               	subwfb	___aldiv@dividend+3,f,c
  2582  000B78  8043               	bsf	___aldiv@quotient,0,c
  2583  000B7A                     l2768:
  2584  000B7A  90D8               	bcf	status,0,c
  2585  000B7C  3240               	rrcf	___aldiv@divisor+3,f,c
  2586  000B7E  323F               	rrcf	___aldiv@divisor+2,f,c
  2587  000B80  323E               	rrcf	___aldiv@divisor+1,f,c
  2588  000B82  323D               	rrcf	___aldiv@divisor,f,c
  2589  000B84  2E41               	decfsz	___aldiv@counter,f,c
  2590  000B86  D7E1               	goto	u1560
  2591  000B88                     l2772:
  2592  000B88  5042               	movf	___aldiv@sign,w,c
  2593  000B8A  B4D8               	btfsc	status,2,c
  2594  000B8C  D008               	goto	l2776
  2595  000B8E  1E46               	comf	___aldiv@quotient+3,f,c
  2596  000B90  1E45               	comf	___aldiv@quotient+2,f,c
  2597  000B92  1E44               	comf	___aldiv@quotient+1,f,c
  2598  000B94  6C43               	negf	___aldiv@quotient,c
  2599  000B96  0E00               	movlw	0
  2600  000B98  2244               	addwfc	___aldiv@quotient+1,f,c
  2601  000B9A  2245               	addwfc	___aldiv@quotient+2,f,c
  2602  000B9C  2246               	addwfc	___aldiv@quotient+3,f,c
  2603  000B9E                     l2776:
  2604  000B9E  C043  F039         	movff	___aldiv@quotient,?___aldiv
  2605  000BA2  C044  F03A         	movff	___aldiv@quotient+1,?___aldiv+1
  2606  000BA6  C045  F03B         	movff	___aldiv@quotient+2,?___aldiv+2
  2607  000BAA  C046  F03C         	movff	___aldiv@quotient+3,?___aldiv+3
  2608  000BAE  0012               	return		;funcret
  2609  000BB0                     __end_of___aldiv:
  2610                           	opt callstack 0
  2611                           
  2612 ;; *************** function _initUSART *****************
  2613 ;; Defined at:
  2614 ;;		line 681 in file "main.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    2
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_main
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text11
  2643  0012BC                     __ptext11:
  2644                           	opt callstack 0
  2645  0012BC                     _initUSART:
  2646                           	opt callstack 28
  2647                           
  2648                           ;main.c: 684:     TRISCbits.TRISC6 = 0;
  2649                           
  2650                           ;incstack = 0
  2651  0012BC  9C94               	bcf	3988,6,c	;volatile
  2652                           
  2653                           ;main.c: 685:     TRISCbits.TRISC7 = 1;
  2654  0012BE  8E94               	bsf	3988,7,c	;volatile
  2655                           
  2656                           ;main.c: 686:     TXSTA1bits.SYNC = 0;
  2657  0012C0  98AD               	bcf	4013,4,c	;volatile
  2658                           
  2659                           ;main.c: 687:     TXSTA1bits.TX9 = 0;
  2660  0012C2  9CAD               	bcf	4013,6,c	;volatile
  2661                           
  2662                           ;main.c: 688:     TXSTA1bits.TXEN = 1;
  2663  0012C4  8AAD               	bsf	4013,5,c	;volatile
  2664                           
  2665                           ;main.c: 689:     RCSTA1bits.RX9 = 0;
  2666  0012C6  9CAC               	bcf	4012,6,c	;volatile
  2667                           
  2668                           ;main.c: 690:     RCSTA1bits.CREN = 1;
  2669  0012C8  88AC               	bsf	4012,4,c	;volatile
  2670                           
  2671                           ;main.c: 691:     TXSTA1bits.CSRC = 0;
  2672  0012CA  9EAD               	bcf	4013,7,c	;volatile
  2673                           
  2674                           ;main.c: 692:     RCSTA1bits.ADDEN = 1;
  2675  0012CC  86AC               	bsf	4012,3,c	;volatile
  2676                           
  2677                           ;main.c: 693:     RCSTA1bits.SPEN = 1;
  2678  0012CE  8EAC               	bsf	4012,7,c	;volatile
  2679                           
  2680                           ;main.c: 696:     BAUDCON1bits.BRG16 = 0;
  2681  0012D0  967E               	bcf	3966,3,c	;volatile
  2682                           
  2683                           ;main.c: 697:     TXSTA1bits.BRGH = 1;
  2684  0012D2  84AD               	bsf	4013,2,c	;volatile
  2685                           
  2686                           ;main.c: 698:     PIE1bits.RC1IE = 1;
  2687  0012D4  8A9D               	bsf	3997,5,c	;volatile
  2688                           
  2689                           ;main.c: 699:     PIE1bits.TX1IE = 0;
  2690  0012D6  989D               	bcf	3997,4,c	;volatile
  2691                           
  2692                           ;main.c: 701:     SPBRG1 = 25;
  2693  0012D8  0E19               	movlw	25
  2694  0012DA  6EB0               	movwf	4016,c	;volatile
  2695                           
  2696                           ;main.c: 702:     SPBRGH1 = 0;
  2697  0012DC  0E00               	movlw	0
  2698  0012DE  6E7F               	movwf	3967,c	;volatile
  2699  0012E0  0012               	return		;funcret
  2700  0012E2                     __end_of_initUSART:
  2701                           	opt callstack 0
  2702                           
  2703 ;; *************** function _initMotor *****************
  2704 ;; Defined at:
  2705 ;;		line 775 in file "main.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    2
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text12
  2734  001368                     __ptext12:
  2735                           	opt callstack 0
  2736  001368                     _initMotor:
  2737                           	opt callstack 28
  2738                           
  2739                           ;main.c: 777:     PR4 = 0xC7;
  2740                           
  2741                           ;incstack = 0
  2742  001368  0EC7               	movlw	199
  2743  00136A  6E77               	movwf	3959,c	;volatile
  2744                           
  2745                           ;main.c: 778:     T3CONbits.T3CCP1 = 0;
  2746  00136C  9679               	bcf	3961,3,c	;volatile
  2747                           
  2748                           ;main.c: 779:     T3CONbits.T3CCP2 = 1;
  2749  00136E  8C79               	bsf	3961,6,c	;volatile
  2750                           
  2751                           ;main.c: 780:     T4CON = 0x00;
  2752  001370  0E00               	movlw	0
  2753  001372  6E76               	movwf	3958,c	;volatile
  2754  001374  0012               	return		;funcret
  2755  001376                     __end_of_initMotor:
  2756                           	opt callstack 0
  2757                           
  2758 ;; *************** function _init *****************
  2759 ;; Defined at:
  2760 ;;		line 627 in file "main.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    2
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text13
  2789  0010E0                     __ptext13:
  2790                           	opt callstack 0
  2791  0010E0                     _init:
  2792                           	opt callstack 28
  2793                           
  2794                           ;main.c: 629:     TRISA = 0xFb;
  2795                           
  2796                           ;incstack = 0
  2797  0010E0  0EFB               	movlw	251
  2798  0010E2  6E92               	movwf	3986,c	;volatile
  2799                           
  2800                           ;main.c: 630:     TRISB = 0XFF;
  2801  0010E4  6893               	setf	3987,c	;volatile
  2802                           
  2803                           ;main.c: 631:     TRISC = 0X84;
  2804  0010E6  0E84               	movlw	132
  2805  0010E8  6E94               	movwf	3988,c	;volatile
  2806                           
  2807                           ;main.c: 632:     TRISD = 0XC0;
  2808  0010EA  0EC0               	movlw	192
  2809  0010EC  6E95               	movwf	3989,c	;volatile
  2810                           
  2811                           ;main.c: 633:     TRISE = 0X00;
  2812  0010EE  0E00               	movlw	0
  2813  0010F0  6E96               	movwf	3990,c	;volatile
  2814                           
  2815                           ;main.c: 634:     TRISF = 0X00;
  2816  0010F2  0E00               	movlw	0
  2817  0010F4  6E97               	movwf	3991,c	;volatile
  2818                           
  2819                           ;main.c: 635:     TRISG = 0X05;
  2820  0010F6  0E05               	movlw	5
  2821  0010F8  6E98               	movwf	3992,c	;volatile
  2822                           
  2823                           ;main.c: 638:     ADCON0bits.VCFG1 = 0;
  2824  0010FA  9EC2               	bcf	4034,7,c	;volatile
  2825                           
  2826                           ;main.c: 639:  ADCON0bits.VCFG0 = 0;
  2827  0010FC  9CC2               	bcf	4034,6,c	;volatile
  2828                           
  2829                           ;main.c: 640:     ADCON0bits.ADON=0;
  2830  0010FE  90C2               	bcf	4034,0,c	;volatile
  2831                           
  2832                           ;main.c: 643:  ADCON1bits.ADFM = 1;
  2833  001100  8EC1               	bsf	4033,7,c	;volatile
  2834                           
  2835                           ;main.c: 644:  ADCON1bits.ADCAL = 0;
  2836  001102  9CC1               	bcf	4033,6,c	;volatile
  2837                           
  2838                           ;main.c: 645:  ADCON1bits.ACQT2 = 0;
  2839  001104  9AC1               	bcf	4033,5,c	;volatile
  2840                           
  2841                           ;main.c: 646:  ADCON1bits.ACQT1 = 1;
  2842  001106  88C1               	bsf	4033,4,c	;volatile
  2843                           
  2844                           ;main.c: 647:  ADCON1bits.ACQT0 = 0;
  2845  001108  96C1               	bcf	4033,3,c	;volatile
  2846                           
  2847                           ;main.c: 648:  ADCON1bits.ADCS2 = 1;
  2848  00110A  84C1               	bsf	4033,2,c	;volatile
  2849                           
  2850                           ;main.c: 649:  ADCON1bits.ADCS1 = 0;
  2851  00110C  92C1               	bcf	4033,1,c	;volatile
  2852                           
  2853                           ;main.c: 650:  ADCON1bits.ADCS0 = 0;
  2854  00110E  90C1               	bcf	4033,0,c	;volatile
  2855                           
  2856                           ;main.c: 653:  WDTCONbits.ADSHR = 1;
  2857  001110  88C0               	bsf	4032,4,c	;volatile
  2858                           
  2859                           ;main.c: 659:  ANCON0bits.PCFG0 = 0;
  2860  001112  90C1               	bcf	4033,0,c	;volatile
  2861                           
  2862                           ;main.c: 660:  ANCON0bits.PCFG1 = 1;
  2863  001114  82C1               	bsf	4033,1,c	;volatile
  2864                           
  2865                           ;main.c: 661:  ANCON0bits.PCFG2 = 1;
  2866  001116  84C1               	bsf	4033,2,c	;volatile
  2867                           
  2868                           ;main.c: 662:  ANCON0bits.PCFG3 = 1;
  2869  001118  86C1               	bsf	4033,3,c	;volatile
  2870                           
  2871                           ;main.c: 663:  ANCON0bits.PCFG4 = 1;
  2872  00111A  88C1               	bsf	4033,4,c	;volatile
  2873                           
  2874                           ;main.c: 664:     ANCON0bits.PCFG7 = 1;
  2875  00111C  8EC1               	bsf	4033,7,c	;volatile
  2876                           
  2877                           ;main.c: 666:     WDTCONbits.ADSHR = 0;
  2878  00111E  98C0               	bcf	4032,4,c	;volatile
  2879                           
  2880                           ;main.c: 668:     INTCONbits.GIE = 1;
  2881  001120  8EF2               	bsf	4082,7,c	;volatile
  2882                           
  2883                           ;main.c: 673:     OSCCONbits.SCS = 0b11;
  2884  001122  0E03               	movlw	3
  2885  001124  12D3               	iorwf	4051,f,c	;volatile
  2886                           
  2887                           ;main.c: 674:     OSCCONbits.IRCF = 0b111;
  2888  001126  0E70               	movlw	112
  2889  001128  12D3               	iorwf	4051,f,c	;volatile
  2890  00112A  0012               	return		;funcret
  2891  00112C                     __end_of_init:
  2892                           	opt callstack 0
  2893                           
  2894 ;; *************** function _i2c_Init *****************
  2895 ;; Defined at:
  2896 ;;		line 13 in file "./i2c.h"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    2
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text14
  2925  00131C                     __ptext14:
  2926                           	opt callstack 0
  2927  00131C                     _i2c_Init:
  2928                           	opt callstack 28
  2929                           
  2930                           ;./i2c.h: 17:  TRISD5=1;
  2931                           
  2932                           ;incstack = 0
  2933  00131C  8A95               	bsf	3989,5,c	;volatile
  2934                           
  2935                           ;./i2c.h: 18:  TRISD6=1;
  2936  00131E  8C95               	bsf	3989,6,c	;volatile
  2937                           
  2938                           ;./i2c.h: 20:  SSP2CON1 = 0b00101000;
  2939  001320  0E28               	movlw	40
  2940  001322  6E6C               	movwf	3948,c	;volatile
  2941                           
  2942                           ;./i2c.h: 21:  SSP2CON2 = 0x00;
  2943  001324  0E00               	movlw	0
  2944  001326  6E6B               	movwf	3947,c	;volatile
  2945                           
  2946                           ;./i2c.h: 23:     SSP2ADD = 39;
  2947  001328  0E27               	movlw	39
  2948  00132A  6E6E               	movwf	3950,c	;volatile
  2949                           
  2950                           ;./i2c.h: 25:  SSP2STAT = 0b11000000;
  2951  00132C  0EC0               	movlw	192
  2952  00132E  6E6D               	movwf	3949,c	;volatile
  2953  001330  0012               	return		;funcret
  2954  001332                     __end_of_i2c_Init:
  2955                           	opt callstack 0
  2956                           
  2957 ;; *************** function _flush *****************
  2958 ;; Defined at:
  2959 ;;		line 1358 in file "main.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  i               2    6[COMRAM] int 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;Total ram usage:        2 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    2
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text15
  2988  001206                     __ptext15:
  2989                           	opt callstack 0
  2990  001206                     _flush:
  2991                           	opt callstack 28
  2992                           
  2993                           ;main.c: 1360:     int i;;main.c: 1362:     for(i=0; i<16; i++)
  2994                           
  2995                           ;incstack = 0
  2996  001206  0E00               	movlw	0
  2997  001208  6E3A               	movwf	flush@i+1,c
  2998  00120A  0E00               	movlw	0
  2999  00120C  6E39               	movwf	flush@i,c
  3000  00120E                     l3114:
  3001                           
  3002                           ;main.c: 1363:     {;main.c: 1364:         Serial_Buffer[i]=0x00;
  3003  00120E  0E01               	movlw	low _Serial_Buffer
  3004  001210  2439               	addwf	flush@i,w,c
  3005  001212  6ED9               	movwf	fsr2l,c
  3006  001214  0E00               	movlw	high _Serial_Buffer
  3007  001216  203A               	addwfc	flush@i+1,w,c
  3008  001218  6EDA               	movwf	fsr2h,c
  3009  00121A  0E00               	movlw	0
  3010  00121C  6EDF               	movwf	indf2,c
  3011                           
  3012                           ;main.c: 1365:     }
  3013  00121E  4A39               	infsnz	flush@i,f,c
  3014  001220  2A3A               	incf	flush@i+1,f,c
  3015  001222  BE3A               	btfsc	flush@i+1,7,c
  3016  001224  D7F4               	goto	l3114
  3017  001226  503A               	movf	flush@i+1,w,c
  3018  001228  E105               	bnz	u1860
  3019  00122A  0E10               	movlw	16
  3020  00122C  5C39               	subwf	flush@i,w,c
  3021  00122E  B0D8               	btfsc	status,0,c
  3022  001230  0012               	return	
  3023  001232  D7ED               	goto	l3114
  3024  001234                     u1860:
  3025  001234  0012               	return		;funcret
  3026  001236                     __end_of_flush:
  3027                           	opt callstack 0
  3028                           
  3029 ;; *************** function _WriteSTLED316SErr *****************
  3030 ;; Defined at:
  3031 ;;		line 1049 in file "main.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  msg             1    wreg     unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  msg             1   14[COMRAM] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, status,0, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;Total ram usage:        3 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    3
  3052 ;; This function calls:
  3053 ;;		_STLED316s_SPI_SendData
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text16
  3060  000BB0                     __ptext16:
  3061                           	opt callstack 0
  3062  000BB0                     _WriteSTLED316SErr:
  3063                           	opt callstack 27
  3064                           
  3065                           ;incstack = 0
  3066                           ;WriteSTLED316SErr@msg stored from wreg
  3067  000BB0  6E41               	movwf	WriteSTLED316SErr@msg,c
  3068                           
  3069                           ;main.c: 1049: void WriteSTLED316SErr( char msg);main.c: 1050: {;main.c: 1051:  LATCbits
      +                          .LATC4 = 0;
  3070  000BB2  988B               	bcf	3979,4,c	;volatile
  3071                           
  3072                           ;main.c: 1053:  STLED316s_SPI_SendData (0x00 );
  3073  000BB4  0E00               	movlw	0
  3074  000BB6  EC47  F008         	call	_STLED316s_SPI_SendData
  3075                           
  3076                           ;main.c: 1056:  LATCbits.LATC4 = 1;
  3077  000BBA  888B               	bsf	3979,4,c	;volatile
  3078                           
  3079                           ;main.c: 1058:  LATCbits.LATC4 = 0;
  3080  000BBC  988B               	bcf	3979,4,c	;volatile
  3081                           
  3082                           ;main.c: 1060:  STLED316s_SPI_SendData (0x00);
  3083  000BBE  0E00               	movlw	0
  3084  000BC0  EC47  F008         	call	_STLED316s_SPI_SendData
  3085                           
  3086                           ;main.c: 1062:  switch(msg)
  3087  000BC4  D031               	goto	l3022
  3088  000BC6                     l3006:
  3089                           
  3090                           ;main.c: 1065:      STLED316s_SPI_SendData (0x79);
  3091  000BC6  0E79               	movlw	121
  3092  000BC8  EC47  F008         	call	_STLED316s_SPI_SendData
  3093                           
  3094                           ;main.c: 1066:         STLED316s_SPI_SendData (0x3F);
  3095  000BCC  0E3F               	movlw	63
  3096  000BCE  EC47  F008         	call	_STLED316s_SPI_SendData
  3097                           
  3098                           ;main.c: 1067:        break;
  3099  000BD2  D047               	goto	l473
  3100  000BD4                     l3008:
  3101                           
  3102                           ;main.c: 1069:      STLED316s_SPI_SendData (0x3F);
  3103  000BD4  0E3F               	movlw	63
  3104  000BD6  EC47  F008         	call	_STLED316s_SPI_SendData
  3105                           
  3106                           ;main.c: 1070:         STLED316s_SPI_SendData (0x73);
  3107  000BDA  0E73               	movlw	115
  3108  000BDC  EC47  F008         	call	_STLED316s_SPI_SendData
  3109                           
  3110                           ;main.c: 1071:       break;
  3111  000BE0  D040               	goto	l473
  3112  000BE2                     l3010:
  3113                           
  3114                           ;main.c: 1073:      STLED316s_SPI_SendData (0x39);
  3115  000BE2  0E39               	movlw	57
  3116  000BE4  EC47  F008         	call	_STLED316s_SPI_SendData
  3117                           
  3118                           ;main.c: 1074:         STLED316s_SPI_SendData (0x77);
  3119  000BE8  0E77               	movlw	119
  3120  000BEA  EC47  F008         	call	_STLED316s_SPI_SendData
  3121                           
  3122                           ;main.c: 1075:        break;
  3123  000BEE  D039               	goto	l473
  3124  000BF0                     l3012:
  3125                           
  3126                           ;main.c: 1077:      STLED316s_SPI_SendData (0x00);
  3127  000BF0  0E00               	movlw	0
  3128  000BF2  EC47  F008         	call	_STLED316s_SPI_SendData
  3129                           
  3130                           ;main.c: 1078:         STLED316s_SPI_SendData (0x00);
  3131  000BF6  0E00               	movlw	0
  3132  000BF8  EC47  F008         	call	_STLED316s_SPI_SendData
  3133                           
  3134                           ;main.c: 1079:        break;
  3135  000BFC  D032               	goto	l473
  3136  000BFE                     l3014:
  3137                           
  3138                           ;main.c: 1081:      STLED316s_SPI_SendData (0x00);
  3139  000BFE  0E00               	movlw	0
  3140  000C00  EC47  F008         	call	_STLED316s_SPI_SendData
  3141                           
  3142                           ;main.c: 1082:         STLED316s_SPI_SendData (0x3F);
  3143  000C04  0E3F               	movlw	63
  3144  000C06  EC47  F008         	call	_STLED316s_SPI_SendData
  3145                           
  3146                           ;main.c: 1083:         break;
  3147  000C0A  D02B               	goto	l473
  3148  000C0C                     l3016:
  3149                           
  3150                           ;main.c: 1085:      STLED316s_SPI_SendData (0x79);
  3151  000C0C  0E79               	movlw	121
  3152  000C0E  EC47  F008         	call	_STLED316s_SPI_SendData
  3153                           
  3154                           ;main.c: 1086:         STLED316s_SPI_SendData (0x06);
  3155  000C12  0E06               	movlw	6
  3156  000C14  EC47  F008         	call	_STLED316s_SPI_SendData
  3157                           
  3158                           ;main.c: 1087:         break;
  3159  000C18  D024               	goto	l473
  3160  000C1A                     l3018:
  3161                           
  3162                           ;main.c: 1089:      STLED316s_SPI_SendData (0x77);
  3163  000C1A  0E77               	movlw	119
  3164  000C1C  EC47  F008         	call	_STLED316s_SPI_SendData
  3165                           
  3166                           ;main.c: 1090:         STLED316s_SPI_SendData (0x3E);
  3167  000C20  0E3E               	movlw	62
  3168  000C22  EC47  F008         	call	_STLED316s_SPI_SendData
  3169                           
  3170                           ;main.c: 1091:         break;
  3171  000C26  D01D               	goto	l473
  3172  000C28                     l3022:
  3173  000C28  5041               	movf	WriteSTLED316SErr@msg,w,c
  3174  000C2A  6E3F               	movwf	??_WriteSTLED316SErr& (0+255),c
  3175  000C2C  6A40               	clrf	(??_WriteSTLED316SErr+1)& (0+255),c
  3176                           
  3177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3178                           ; Switch size 1, requested type "simple"
  3179                           ; Number of cases is 1, Range of values is 0 to 0
  3180                           ; switch strategies available:
  3181                           ; Name         Instructions Cycles
  3182                           ; simple_byte            4     3 (average)
  3183                           ;	Chosen strategy is simple_byte
  3184  000C2E  5040               	movf	??_WriteSTLED316SErr+1,w,c
  3185  000C30  0A00               	xorlw	0	; case 0
  3186  000C32  A4D8               	btfss	status,2,c
  3187  000C34  D016               	goto	l473
  3188                           
  3189                           ; Switch size 1, requested type "simple"
  3190                           ; Number of cases is 7, Range of values is 65 to 88
  3191                           ; switch strategies available:
  3192                           ; Name         Instructions Cycles
  3193                           ; simple_byte           22    12 (average)
  3194                           ;	Chosen strategy is simple_byte
  3195  000C36  503F               	movf	??_WriteSTLED316SErr,w,c
  3196  000C38  0A41               	xorlw	65	; case 65
  3197  000C3A  B4D8               	btfsc	status,2,c
  3198  000C3C  D7EE               	goto	l3018
  3199  000C3E  0A02               	xorlw	2	; case 67
  3200  000C40  B4D8               	btfsc	status,2,c
  3201  000C42  D7CF               	goto	l3010
  3202  000C44  0A06               	xorlw	6	; case 69
  3203  000C46  B4D8               	btfsc	status,2,c
  3204  000C48  D7BE               	goto	l3006
  3205  000C4A  0A02               	xorlw	2	; case 71
  3206  000C4C  B4D8               	btfsc	status,2,c
  3207  000C4E  D7D7               	goto	l3014
  3208  000C50  0A08               	xorlw	8	; case 79
  3209  000C52  B4D8               	btfsc	status,2,c
  3210  000C54  D7BF               	goto	l3008
  3211  000C56  0A1C               	xorlw	28	; case 83
  3212  000C58  B4D8               	btfsc	status,2,c
  3213  000C5A  D7D8               	goto	l3016
  3214  000C5C  0A0B               	xorlw	11	; case 88
  3215  000C5E  B4D8               	btfsc	status,2,c
  3216  000C60  D7C7               	goto	l3012
  3217  000C62                     l473:
  3218                           
  3219                           ;main.c: 1096:  LATCbits.LATC4 = 1;
  3220  000C62  888B               	bsf	3979,4,c	;volatile
  3221                           
  3222                           ;main.c: 1098:  LATCbits.LATC4 = 0;
  3223  000C64  988B               	bcf	3979,4,c	;volatile
  3224                           
  3225                           ;main.c: 1100:  STLED316s_SPI_SendData ( 0x0D );
  3226  000C66  0E0D               	movlw	13
  3227  000C68  EC47  F008         	call	_STLED316s_SPI_SendData
  3228                           
  3229                           ;main.c: 1102:  LATCbits.LATC4 = 1;
  3230  000C6C  888B               	bsf	3979,4,c	;volatile
  3231  000C6E  0012               	return		;funcret
  3232  000C70                     __end_of_WriteSTLED316SErr:
  3233                           	opt callstack 0
  3234                           
  3235 ;; *************** function _ToggleVIB_Mode *****************
  3236 ;; Defined at:
  3237 ;;		line 1151 in file "main.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    4
  3258 ;; This function calls:
  3259 ;;		_WriteSTLED316SData
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text17
  3266  001266                     __ptext17:
  3267                           	opt callstack 0
  3268  001266                     _ToggleVIB_Mode:
  3269                           	opt callstack 26
  3270                           
  3271                           ;main.c: 1153:     if (vibration_mode)
  3272                           
  3273                           ;incstack = 0
  3274  001266  502D               	movf	_vibration_mode,w,c
  3275  001268  B4D8               	btfsc	status,2,c
  3276  00126A  D002               	goto	l2900
  3277                           
  3278                           ;main.c: 1154:         vibration_mode = 0;
  3279  00126C  0E00               	movlw	0
  3280  00126E  D001               	goto	L14
  3281  001270                     l2900:
  3282                           
  3283                           ;main.c: 1156:         vibration_mode = 1;
  3284  001270  0E01               	movlw	1
  3285  001272                     L14:
  3286  001272  6E2D               	movwf	_vibration_mode,c
  3287                           
  3288                           ;main.c: 1158:     if (vibration_mode)
  3289  001274  502D               	movf	_vibration_mode,w,c
  3290  001276  B4D8               	btfsc	status,2,c
  3291  001278  D002               	goto	l498
  3292                           
  3293                           ;main.c: 1159:         LATDbits.LATD1 = 1;
  3294  00127A  828C               	bsf	3980,1,c	;volatile
  3295  00127C  D001               	goto	l2904
  3296  00127E                     l498:
  3297                           
  3298                           ;main.c: 1161:         LATDbits.LATD1 = 0;
  3299  00127E  928C               	bcf	3980,1,c	;volatile
  3300  001280                     l2904:
  3301                           
  3302                           ;main.c: 1165:     WriteSTLED316SData(NUM, vibration_mode);
  3303  001280  C015  F041         	movff	_NUM,WriteSTLED316SData@number
  3304  001284  C016  F042         	movff	_NUM+1,WriteSTLED316SData@number+1
  3305  001288  C02D  F043         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  3306  00128C  EC98  F006         	call	_WriteSTLED316SData	;wreg free
  3307  001290  0012               	return		;funcret
  3308  001292                     __end_of_ToggleVIB_Mode:
  3309                           	opt callstack 0
  3310                           
  3311 ;; *************** function _MotorPosition_Init *****************
  3312 ;; Defined at:
  3313 ;;		line 1123 in file "main.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;Total ram usage:        2 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    4
  3334 ;; This function calls:
  3335 ;;		_MotorBREAK
  3336 ;;		_MotorON_PWM
  3337 ;;		_Read_IR
  3338 ;;		_delay_1ms
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text18
  3345  00102C                     __ptext18:
  3346                           	opt callstack 0
  3347  00102C                     _MotorPosition_Init:
  3348                           	opt callstack 26
  3349                           
  3350                           ;main.c: 1125:     LATAbits.LATA2 = 1;
  3351                           
  3352                           ;incstack = 0
  3353  00102C  8489               	bsf	3977,2,c	;volatile
  3354                           
  3355                           ;main.c: 1126:     MotorON_PWM();
  3356  00102E  ECD3  F009         	call	_MotorON_PWM	;wreg free
  3357                           
  3358                           ;main.c: 1127:     _delay((unsigned long)((350)*(8000000/4000.0)));
  3359  001032  0E04               	movlw	4
  3360  001034  6E3D               	movwf	(??_MotorPosition_Init+1)& (0+255),c
  3361  001036  0E8E               	movlw	142
  3362  001038  6E3C               	movwf	??_MotorPosition_Init& (0+255),c
  3363  00103A  0E12               	movlw	18
  3364  00103C                     u2527:
  3365  00103C  2EE8               	decfsz	wreg,f,c
  3366  00103E  D7FE               	bra	u2527
  3367  001040  2E3C               	decfsz	??_MotorPosition_Init& (0+255),f,c
  3368  001042  D7FC               	bra	u2527
  3369  001044  2E3D               	decfsz	(??_MotorPosition_Init+1)& (0+255),f,c
  3370  001046  D7FA               	bra	u2527
  3371  001048  D000               	nop2	
  3372  00104A                     l2878:
  3373                           
  3374                           ;main.c: 1130:     {;main.c: 1131:         Read_IR();
  3375  00104A  ECAC  F009         	call	_Read_IR	;wreg free
  3376                           
  3377                           ;main.c: 1132:     }while(IR_SENSORF != 0);
  3378  00104E  502B               	movf	_IR_SENSORF,w,c	;volatile
  3379  001050  A4D8               	btfss	status,2,c
  3380  001052  D7FB               	goto	l2878
  3381  001054                     u1600:
  3382                           
  3383                           ;main.c: 1135:     {;main.c: 1136:         Read_IR();
  3384  001054  ECAC  F009         	call	_Read_IR	;wreg free
  3385                           
  3386                           ;main.c: 1137:     }while(IR_SENSORF != 1);
  3387  001058  042B               	decf	_IR_SENSORF,w,c	;volatile
  3388  00105A  A4D8               	btfss	status,2,c
  3389  00105C  D7FB               	goto	u1600
  3390                           
  3391                           ;main.c: 1139:     delay_1ms(Motor_Stop_Delay_Time);
  3392  00105E  C01B  F039         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  3393  001062  C01C  F03A         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  3394  001066  EC71  F009         	call	_delay_1ms	;wreg free
  3395                           
  3396                           ;main.c: 1140:     MotorBREAK();
  3397  00106A  ECD8  F009         	call	_MotorBREAK	;wreg free
  3398                           
  3399                           ;main.c: 1141:     _delay((unsigned long)((2000)*(8000000/4000.0)));
  3400  00106E  0E15               	movlw	21
  3401  001070  6E3D               	movwf	(??_MotorPosition_Init+1)& (0+255),c
  3402  001072  0E4B               	movlw	75
  3403  001074  6E3C               	movwf	??_MotorPosition_Init& (0+255),c
  3404  001076  0EBE               	movlw	190
  3405  001078                     u2537:
  3406  001078  2EE8               	decfsz	wreg,f,c
  3407  00107A  D7FE               	bra	u2537
  3408  00107C  2E3C               	decfsz	??_MotorPosition_Init& (0+255),f,c
  3409  00107E  D7FC               	bra	u2537
  3410  001080  2E3D               	decfsz	(??_MotorPosition_Init+1)& (0+255),f,c
  3411  001082  D7FA               	bra	u2537
  3412  001084  D000               	nop2	
  3413                           
  3414                           ;main.c: 1142:     IR_SENSORF=0;
  3415  001086  0E00               	movlw	0
  3416  001088  6E2B               	movwf	_IR_SENSORF,c	;volatile
  3417                           
  3418                           ;main.c: 1144:     LATAbits.LATA2 = 0;
  3419  00108A  9489               	bcf	3977,2,c	;volatile
  3420  00108C  0012               	return		;funcret
  3421  00108E                     __end_of_MotorPosition_Init:
  3422                           	opt callstack 0
  3423                           
  3424 ;; *************** function _InitSTLED316 *****************
  3425 ;; Defined at:
  3426 ;;		line 816 in file "main.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  Brightness      1    wreg     unsigned char 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  Brightness      1   14[COMRAM] unsigned char 
  3431 ;;  i               2    0        int 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        3 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		_STLED316s_SPI_SendData
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text19
  3456  000DC2                     __ptext19:
  3457                           	opt callstack 0
  3458  000DC2                     _InitSTLED316:
  3459                           	opt callstack 27
  3460                           
  3461                           ;incstack = 0
  3462                           ;InitSTLED316@Brightness stored from wreg
  3463  000DC2  6E41               	movwf	InitSTLED316@Brightness,c
  3464                           
  3465                           ;main.c: 816: void InitSTLED316( unsigned char Brightness );main.c: 817: {;main.c: 818: 
      +                           int i;;main.c: 820:  LATCbits.LATC4 = 1;
  3466  000DC4  888B               	bsf	3979,4,c	;volatile
  3467                           
  3468                           ;main.c: 822:  LATCbits.LATC4 = 0;
  3469  000DC6  988B               	bcf	3979,4,c	;volatile
  3470                           
  3471                           ;main.c: 824:  STLED316s_SPI_SendData ( 0x00 + (0x02 << 3) + 0x20 + 0x00 );
  3472  000DC8  0E30               	movlw	48
  3473  000DCA  EC47  F008         	call	_STLED316s_SPI_SendData
  3474                           
  3475                           ;main.c: 827:  LATCbits.LATC4 = 1;
  3476  000DCE  888B               	bsf	3979,4,c	;volatile
  3477                           
  3478                           ;main.c: 829:  LATCbits.LATC4 = 0;
  3479  000DD0  988B               	bcf	3979,4,c	;volatile
  3480                           
  3481                           ;main.c: 832:  STLED316s_SPI_SendData ( 0x00 + (0x02 << 3) + 0x20 + 0x00 );
  3482  000DD2  0E30               	movlw	48
  3483  000DD4  EC47  F008         	call	_STLED316s_SPI_SendData
  3484                           
  3485                           ;main.c: 834:  STLED316s_SPI_SendData ( ( ( Brightness>>4 )<<5 ) | 0x00 | 0x5 );
  3486  000DD8  C041  F03F         	movff	InitSTLED316@Brightness,??_InitSTLED316
  3487  000DDC  3A3F               	swapf	??_InitSTLED316,f,c
  3488  000DDE  0E0F               	movlw	15
  3489  000DE0  163F               	andwf	??_InitSTLED316,f,c
  3490  000DE2  0E05               	movlw	5
  3491  000DE4  6E40               	movwf	(??_InitSTLED316+1)& (0+255),c
  3492  000DE6                     u1595:
  3493  000DE6  90D8               	bcf	status,0,c
  3494  000DE8  363F               	rlcf	??_InitSTLED316,f,c
  3495  000DEA  2E40               	decfsz	(??_InitSTLED316+1)& (0+255),f,c
  3496  000DEC  D7FC               	goto	u1595
  3497  000DEE  503F               	movf	??_InitSTLED316,w,c
  3498  000DF0  0905               	iorlw	5
  3499  000DF2  EC47  F008         	call	_STLED316s_SPI_SendData
  3500                           
  3501                           ;main.c: 836:  LATCbits.LATC4 = 1;
  3502  000DF6  888B               	bsf	3979,4,c	;volatile
  3503                           
  3504                           ;main.c: 838:  LATCbits.LATC4 = 0;
  3505  000DF8  988B               	bcf	3979,4,c	;volatile
  3506                           
  3507                           ;main.c: 841:  STLED316s_SPI_SendData ( (0x02 << 3) + 0x01 + 0x00 + 0x00 );
  3508  000DFA  0E11               	movlw	17
  3509  000DFC  EC47  F008         	call	_STLED316s_SPI_SendData
  3510                           
  3511                           ;main.c: 847:  LATCbits.LATC4 = 1;
  3512  000E00  888B               	bsf	3979,4,c	;volatile
  3513                           
  3514                           ;main.c: 849:  LATCbits.LATC4 = 0;
  3515  000E02  988B               	bcf	3979,4,c	;volatile
  3516                           
  3517                           ;main.c: 852:     STLED316s_SPI_SendData ( (0x02 << 3) + 0x01 + 0x00 + 0x00 );
  3518  000E04  0E11               	movlw	17
  3519  000E06  EC47  F008         	call	_STLED316s_SPI_SendData
  3520                           
  3521                           ;main.c: 854:  STLED316s_SPI_SendData ( Brightness );
  3522  000E0A  5041               	movf	InitSTLED316@Brightness,w,c
  3523  000E0C  EC47  F008         	call	_STLED316s_SPI_SendData
  3524                           
  3525                           ;main.c: 855:  STLED316s_SPI_SendData ( Brightness );
  3526  000E10  5041               	movf	InitSTLED316@Brightness,w,c
  3527  000E12  EC47  F008         	call	_STLED316s_SPI_SendData
  3528                           
  3529                           ;main.c: 856:  STLED316s_SPI_SendData ( Brightness );
  3530  000E16  5041               	movf	InitSTLED316@Brightness,w,c
  3531  000E18  EC47  F008         	call	_STLED316s_SPI_SendData
  3532                           
  3533                           ;main.c: 860:  LATCbits.LATC4 = 1;
  3534  000E1C  888B               	bsf	3979,4,c	;volatile
  3535                           
  3536                           ;main.c: 862:  LATCbits.LATC4 = 0;
  3537  000E1E  988B               	bcf	3979,4,c	;volatile
  3538                           
  3539                           ;main.c: 865:  STLED316s_SPI_SendData ( (0x03 << 3) + 0x00 + 0x00 + 0x00 );
  3540  000E20  0E18               	movlw	24
  3541  000E22  EC47  F008         	call	_STLED316s_SPI_SendData
  3542                           
  3543                           ;main.c: 868:  LATCbits.LATC4 = 1;
  3544  000E26  888B               	bsf	3979,4,c	;volatile
  3545                           
  3546                           ;main.c: 870:  LATCbits.LATC4 = 0;
  3547  000E28  988B               	bcf	3979,4,c	;volatile
  3548                           
  3549                           ;main.c: 872:     STLED316s_SPI_SendData ( (0x03 << 3) + 0x00 + 0x00 + 0x00 );
  3550  000E2A  0E18               	movlw	24
  3551  000E2C  EC47  F008         	call	_STLED316s_SPI_SendData
  3552                           
  3553                           ;main.c: 874:  STLED316s_SPI_SendData ( Brightness );
  3554  000E30  5041               	movf	InitSTLED316@Brightness,w,c
  3555  000E32  EC47  F008         	call	_STLED316s_SPI_SendData
  3556                           
  3557                           ;main.c: 875:  STLED316s_SPI_SendData ( Brightness );
  3558  000E36  5041               	movf	InitSTLED316@Brightness,w,c
  3559  000E38  EC47  F008         	call	_STLED316s_SPI_SendData
  3560                           
  3561                           ;main.c: 876:  STLED316s_SPI_SendData ( Brightness );
  3562  000E3C  5041               	movf	InitSTLED316@Brightness,w,c
  3563  000E3E  EC47  F008         	call	_STLED316s_SPI_SendData
  3564                           
  3565                           ;main.c: 877:  STLED316s_SPI_SendData ( Brightness );
  3566  000E42  5041               	movf	InitSTLED316@Brightness,w,c
  3567  000E44  EC47  F008         	call	_STLED316s_SPI_SendData
  3568                           
  3569                           ;main.c: 881:  LATCbits.LATC4 = 1;
  3570  000E48  888B               	bsf	3979,4,c	;volatile
  3571  000E4A  0012               	return		;funcret
  3572  000E4C                     __end_of_InitSTLED316:
  3573                           	opt callstack 0
  3574                           
  3575 ;; *************** function _Homing_Again_Manual *****************
  3576 ;; Defined at:
  3577 ;;		line 1171 in file "main.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;Total ram usage:        2 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    4
  3598 ;; This function calls:
  3599 ;;		_MotorBREAK
  3600 ;;		_MotorON_PWM
  3601 ;;		_Read_IR
  3602 ;;		_WriteSTLED316SData
  3603 ;;		_delay_1ms
  3604 ;;		_readWeighingData
  3605 ;; This function is called by:
  3606 ;;		_main
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text20
  3611  000850                     __ptext20:
  3612                           	opt callstack 0
  3613  000850                     _Homing_Again_Manual:
  3614                           	opt callstack 26
  3615                           
  3616                           ;main.c: 1174:     IR_SENSORF = 0;
  3617                           
  3618                           ;incstack = 0
  3619  000850  0E00               	movlw	0
  3620  000852  6E2B               	movwf	_IR_SENSORF,c	;volatile
  3621                           
  3622                           ;main.c: 1176:     if (vibration_mode == 1)
  3623  000854  042D               	decf	_vibration_mode,w,c
  3624  000856  A4D8               	btfss	status,2,c
  3625  000858  D007               	goto	l2914
  3626                           
  3627                           ;main.c: 1177:     {;main.c: 1178:         LATCbits.LATC1 = 1;
  3628  00085A  828B               	bsf	3979,1,c	;volatile
  3629                           
  3630                           ;main.c: 1179:         delay_1ms(Vmotor_Time);
  3631  00085C  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  3632  000860  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  3633  000864  EC71  F009         	call	_delay_1ms	;wreg free
  3634  000868                     l2914:
  3635                           
  3636                           ;main.c: 1180:         LATCbits.LATC1 = 0;
  3637  000868  928B               	bcf	3979,1,c	;volatile
  3638                           
  3639                           ;main.c: 1181:         _delay((unsigned long)((300)*(8000000/4000.0)));
  3640  00086A  0E04               	movlw	4
  3641  00086C  6E4B               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  3642  00086E  0E0C               	movlw	12
  3643  000870  6E4A               	movwf	??_Homing_Again_Manual& (0+255),c
  3644  000872  0E34               	movlw	52
  3645  000874                     u2547:
  3646  000874  2EE8               	decfsz	wreg,f,c
  3647  000876  D7FE               	bra	u2547
  3648  000878  2E4A               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  3649  00087A  D7FC               	bra	u2547
  3650  00087C  2E4B               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  3651  00087E  D7FA               	bra	u2547
  3652                           
  3653                           ;main.c: 1189:     LATAbits.LATA2 = 1;
  3654                           
  3655                           ;main.c: 1184:     {;main.c: 1185:         LATCbits.LATC1 = 0;
  3656                           
  3657                           ;main.c: 1183:     else
  3658                           
  3659                           ;main.c: 1182:     }
  3660  000880  8489               	bsf	3977,2,c	;volatile
  3661                           
  3662                           ;main.c: 1191:     while (NUM>0)
  3663  000882  D072               	goto	l2976
  3664  000884                     l506:
  3665  000884  0004               	clrwdt		;# 
  3666                           
  3667                           ;main.c: 1194:         readWeighingData();
  3668  000886  ECBB  F008         	call	_readWeighingData	;wreg free
  3669                           
  3670                           ;main.c: 1195:         delay_1ms(Motor_Pause_Time);
  3671  00088A  C017  F039         	movff	_Motor_Pause_Time,delay_1ms@time
  3672  00088E  C018  F03A         	movff	_Motor_Pause_Time+1,delay_1ms@time+1
  3673  000892  EC71  F009         	call	_delay_1ms	;wreg free
  3674                           
  3675                           ;main.c: 1196:         MotorON_PWM();
  3676  000896  ECD3  F009         	call	_MotorON_PWM	;wreg free
  3677                           
  3678                           ;main.c: 1197:         _delay((unsigned long)((350)*(8000000/4000.0)));
  3679  00089A  0E04               	movlw	4
  3680  00089C  6E4B               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  3681  00089E  0E8E               	movlw	142
  3682  0008A0  6E4A               	movwf	??_Homing_Again_Manual& (0+255),c
  3683  0008A2  0E12               	movlw	18
  3684  0008A4                     u2557:
  3685  0008A4  2EE8               	decfsz	wreg,f,c
  3686  0008A6  D7FE               	bra	u2557
  3687  0008A8  2E4A               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  3688  0008AA  D7FC               	bra	u2557
  3689  0008AC  2E4B               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  3690  0008AE  D7FA               	bra	u2557
  3691  0008B0  D000               	nop2	
  3692  0008B2                     l2930:
  3693                           
  3694                           ;main.c: 1200:         {;main.c: 1201:             Read_IR();
  3695  0008B2  ECAC  F009         	call	_Read_IR	;wreg free
  3696                           
  3697                           ;main.c: 1202:         }while(IR_SENSORF != 0);
  3698  0008B6  502B               	movf	_IR_SENSORF,w,c	;volatile
  3699  0008B8  A4D8               	btfss	status,2,c
  3700  0008BA  D7FB               	goto	l2930
  3701  0008BC                     u1650:
  3702                           
  3703                           ;main.c: 1205:         {;main.c: 1206:             Read_IR();
  3704  0008BC  ECAC  F009         	call	_Read_IR	;wreg free
  3705                           
  3706                           ;main.c: 1207:         }while(IR_SENSORF != 1);
  3707  0008C0  042B               	decf	_IR_SENSORF,w,c	;volatile
  3708  0008C2  A4D8               	btfss	status,2,c
  3709  0008C4  D7FB               	goto	u1650
  3710                           
  3711                           ;main.c: 1209:         IR_SENSORF = 0;
  3712  0008C6  0E00               	movlw	0
  3713  0008C8  6E2B               	movwf	_IR_SENSORF,c	;volatile
  3714                           
  3715                           ;main.c: 1211:         delay_1ms(Motor_Stop_Delay_Time);
  3716  0008CA  C01B  F039         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  3717  0008CE  C01C  F03A         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  3718  0008D2  EC71  F009         	call	_delay_1ms	;wreg free
  3719                           
  3720                           ;main.c: 1212:         MotorBREAK();
  3721  0008D6  ECD8  F009         	call	_MotorBREAK	;wreg free
  3722                           
  3723                           ;main.c: 1214:         NUM--;
  3724  0008DA  0615               	decf	_NUM,f,c
  3725  0008DC  A0D8               	btfss	status,0,c
  3726  0008DE  0616               	decf	_NUM+1,f,c
  3727                           
  3728                           ;main.c: 1215:         WriteSTLED316SData(NUM, vibration_mode);
  3729  0008E0  C015  F041         	movff	_NUM,WriteSTLED316SData@number
  3730  0008E4  C016  F042         	movff	_NUM+1,WriteSTLED316SData@number+1
  3731  0008E8  C02D  F043         	movff	_vibration_mode,WriteSTLED316SData@v_mode
  3732  0008EC  EC98  F006         	call	_WriteSTLED316SData	;wreg free
  3733                           
  3734                           ;main.c: 1217:         if (vibration_mode == 1 && NUM != 0)
  3735  0008F0  042D               	decf	_vibration_mode,w,c
  3736  0008F2  A4D8               	btfss	status,2,c
  3737  0008F4  D018               	goto	l2960
  3738  0008F6  5015               	movf	_NUM,w,c
  3739  0008F8  1016               	iorwf	_NUM+1,w,c
  3740  0008FA  B4D8               	btfsc	status,2,c
  3741  0008FC  D014               	goto	l2960
  3742                           
  3743                           ;main.c: 1218:         {;main.c: 1219:             LATCbits.LATC1 = 1;
  3744  0008FE  828B               	bsf	3979,1,c	;volatile
  3745                           
  3746                           ;main.c: 1220:             delay_1ms(Vmotor_Time);
  3747  000900  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  3748  000904  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  3749  000908  EC71  F009         	call	_delay_1ms	;wreg free
  3750                           
  3751                           ;main.c: 1222:             LATCbits.LATC1 = 0;
  3752  00090C  928B               	bcf	3979,1,c	;volatile
  3753                           
  3754                           ;main.c: 1223:             _delay((unsigned long)((300)*(8000000/4000.0)));
  3755  00090E  0E04               	movlw	4
  3756  000910  6E4B               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  3757  000912  0E0C               	movlw	12
  3758  000914  6E4A               	movwf	??_Homing_Again_Manual& (0+255),c
  3759  000916  0E34               	movlw	52
  3760  000918                     u2567:
  3761  000918  2EE8               	decfsz	wreg,f,c
  3762  00091A  D7FE               	bra	u2567
  3763  00091C  2E4A               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  3764  00091E  D7FC               	bra	u2567
  3765  000920  2E4B               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  3766  000922  D7FA               	bra	u2567
  3767                           
  3768                           ;main.c: 1224:         }
  3769  000924  D01E               	goto	l2972
  3770  000926                     l2960:
  3771  000926  502D               	movf	_vibration_mode,w,c
  3772  000928  A4D8               	btfss	status,2,c
  3773  00092A  D01B               	goto	l2972
  3774  00092C  5015               	movf	_NUM,w,c
  3775  00092E  1016               	iorwf	_NUM+1,w,c
  3776  000930  B4D8               	btfsc	status,2,c
  3777  000932  D017               	goto	l2972
  3778                           
  3779                           ;main.c: 1226:         {;main.c: 1227:             LATCbits.LATC1 = 0;
  3780  000934  928B               	bcf	3979,1,c	;volatile
  3781                           
  3782                           ;main.c: 1228:             if (NUM != 0)
  3783  000936  5015               	movf	_NUM,w,c
  3784  000938  1016               	iorwf	_NUM+1,w,c
  3785  00093A  B4D8               	btfsc	status,2,c
  3786  00093C  D007               	goto	l2970
  3787                           
  3788                           ;main.c: 1229:             {;main.c: 1230:                 delay_1ms(Vmotor_Time);
  3789  00093E  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  3790  000942  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  3791  000946  EC71  F009         	call	_delay_1ms	;wreg free
  3792                           
  3793                           ;main.c: 1231:             }
  3794  00094A  D00B               	goto	l2972
  3795  00094C                     l2970:
  3796                           
  3797                           ;main.c: 1233:             {;main.c: 1234:                 _delay((unsigned long)((500)*
      +                          (8000000/4000.0)));
  3798  00094C  0E06               	movlw	6
  3799  00094E  6E4B               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  3800  000950  0E13               	movlw	19
  3801  000952  6E4A               	movwf	??_Homing_Again_Manual& (0+255),c
  3802  000954  0EAE               	movlw	174
  3803  000956                     u2577:
  3804  000956  2EE8               	decfsz	wreg,f,c
  3805  000958  D7FE               	bra	u2577
  3806  00095A  2E4A               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  3807  00095C  D7FC               	bra	u2577
  3808  00095E  2E4B               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  3809  000960  D7FA               	bra	u2577
  3810  000962                     l2972:
  3811                           
  3812                           ;main.c: 1238:         if(Stop==1)
  3813  000962  0430               	decf	_Stop,w,c
  3814  000964  B4D8               	btfsc	status,2,c
  3815  000966  D004               	goto	u1730
  3816  000968                     l2976:
  3817                           
  3818                           ;main.c: 1191:     while (NUM>0)
  3819  000968  5015               	movf	_NUM,w,c
  3820  00096A  1016               	iorwf	_NUM+1,w,c
  3821  00096C  A4D8               	btfss	status,2,c
  3822  00096E  D78A               	goto	l506
  3823  000970                     u1730:
  3824                           
  3825                           ;main.c: 1243:     LATAbits.LATA2 = 0;
  3826  000970  9489               	bcf	3977,2,c	;volatile
  3827                           
  3828                           ;main.c: 1245:     if (NUM == 0 || Stop==1)
  3829  000972  5015               	movf	_NUM,w,c
  3830  000974  1016               	iorwf	_NUM+1,w,c
  3831  000976  B4D8               	btfsc	status,2,c
  3832  000978  D003               	goto	u1750
  3833  00097A  0430               	decf	_Stop,w,c
  3834  00097C  A4D8               	btfss	status,2,c
  3835  00097E  D018               	goto	l2994
  3836  000980                     u1750:
  3837                           
  3838                           ;main.c: 1246:     {;main.c: 1248:         if (vibration_mode == 1)
  3839  000980  042D               	decf	_vibration_mode,w,c
  3840  000982  A4D8               	btfss	status,2,c
  3841  000984  D013               	goto	l2992
  3842                           
  3843                           ;main.c: 1249:         {;main.c: 1250:             LATCbits.LATC1 = 1;
  3844  000986  828B               	bsf	3979,1,c	;volatile
  3845                           
  3846                           ;main.c: 1251:             delay_1ms(Vmotor_Time);
  3847  000988  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  3848  00098C  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  3849  000990  EC71  F009         	call	_delay_1ms	;wreg free
  3850                           
  3851                           ;main.c: 1253:             LATCbits.LATC1 = 0;
  3852  000994  928B               	bcf	3979,1,c	;volatile
  3853                           
  3854                           ;main.c: 1254:             _delay((unsigned long)((300)*(8000000/4000.0)));
  3855  000996  0E04               	movlw	4
  3856  000998  6E4B               	movwf	(??_Homing_Again_Manual+1)& (0+255),c
  3857  00099A  0E0C               	movlw	12
  3858  00099C  6E4A               	movwf	??_Homing_Again_Manual& (0+255),c
  3859  00099E  0E34               	movlw	52
  3860  0009A0                     u2587:
  3861  0009A0  2EE8               	decfsz	wreg,f,c
  3862  0009A2  D7FE               	bra	u2587
  3863  0009A4  2E4A               	decfsz	??_Homing_Again_Manual& (0+255),f,c
  3864  0009A6  D7FC               	bra	u2587
  3865  0009A8  2E4B               	decfsz	(??_Homing_Again_Manual+1)& (0+255),f,c
  3866  0009AA  D7FA               	bra	u2587
  3867  0009AC                     l2992:
  3868                           
  3869                           ;main.c: 1257:         IR_SENSORF = 0;
  3870  0009AC  0E00               	movlw	0
  3871  0009AE  6E2B               	movwf	_IR_SENSORF,c	;volatile
  3872  0009B0                     l2994:
  3873                           
  3874                           ;main.c: 1261:     NUM = 0;
  3875  0009B0  0E00               	movlw	0
  3876  0009B2  6E16               	movwf	_NUM+1,c
  3877  0009B4  0E00               	movlw	0
  3878  0009B6  6E15               	movwf	_NUM,c
  3879                           
  3880                           ;main.c: 1262:     OpMode = 2;
  3881  0009B8  0E02               	movlw	2
  3882  0009BA  6E52               	movwf	_OpMode,c	;volatile
  3883  0009BC  0012               	return		;funcret
  3884  0009BE                     __end_of_Homing_Again_Manual:
  3885                           	opt callstack 0
  3886                           
  3887 ;; *************** function _WriteSTLED316SData *****************
  3888 ;; Defined at:
  3889 ;;		line 952 in file "main.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  number          2   14[COMRAM] int 
  3892 ;;  v_mode          1   16[COMRAM] unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  NUM_DIG1        2   19[COMRAM] int 
  3895 ;;  NUM_DIG0        2   17[COMRAM] int 
  3896 ;;  data4           1   22[COMRAM] unsigned char 
  3897 ;;  data3           1   21[COMRAM] unsigned char 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, status,2, status,0, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;Total ram usage:        9 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    3
  3914 ;; This function calls:
  3915 ;;		_Get7Seg
  3916 ;;		_STLED316s_SPI_SendData
  3917 ;;		___awdiv
  3918 ;;		___awmod
  3919 ;; This function is called by:
  3920 ;;		_main
  3921 ;;		_ToggleVIB_Mode
  3922 ;;		_Homing_Again_Manual
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text21
  3927  000D30                     __ptext21:
  3928                           	opt callstack 0
  3929  000D30                     _WriteSTLED316SData:
  3930                           	opt callstack 27
  3931                           
  3932                           ;main.c: 952: void WriteSTLED316SData( int number, char v_mode);main.c: 953: {;main.c: 9
      +                          54:  unsigned char data3, data4;;main.c: 955:  int NUM_DIG0, NUM_DIG1;;main.c: 957:  NUM
      +                          _DIG0=(int) number%10;
  3933                           
  3934                           ;incstack = 0
  3935  000D30  C041  F039         	movff	WriteSTLED316SData@number,___awmod@dividend
  3936  000D34  C042  F03A         	movff	WriteSTLED316SData@number+1,___awmod@dividend+1
  3937  000D38  0E00               	movlw	0
  3938  000D3A  6E3C               	movwf	___awmod@divisor+1,c
  3939  000D3C  0E0A               	movlw	10
  3940  000D3E  6E3B               	movwf	___awmod@divisor,c
  3941  000D40  ECAA  F007         	call	___awmod	;wreg free
  3942  000D44  C039  F044         	movff	?___awmod,WriteSTLED316SData@NUM_DIG0
  3943  000D48  C03A  F045         	movff	?___awmod+1,WriteSTLED316SData@NUM_DIG0+1
  3944                           
  3945                           ;main.c: 958:  NUM_DIG1=(int) number/10;
  3946  000D4C  C041  F039         	movff	WriteSTLED316SData@number,___awdiv@dividend
  3947  000D50  C042  F03A         	movff	WriteSTLED316SData@number+1,___awdiv@dividend+1
  3948  000D54  0E00               	movlw	0
  3949  000D56  6E3C               	movwf	___awdiv@divisor+1,c
  3950  000D58  0E0A               	movlw	10
  3951  000D5A  6E3B               	movwf	___awdiv@divisor,c
  3952  000D5C  EC26  F007         	call	___awdiv	;wreg free
  3953  000D60  C039  F046         	movff	?___awdiv,WriteSTLED316SData@NUM_DIG1
  3954  000D64  C03A  F047         	movff	?___awdiv+1,WriteSTLED316SData@NUM_DIG1+1
  3955                           
  3956                           ;main.c: 960:  LATCbits.LATC4 = 0;
  3957  000D68  988B               	bcf	3979,4,c	;volatile
  3958                           
  3959                           ;main.c: 962:  STLED316s_SPI_SendData (0x00 );
  3960  000D6A  0E00               	movlw	0
  3961  000D6C  EC47  F008         	call	_STLED316s_SPI_SendData
  3962                           
  3963                           ;main.c: 964:  LATCbits.LATC4 = 1;
  3964  000D70  888B               	bsf	3979,4,c	;volatile
  3965                           
  3966                           ;main.c: 966:  LATCbits.LATC4 = 0;
  3967  000D72  988B               	bcf	3979,4,c	;volatile
  3968                           
  3969                           ;main.c: 968:  STLED316s_SPI_SendData (0x00);
  3970  000D74  0E00               	movlw	0
  3971  000D76  EC47  F008         	call	_STLED316s_SPI_SendData
  3972                           
  3973                           ;main.c: 970:  data4 = Get7Seg(NUM_DIG1);
  3974  000D7A  C046  F039         	movff	WriteSTLED316SData@NUM_DIG1,Get7Seg@Digit
  3975  000D7E  C047  F03A         	movff	WriteSTLED316SData@NUM_DIG1+1,Get7Seg@Digit+1
  3976  000D82  EC68  F007         	call	_Get7Seg	;wreg free
  3977  000D86  6E49               	movwf	WriteSTLED316SData@data4,c
  3978                           
  3979                           ;main.c: 971:  data3 = Get7Seg(NUM_DIG0);
  3980  000D88  C044  F039         	movff	WriteSTLED316SData@NUM_DIG0,Get7Seg@Digit
  3981  000D8C  C045  F03A         	movff	WriteSTLED316SData@NUM_DIG0+1,Get7Seg@Digit+1
  3982  000D90  EC68  F007         	call	_Get7Seg	;wreg free
  3983  000D94  6E48               	movwf	WriteSTLED316SData@data3,c
  3984                           
  3985                           ;main.c: 973:  if (v_mode)
  3986  000D96  5043               	movf	WriteSTLED316SData@v_mode,w,c
  3987  000D98  B4D8               	btfsc	status,2,c
  3988  000D9A  D006               	goto	l2654
  3989                           
  3990                           ;main.c: 974:  {;main.c: 975:   if (v_mode == 0xFF)
  3991  000D9C  2843               	incf	WriteSTLED316SData@v_mode,w,c
  3992  000D9E  A4D8               	btfss	status,2,c
  3993  000DA0  D002               	goto	l2652
  3994                           
  3995                           ;main.c: 976:    data4 |= 0x80;
  3996  000DA2  8E49               	bsf	WriteSTLED316SData@data4,7,c
  3997  000DA4  D001               	goto	l2654
  3998  000DA6                     l2652:
  3999                           
  4000                           ;main.c: 978:    data3 |= 0x80;
  4001  000DA6  8E48               	bsf	WriteSTLED316SData@data3,7,c
  4002  000DA8                     l2654:
  4003                           
  4004                           ;main.c: 981:     STLED316s_SPI_SendData (data4);
  4005  000DA8  5049               	movf	WriteSTLED316SData@data4,w,c
  4006  000DAA  EC47  F008         	call	_STLED316s_SPI_SendData
  4007                           
  4008                           ;main.c: 982:     STLED316s_SPI_SendData (data3);
  4009  000DAE  5048               	movf	WriteSTLED316SData@data3,w,c
  4010  000DB0  EC47  F008         	call	_STLED316s_SPI_SendData
  4011                           
  4012                           ;main.c: 984:  LATCbits.LATC4 = 1;
  4013  000DB4  888B               	bsf	3979,4,c	;volatile
  4014                           
  4015                           ;main.c: 986:  LATCbits.LATC4 = 0;
  4016  000DB6  988B               	bcf	3979,4,c	;volatile
  4017                           
  4018                           ;main.c: 988:  STLED316s_SPI_SendData ( 0x0D );
  4019  000DB8  0E0D               	movlw	13
  4020  000DBA  EC47  F008         	call	_STLED316s_SPI_SendData
  4021                           
  4022                           ;main.c: 990:  LATCbits.LATC4 = 1;
  4023  000DBE  888B               	bsf	3979,4,c	;volatile
  4024  000DC0  0012               	return		;funcret
  4025  000DC2                     __end_of_WriteSTLED316SData:
  4026                           	opt callstack 0
  4027                           
  4028 ;; *************** function ___awmod *****************
  4029 ;; Defined at:
  4030 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  dividend        2    6[COMRAM] int 
  4033 ;;  divisor         2    8[COMRAM] int 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  sign            1   11[COMRAM] unsigned char 
  4036 ;;  counter         1   10[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  2    6[COMRAM] int 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4046 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;Total ram usage:        6 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    2
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_WriteSTLED316SData
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text22
  4061  000F54                     __ptext22:
  4062                           	opt callstack 0
  4063  000F54                     ___awmod:
  4064                           	opt callstack 27
  4065                           
  4066                           ;incstack = 0
  4067  000F54  0E00               	movlw	0
  4068  000F56  6E3E               	movwf	___awmod@sign,c
  4069  000F58  AE3A               	btfss	___awmod@dividend+1,7,c
  4070  000F5A  D006               	goto	l2576
  4071  000F5C  6C39               	negf	___awmod@dividend,c
  4072  000F5E  1E3A               	comf	___awmod@dividend+1,f,c
  4073  000F60  B0D8               	btfsc	status,0,c
  4074  000F62  2A3A               	incf	___awmod@dividend+1,f,c
  4075  000F64  0E01               	movlw	1
  4076  000F66  6E3E               	movwf	___awmod@sign,c
  4077  000F68                     l2576:
  4078  000F68  AE3C               	btfss	___awmod@divisor+1,7,c
  4079  000F6A  D004               	goto	l2580
  4080  000F6C  6C3B               	negf	___awmod@divisor,c
  4081  000F6E  1E3C               	comf	___awmod@divisor+1,f,c
  4082  000F70  B0D8               	btfsc	status,0,c
  4083  000F72  2A3C               	incf	___awmod@divisor+1,f,c
  4084  000F74                     l2580:
  4085  000F74  503B               	movf	___awmod@divisor,w,c
  4086  000F76  103C               	iorwf	___awmod@divisor+1,w,c
  4087  000F78  B4D8               	btfsc	status,2,c
  4088  000F7A  D018               	goto	l2596
  4089  000F7C  0E01               	movlw	1
  4090  000F7E  6E3D               	movwf	___awmod@counter,c
  4091  000F80  D004               	goto	l2586
  4092  000F82                     l2584:
  4093  000F82  90D8               	bcf	status,0,c
  4094  000F84  363B               	rlcf	___awmod@divisor,f,c
  4095  000F86  363C               	rlcf	___awmod@divisor+1,f,c
  4096  000F88  2A3D               	incf	___awmod@counter,f,c
  4097  000F8A                     l2586:
  4098  000F8A  AE3C               	btfss	___awmod@divisor+1,7,c
  4099  000F8C  D7FA               	goto	l2584
  4100  000F8E                     u1440:
  4101  000F8E  503B               	movf	___awmod@divisor,w,c
  4102  000F90  5C39               	subwf	___awmod@dividend,w,c
  4103  000F92  503C               	movf	___awmod@divisor+1,w,c
  4104  000F94  583A               	subwfb	___awmod@dividend+1,w,c
  4105  000F96  A0D8               	btfss	status,0,c
  4106  000F98  D004               	goto	l2592
  4107  000F9A  503B               	movf	___awmod@divisor,w,c
  4108  000F9C  5E39               	subwf	___awmod@dividend,f,c
  4109  000F9E  503C               	movf	___awmod@divisor+1,w,c
  4110  000FA0  5A3A               	subwfb	___awmod@dividend+1,f,c
  4111  000FA2                     l2592:
  4112  000FA2  90D8               	bcf	status,0,c
  4113  000FA4  323C               	rrcf	___awmod@divisor+1,f,c
  4114  000FA6  323B               	rrcf	___awmod@divisor,f,c
  4115  000FA8  2E3D               	decfsz	___awmod@counter,f,c
  4116  000FAA  D7F1               	goto	u1440
  4117  000FAC                     l2596:
  4118  000FAC  503E               	movf	___awmod@sign,w,c
  4119  000FAE  B4D8               	btfsc	status,2,c
  4120  000FB0  D004               	goto	l2600
  4121  000FB2  6C39               	negf	___awmod@dividend,c
  4122  000FB4  1E3A               	comf	___awmod@dividend+1,f,c
  4123  000FB6  B0D8               	btfsc	status,0,c
  4124  000FB8  2A3A               	incf	___awmod@dividend+1,f,c
  4125  000FBA                     l2600:
  4126  000FBA  C039  F039         	movff	___awmod@dividend,?___awmod
  4127  000FBE  C03A  F03A         	movff	___awmod@dividend+1,?___awmod+1
  4128  000FC2  0012               	return		;funcret
  4129  000FC4                     __end_of___awmod:
  4130                           	opt callstack 0
  4131                           
  4132 ;; *************** function ___awdiv *****************
  4133 ;; Defined at:
  4134 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  dividend        2    6[COMRAM] int 
  4137 ;;  divisor         2    8[COMRAM] int 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  quotient        2   12[COMRAM] int 
  4140 ;;  sign            1   11[COMRAM] unsigned char 
  4141 ;;  counter         1   10[COMRAM] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  2    6[COMRAM] int 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:        8 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    2
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_WriteSTLED316SData
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text23
  4166  000E4C                     __ptext23:
  4167                           	opt callstack 0
  4168  000E4C                     ___awdiv:
  4169                           	opt callstack 27
  4170                           
  4171                           ;incstack = 0
  4172  000E4C  0E00               	movlw	0
  4173  000E4E  6E3E               	movwf	___awdiv@sign,c
  4174  000E50  AE3C               	btfss	___awdiv@divisor+1,7,c
  4175  000E52  D006               	goto	l2532
  4176  000E54  6C3B               	negf	___awdiv@divisor,c
  4177  000E56  1E3C               	comf	___awdiv@divisor+1,f,c
  4178  000E58  B0D8               	btfsc	status,0,c
  4179  000E5A  2A3C               	incf	___awdiv@divisor+1,f,c
  4180  000E5C  0E01               	movlw	1
  4181  000E5E  6E3E               	movwf	___awdiv@sign,c
  4182  000E60                     l2532:
  4183  000E60  AE3A               	btfss	___awdiv@dividend+1,7,c
  4184  000E62  D006               	goto	l2538
  4185  000E64  6C39               	negf	___awdiv@dividend,c
  4186  000E66  1E3A               	comf	___awdiv@dividend+1,f,c
  4187  000E68  B0D8               	btfsc	status,0,c
  4188  000E6A  2A3A               	incf	___awdiv@dividend+1,f,c
  4189  000E6C  0E01               	movlw	1
  4190  000E6E  1A3E               	xorwf	___awdiv@sign,f,c
  4191  000E70                     l2538:
  4192  000E70  0E00               	movlw	0
  4193  000E72  6E40               	movwf	___awdiv@quotient+1,c
  4194  000E74  0E00               	movlw	0
  4195  000E76  6E3F               	movwf	___awdiv@quotient,c
  4196  000E78  503B               	movf	___awdiv@divisor,w,c
  4197  000E7A  103C               	iorwf	___awdiv@divisor+1,w,c
  4198  000E7C  B4D8               	btfsc	status,2,c
  4199  000E7E  D01C               	goto	l2560
  4200  000E80  0E01               	movlw	1
  4201  000E82  6E3D               	movwf	___awdiv@counter,c
  4202  000E84  D004               	goto	l2546
  4203  000E86                     l2544:
  4204  000E86  90D8               	bcf	status,0,c
  4205  000E88  363B               	rlcf	___awdiv@divisor,f,c
  4206  000E8A  363C               	rlcf	___awdiv@divisor+1,f,c
  4207  000E8C  2A3D               	incf	___awdiv@counter,f,c
  4208  000E8E                     l2546:
  4209  000E8E  AE3C               	btfss	___awdiv@divisor+1,7,c
  4210  000E90  D7FA               	goto	l2544
  4211  000E92                     u1380:
  4212  000E92  90D8               	bcf	status,0,c
  4213  000E94  363F               	rlcf	___awdiv@quotient,f,c
  4214  000E96  3640               	rlcf	___awdiv@quotient+1,f,c
  4215  000E98  503B               	movf	___awdiv@divisor,w,c
  4216  000E9A  5C39               	subwf	___awdiv@dividend,w,c
  4217  000E9C  503C               	movf	___awdiv@divisor+1,w,c
  4218  000E9E  583A               	subwfb	___awdiv@dividend+1,w,c
  4219  000EA0  A0D8               	btfss	status,0,c
  4220  000EA2  D005               	goto	l2556
  4221  000EA4  503B               	movf	___awdiv@divisor,w,c
  4222  000EA6  5E39               	subwf	___awdiv@dividend,f,c
  4223  000EA8  503C               	movf	___awdiv@divisor+1,w,c
  4224  000EAA  5A3A               	subwfb	___awdiv@dividend+1,f,c
  4225  000EAC  803F               	bsf	___awdiv@quotient,0,c
  4226  000EAE                     l2556:
  4227  000EAE  90D8               	bcf	status,0,c
  4228  000EB0  323C               	rrcf	___awdiv@divisor+1,f,c
  4229  000EB2  323B               	rrcf	___awdiv@divisor,f,c
  4230  000EB4  2E3D               	decfsz	___awdiv@counter,f,c
  4231  000EB6  D7ED               	goto	u1380
  4232  000EB8                     l2560:
  4233  000EB8  503E               	movf	___awdiv@sign,w,c
  4234  000EBA  B4D8               	btfsc	status,2,c
  4235  000EBC  D004               	goto	l2564
  4236  000EBE  6C3F               	negf	___awdiv@quotient,c
  4237  000EC0  1E40               	comf	___awdiv@quotient+1,f,c
  4238  000EC2  B0D8               	btfsc	status,0,c
  4239  000EC4  2A40               	incf	___awdiv@quotient+1,f,c
  4240  000EC6                     l2564:
  4241  000EC6  C03F  F039         	movff	___awdiv@quotient,?___awdiv
  4242  000ECA  C040  F03A         	movff	___awdiv@quotient+1,?___awdiv+1
  4243  000ECE  0012               	return		;funcret
  4244  000ED0                     __end_of___awdiv:
  4245                           	opt callstack 0
  4246                           
  4247 ;; *************** function _Get7Seg *****************
  4248 ;; Defined at:
  4249 ;;		line 909 in file "main.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  Digit           2    6[COMRAM] int 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  Data            1   10[COMRAM] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      unsigned char 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:        5 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    2
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_WriteSTLED316SData
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text24
  4278  000ED0                     __ptext24:
  4279                           	opt callstack 0
  4280  000ED0                     _Get7Seg:
  4281                           	opt callstack 27
  4282                           
  4283                           ;main.c: 909: unsigned char Get7Seg (int Digit);main.c: 910: {;main.c: 911:  unsigned ch
      +                          ar Data;;main.c: 913:  switch (Digit)
  4284                           
  4285                           ;incstack = 0
  4286  000ED0  D017               	goto	l2514
  4287  000ED2                     l2490:
  4288                           
  4289                           ;main.c: 916:    Data = 0x3F;
  4290  000ED2  0E3F               	movlw	63
  4291  000ED4  D013               	goto	L24
  4292  000ED6                     l2492:
  4293                           
  4294                           ;main.c: 919:    Data = 0x06;
  4295  000ED6  0E06               	movlw	6
  4296  000ED8  D011               	goto	L24
  4297  000EDA                     l2494:
  4298                           
  4299                           ;main.c: 922:    Data = 0x5B;
  4300  000EDA  0E5B               	movlw	91
  4301  000EDC  D00F               	goto	L24
  4302  000EDE                     l2496:
  4303                           
  4304                           ;main.c: 925:    Data = 0x4F;
  4305  000EDE  0E4F               	movlw	79
  4306  000EE0  D00D               	goto	L24
  4307  000EE2                     l2498:
  4308                           
  4309                           ;main.c: 928:    Data = 0x66;
  4310  000EE2  0E66               	movlw	102
  4311  000EE4  D00B               	goto	L24
  4312  000EE6                     l2500:
  4313                           
  4314                           ;main.c: 931:    Data = 0x6D;
  4315  000EE6  0E6D               	movlw	109
  4316  000EE8  D009               	goto	L24
  4317  000EEA                     l2502:
  4318                           
  4319                           ;main.c: 934:    Data = 0x7D;
  4320  000EEA  0E7D               	movlw	125
  4321  000EEC  D007               	goto	L24
  4322  000EEE                     l2504:
  4323                           
  4324                           ;main.c: 937:    Data = 0x07;
  4325  000EEE  0E07               	movlw	7
  4326  000EF0  D005               	goto	L24
  4327  000EF2                     l2506:
  4328                           
  4329                           ;main.c: 940:    Data = 0x7F;
  4330  000EF2  0E7F               	movlw	127
  4331  000EF4  D003               	goto	L24
  4332  000EF6                     l2508:
  4333                           
  4334                           ;main.c: 943:    Data = 0x6F;
  4335  000EF6  0E6F               	movlw	111
  4336  000EF8  D001               	goto	L24
  4337  000EFA                     l2510:
  4338                           
  4339                           ;main.c: 946:    Data = 0x00;
  4340  000EFA  0E00               	movlw	0
  4341  000EFC                     L24:
  4342  000EFC  6E3D               	movwf	Get7Seg@Data,c
  4343                           
  4344                           ;main.c: 947:    break;
  4345  000EFE  D028               	goto	l2516
  4346  000F00                     l2514:
  4347  000F00  C039  F03B         	movff	Get7Seg@Digit,??_Get7Seg
  4348  000F04  C03A  F03C         	movff	Get7Seg@Digit+1,??_Get7Seg+1
  4349                           
  4350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4351                           ; Switch size 1, requested type "simple"
  4352                           ; Number of cases is 1, Range of values is 0 to 0
  4353                           ; switch strategies available:
  4354                           ; Name         Instructions Cycles
  4355                           ; simple_byte            4     3 (average)
  4356                           ;	Chosen strategy is simple_byte
  4357  000F08  503C               	movf	??_Get7Seg+1,w,c
  4358  000F0A  0A00               	xorlw	0	; case 0
  4359  000F0C  A4D8               	btfss	status,2,c
  4360  000F0E  D7F5               	goto	l2510
  4361                           
  4362                           ; Switch size 1, requested type "simple"
  4363                           ; Number of cases is 10, Range of values is 0 to 9
  4364                           ; switch strategies available:
  4365                           ; Name         Instructions Cycles
  4366                           ; simple_byte           31    16 (average)
  4367                           ;	Chosen strategy is simple_byte
  4368  000F10  503B               	movf	??_Get7Seg,w,c
  4369  000F12  0A00               	xorlw	0	; case 0
  4370  000F14  B4D8               	btfsc	status,2,c
  4371  000F16  D7DD               	goto	l2490
  4372  000F18  0A01               	xorlw	1	; case 1
  4373  000F1A  B4D8               	btfsc	status,2,c
  4374  000F1C  D7DC               	goto	l2492
  4375  000F1E  0A03               	xorlw	3	; case 2
  4376  000F20  B4D8               	btfsc	status,2,c
  4377  000F22  D7DB               	goto	l2494
  4378  000F24  0A01               	xorlw	1	; case 3
  4379  000F26  B4D8               	btfsc	status,2,c
  4380  000F28  D7DA               	goto	l2496
  4381  000F2A  0A07               	xorlw	7	; case 4
  4382  000F2C  B4D8               	btfsc	status,2,c
  4383  000F2E  D7D9               	goto	l2498
  4384  000F30  0A01               	xorlw	1	; case 5
  4385  000F32  B4D8               	btfsc	status,2,c
  4386  000F34  D7D8               	goto	l2500
  4387  000F36  0A03               	xorlw	3	; case 6
  4388  000F38  B4D8               	btfsc	status,2,c
  4389  000F3A  D7D7               	goto	l2502
  4390  000F3C  0A01               	xorlw	1	; case 7
  4391  000F3E  B4D8               	btfsc	status,2,c
  4392  000F40  D7D6               	goto	l2504
  4393  000F42  0A0F               	xorlw	15	; case 8
  4394  000F44  B4D8               	btfsc	status,2,c
  4395  000F46  D7D5               	goto	l2506
  4396  000F48  0A01               	xorlw	1	; case 9
  4397  000F4A  B4D8               	btfsc	status,2,c
  4398  000F4C  D7D4               	goto	l2508
  4399  000F4E  D7D5               	goto	l2510
  4400  000F50                     l2516:
  4401                           
  4402                           ;main.c: 949:  return (Data);
  4403  000F50  503D               	movf	Get7Seg@Data,w,c
  4404  000F52  0012               	return		;funcret
  4405  000F54                     __end_of_Get7Seg:
  4406                           	opt callstack 0
  4407                           
  4408 ;; *************** function _Homing_Again_Auto *****************
  4409 ;; Defined at:
  4410 ;;		line 1269 in file "main.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;Total ram usage:        2 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    4
  4431 ;; This function calls:
  4432 ;;		_MotorBREAK
  4433 ;;		_MotorON_PWM
  4434 ;;		_Read_IR
  4435 ;;		_WriteSTLED316SMode
  4436 ;;		_delay_1ms
  4437 ;;		_readWeighingData
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text25
  4444  0009BE                     __ptext25:
  4445                           	opt callstack 0
  4446  0009BE                     _Homing_Again_Auto:
  4447                           	opt callstack 26
  4448                           
  4449                           ;main.c: 1272:     IR_SENSORF = 0;
  4450                           
  4451                           ;incstack = 0
  4452  0009BE  0E00               	movlw	0
  4453  0009C0  6E2B               	movwf	_IR_SENSORF,c	;volatile
  4454                           
  4455                           ;main.c: 1273:     WriteSTLED316SMode('A');
  4456  0009C2  0E41               	movlw	65
  4457  0009C4  EC38  F006         	call	_WriteSTLED316SMode
  4458                           
  4459                           ;main.c: 1275:     if (vibration_mode == 1)
  4460  0009C8  042D               	decf	_vibration_mode,w,c
  4461  0009CA  A4D8               	btfss	status,2,c
  4462  0009CC  D007               	goto	l3042
  4463                           
  4464                           ;main.c: 1276:     {;main.c: 1277:         LATCbits.LATC1 = 1;
  4465  0009CE  828B               	bsf	3979,1,c	;volatile
  4466                           
  4467                           ;main.c: 1278:         delay_1ms(Vmotor_Time);
  4468  0009D0  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  4469  0009D4  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4470  0009D8  EC71  F009         	call	_delay_1ms	;wreg free
  4471  0009DC                     l3042:
  4472                           
  4473                           ;main.c: 1279:         LATCbits.LATC1 = 0;
  4474  0009DC  928B               	bcf	3979,1,c	;volatile
  4475                           
  4476                           ;main.c: 1280:         _delay((unsigned long)((300)*(8000000/4000.0)));
  4477  0009DE  0E04               	movlw	4
  4478  0009E0  6E43               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4479  0009E2  0E0C               	movlw	12
  4480  0009E4  6E42               	movwf	??_Homing_Again_Auto& (0+255),c
  4481  0009E6  0E34               	movlw	52
  4482  0009E8                     u2597:
  4483  0009E8  2EE8               	decfsz	wreg,f,c
  4484  0009EA  D7FE               	bra	u2597
  4485  0009EC  2E42               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4486  0009EE  D7FC               	bra	u2597
  4487  0009F0  2E43               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4488  0009F2  D7FA               	bra	u2597
  4489                           
  4490                           ;main.c: 1288:     LATAbits.LATA2 = 1;
  4491                           
  4492                           ;main.c: 1283:     {;main.c: 1284:         LATCbits.LATC1 = 0;
  4493                           
  4494                           ;main.c: 1282:     else
  4495                           
  4496                           ;main.c: 1281:     }
  4497  0009F4  8489               	bsf	3977,2,c	;volatile
  4498                           
  4499                           ;main.c: 1290:     while ( Stop==0)
  4500  0009F6  D04C               	goto	l3086
  4501  0009F8                     l528:
  4502  0009F8  0004               	clrwdt		;# 
  4503                           
  4504                           ;main.c: 1293:         readWeighingData();
  4505  0009FA  ECBB  F008         	call	_readWeighingData	;wreg free
  4506                           
  4507                           ;main.c: 1294:         delay_1ms(Motor_Pause_Time);
  4508  0009FE  C017  F039         	movff	_Motor_Pause_Time,delay_1ms@time
  4509  000A02  C018  F03A         	movff	_Motor_Pause_Time+1,delay_1ms@time+1
  4510  000A06  EC71  F009         	call	_delay_1ms	;wreg free
  4511                           
  4512                           ;main.c: 1295:         MotorON_PWM();
  4513  000A0A  ECD3  F009         	call	_MotorON_PWM	;wreg free
  4514                           
  4515                           ;main.c: 1296:         _delay((unsigned long)((350)*(8000000/4000.0)));
  4516  000A0E  0E04               	movlw	4
  4517  000A10  6E43               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4518  000A12  0E8E               	movlw	142
  4519  000A14  6E42               	movwf	??_Homing_Again_Auto& (0+255),c
  4520  000A16  0E12               	movlw	18
  4521  000A18                     u2607:
  4522  000A18  2EE8               	decfsz	wreg,f,c
  4523  000A1A  D7FE               	bra	u2607
  4524  000A1C  2E42               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4525  000A1E  D7FC               	bra	u2607
  4526  000A20  2E43               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4527  000A22  D7FA               	bra	u2607
  4528  000A24  D000               	nop2	
  4529  000A26                     l3058:
  4530                           
  4531                           ;main.c: 1299:         {;main.c: 1300:             Read_IR();
  4532  000A26  ECAC  F009         	call	_Read_IR	;wreg free
  4533                           
  4534                           ;main.c: 1301:         }while(IR_SENSORF != 0);
  4535  000A2A  502B               	movf	_IR_SENSORF,w,c	;volatile
  4536  000A2C  A4D8               	btfss	status,2,c
  4537  000A2E  D7FB               	goto	l3058
  4538  000A30                     u1780:
  4539                           
  4540                           ;main.c: 1304:         {;main.c: 1305:             Read_IR();
  4541  000A30  ECAC  F009         	call	_Read_IR	;wreg free
  4542                           
  4543                           ;main.c: 1306:         }while(IR_SENSORF != 1);
  4544  000A34  042B               	decf	_IR_SENSORF,w,c	;volatile
  4545  000A36  A4D8               	btfss	status,2,c
  4546  000A38  D7FB               	goto	u1780
  4547                           
  4548                           ;main.c: 1308:         IR_SENSORF = 0;
  4549  000A3A  0E00               	movlw	0
  4550  000A3C  6E2B               	movwf	_IR_SENSORF,c	;volatile
  4551                           
  4552                           ;main.c: 1310:         delay_1ms(Motor_Stop_Delay_Time);
  4553  000A3E  C01B  F039         	movff	_Motor_Stop_Delay_Time,delay_1ms@time
  4554  000A42  C01C  F03A         	movff	_Motor_Stop_Delay_Time+1,delay_1ms@time+1
  4555  000A46  EC71  F009         	call	_delay_1ms	;wreg free
  4556                           
  4557                           ;main.c: 1311:         MotorBREAK();
  4558  000A4A  ECD8  F009         	call	_MotorBREAK	;wreg free
  4559                           
  4560                           ;main.c: 1313:         if (vibration_mode == 1)
  4561  000A4E  042D               	decf	_vibration_mode,w,c
  4562  000A50  A4D8               	btfss	status,2,c
  4563  000A52  D014               	goto	l533
  4564                           
  4565                           ;main.c: 1314:         {;main.c: 1315:             LATCbits.LATC1 = 1;
  4566  000A54  828B               	bsf	3979,1,c	;volatile
  4567                           
  4568                           ;main.c: 1316:             delay_1ms(Vmotor_Time);
  4569  000A56  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  4570  000A5A  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4571  000A5E  EC71  F009         	call	_delay_1ms	;wreg free
  4572                           
  4573                           ;main.c: 1318:             LATCbits.LATC1 = 0;
  4574  000A62  928B               	bcf	3979,1,c	;volatile
  4575                           
  4576                           ;main.c: 1319:             _delay((unsigned long)((300)*(8000000/4000.0)));
  4577  000A64  0E04               	movlw	4
  4578  000A66  6E43               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4579  000A68  0E0C               	movlw	12
  4580  000A6A  6E42               	movwf	??_Homing_Again_Auto& (0+255),c
  4581  000A6C  0E34               	movlw	52
  4582  000A6E                     u2617:
  4583  000A6E  2EE8               	decfsz	wreg,f,c
  4584  000A70  D7FE               	bra	u2617
  4585  000A72  2E42               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4586  000A74  D7FC               	bra	u2617
  4587  000A76  2E43               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4588  000A78  D7FA               	bra	u2617
  4589                           
  4590                           ;main.c: 1320:         }
  4591  000A7A  D007               	goto	l3082
  4592  000A7C                     l533:
  4593                           
  4594                           ;main.c: 1322:         {;main.c: 1323:             LATCbits.LATC1 = 0;
  4595  000A7C  928B               	bcf	3979,1,c	;volatile
  4596                           
  4597                           ;main.c: 1324:              delay_1ms(Vmotor_Time);
  4598  000A7E  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  4599  000A82  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4600  000A86  EC71  F009         	call	_delay_1ms	;wreg free
  4601  000A8A                     l3082:
  4602                           
  4603                           ;main.c: 1327:         if(Stop==1)
  4604  000A8A  0430               	decf	_Stop,w,c
  4605  000A8C  B4D8               	btfsc	status,2,c
  4606  000A8E  D003               	goto	u1820
  4607  000A90                     l3086:
  4608                           
  4609                           ;main.c: 1290:     while ( Stop==0)
  4610  000A90  5030               	movf	_Stop,w,c
  4611  000A92  B4D8               	btfsc	status,2,c
  4612  000A94  D7B1               	goto	l528
  4613  000A96                     u1820:
  4614                           
  4615                           ;main.c: 1332:     LATAbits.LATA2 = 0;
  4616  000A96  9489               	bcf	3977,2,c	;volatile
  4617                           
  4618                           ;main.c: 1334:     if (NUM == 0 || Stop==1)
  4619  000A98  5015               	movf	_NUM,w,c
  4620  000A9A  1016               	iorwf	_NUM+1,w,c
  4621  000A9C  B4D8               	btfsc	status,2,c
  4622  000A9E  D003               	goto	u1840
  4623  000AA0  0430               	decf	_Stop,w,c
  4624  000AA2  A4D8               	btfss	status,2,c
  4625  000AA4  D018               	goto	l3104
  4626  000AA6                     u1840:
  4627                           
  4628                           ;main.c: 1335:     {;main.c: 1337:         if (vibration_mode == 1)
  4629  000AA6  042D               	decf	_vibration_mode,w,c
  4630  000AA8  A4D8               	btfss	status,2,c
  4631  000AAA  D013               	goto	l3102
  4632                           
  4633                           ;main.c: 1338:         {;main.c: 1339:             LATCbits.LATC1 = 1;
  4634  000AAC  828B               	bsf	3979,1,c	;volatile
  4635                           
  4636                           ;main.c: 1340:             delay_1ms(Vmotor_Time);
  4637  000AAE  C04F  F039         	movff	_Vmotor_Time,delay_1ms@time
  4638  000AB2  C050  F03A         	movff	_Vmotor_Time+1,delay_1ms@time+1
  4639  000AB6  EC71  F009         	call	_delay_1ms	;wreg free
  4640                           
  4641                           ;main.c: 1342:             LATCbits.LATC1 = 0;
  4642  000ABA  928B               	bcf	3979,1,c	;volatile
  4643                           
  4644                           ;main.c: 1343:             _delay((unsigned long)((300)*(8000000/4000.0)));
  4645  000ABC  0E04               	movlw	4
  4646  000ABE  6E43               	movwf	(??_Homing_Again_Auto+1)& (0+255),c
  4647  000AC0  0E0C               	movlw	12
  4648  000AC2  6E42               	movwf	??_Homing_Again_Auto& (0+255),c
  4649  000AC4  0E34               	movlw	52
  4650  000AC6                     u2627:
  4651  000AC6  2EE8               	decfsz	wreg,f,c
  4652  000AC8  D7FE               	bra	u2627
  4653  000ACA  2E42               	decfsz	??_Homing_Again_Auto& (0+255),f,c
  4654  000ACC  D7FC               	bra	u2627
  4655  000ACE  2E43               	decfsz	(??_Homing_Again_Auto+1)& (0+255),f,c
  4656  000AD0  D7FA               	bra	u2627
  4657  000AD2                     l3102:
  4658                           
  4659                           ;main.c: 1346:         IR_SENSORF = 0;
  4660  000AD2  0E00               	movlw	0
  4661  000AD4  6E2B               	movwf	_IR_SENSORF,c	;volatile
  4662  000AD6                     l3104:
  4663                           
  4664                           ;main.c: 1350:     NUM = 0;
  4665  000AD6  0E00               	movlw	0
  4666  000AD8  6E16               	movwf	_NUM+1,c
  4667  000ADA  0E00               	movlw	0
  4668  000ADC  6E15               	movwf	_NUM,c
  4669                           
  4670                           ;main.c: 1351:     OpMode = 4;
  4671  000ADE  0E04               	movlw	4
  4672  000AE0  6E52               	movwf	_OpMode,c	;volatile
  4673  000AE2  0012               	return		;funcret
  4674  000AE4                     __end_of_Homing_Again_Auto:
  4675                           	opt callstack 0
  4676                           
  4677 ;; *************** function _readWeighingData *****************
  4678 ;; Defined at:
  4679 ;;		line 1384 in file "main.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  i               2    8[COMRAM] int 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;Total ram usage:        2 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    3
  4700 ;; This function calls:
  4701 ;;		_Write1USART
  4702 ;;		_flushOut
  4703 ;; This function is called by:
  4704 ;;		_Homing_Again_Manual
  4705 ;;		_Homing_Again_Auto
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text26
  4710  001176                     __ptext26:
  4711                           	opt callstack 0
  4712  001176                     _readWeighingData:
  4713                           	opt callstack 26
  4714                           
  4715                           ;main.c: 1386:     int i;;main.c: 1388:     Serial_Buffer_Out[0] = 0xA5;
  4716                           
  4717                           ;incstack = 0
  4718  001176  0EA5               	movlw	165
  4719  001178  0100               	movlb	0	; () banked
  4720  00117A  6F60               	movwf	_Serial_Buffer_Out& (0+255),b
  4721                           
  4722                           ;main.c: 1389:     Serial_Buffer_Out[1] = 0x45;
  4723  00117C  0E45               	movlw	69
  4724  00117E  6F61               	movwf	(_Serial_Buffer_Out+1)& (0+255),b
  4725                           
  4726                           ;main.c: 1390:     Serial_Buffer_Out[2] = 0x00;
  4727  001180  0E00               	movlw	0
  4728  001182  6F62               	movwf	(_Serial_Buffer_Out+2)& (0+255),b
  4729                           
  4730                           ;main.c: 1391:     Serial_Buffer_Out[3] = 0x45;
  4731  001184  0E45               	movlw	69
  4732  001186  6F63               	movwf	(_Serial_Buffer_Out+3)& (0+255),b
  4733                           
  4734                           ;main.c: 1392:     Serial_Buffer_Out[4] = 0x5A;
  4735  001188  0E5A               	movlw	90
  4736  00118A  6F64               	movwf	(_Serial_Buffer_Out+4)& (0+255),b
  4737                           
  4738                           ;main.c: 1393:     for (i=0; i<5;i++)
  4739  00118C  0E00               	movlw	0
  4740  00118E  6E3C               	movwf	readWeighingData@i+1,c
  4741  001190  0E00               	movlw	0
  4742  001192  6E3B               	movwf	readWeighingData@i,c
  4743  001194                     l2728:
  4744                           
  4745                           ;main.c: 1394:         Write1USART(Serial_Buffer_Out[i]);
  4746  001194  0E60               	movlw	low _Serial_Buffer_Out
  4747  001196  243B               	addwf	readWeighingData@i,w,c
  4748  001198  6ED9               	movwf	fsr2l,c
  4749  00119A  0E00               	movlw	high _Serial_Buffer_Out
  4750  00119C  203C               	addwfc	readWeighingData@i+1,w,c
  4751  00119E  6EDA               	movwf	fsr2h,c
  4752  0011A0  50DF               	movf	indf2,w,c
  4753  0011A2  ECC1  F009         	call	_Write1USART
  4754  0011A6  4A3B               	infsnz	readWeighingData@i,f,c
  4755  0011A8  2A3C               	incf	readWeighingData@i+1,f,c
  4756  0011AA  BE3C               	btfsc	readWeighingData@i+1,7,c
  4757  0011AC  D7F3               	goto	l2728
  4758  0011AE  503C               	movf	readWeighingData@i+1,w,c
  4759  0011B0  E104               	bnz	u1520
  4760  0011B2  0E05               	movlw	5
  4761  0011B4  5C3B               	subwf	readWeighingData@i,w,c
  4762  0011B6  A0D8               	btfss	status,0,c
  4763  0011B8  D7ED               	goto	l2728
  4764  0011BA                     u1520:
  4765                           
  4766                           ;main.c: 1396:     flushOut();
  4767  0011BA  EC1B  F009         	call	_flushOut	;wreg free
  4768  0011BE  0012               	return		;funcret
  4769  0011C0                     __end_of_readWeighingData:
  4770                           	opt callstack 0
  4771                           
  4772 ;; *************** function _flushOut *****************
  4773 ;; Defined at:
  4774 ;;		line 1371 in file "main.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  i               2    6[COMRAM] int 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;Total ram usage:        2 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    2
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;;		_readWeighingData
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text27
  4804  001236                     __ptext27:
  4805                           	opt callstack 0
  4806  001236                     _flushOut:
  4807                           	opt callstack 28
  4808                           
  4809                           ;main.c: 1373:     int i;;main.c: 1375:     for(i=0; i<16; i++)
  4810                           
  4811                           ;incstack = 0
  4812  001236  0E00               	movlw	0
  4813  001238  6E3A               	movwf	flushOut@i+1,c
  4814  00123A  0E00               	movlw	0
  4815  00123C  6E39               	movwf	flushOut@i,c
  4816  00123E                     l2436:
  4817                           
  4818                           ;main.c: 1376:     {;main.c: 1377:         Serial_Buffer_Out[i]=0x00;
  4819  00123E  0E60               	movlw	low _Serial_Buffer_Out
  4820  001240  2439               	addwf	flushOut@i,w,c
  4821  001242  6ED9               	movwf	fsr2l,c
  4822  001244  0E00               	movlw	high _Serial_Buffer_Out
  4823  001246  203A               	addwfc	flushOut@i+1,w,c
  4824  001248  6EDA               	movwf	fsr2h,c
  4825  00124A  0E00               	movlw	0
  4826  00124C  6EDF               	movwf	indf2,c
  4827                           
  4828                           ;main.c: 1378:     }
  4829  00124E  4A39               	infsnz	flushOut@i,f,c
  4830  001250  2A3A               	incf	flushOut@i+1,f,c
  4831  001252  BE3A               	btfsc	flushOut@i+1,7,c
  4832  001254  D7F4               	goto	l2436
  4833  001256  503A               	movf	flushOut@i+1,w,c
  4834  001258  E105               	bnz	u1290
  4835  00125A  0E10               	movlw	16
  4836  00125C  5C39               	subwf	flushOut@i,w,c
  4837  00125E  B0D8               	btfsc	status,0,c
  4838  001260  0012               	return	
  4839  001262  D7ED               	goto	l2436
  4840  001264                     u1290:
  4841  001264  0012               	return		;funcret
  4842  001266                     __end_of_flushOut:
  4843                           	opt callstack 0
  4844                           
  4845 ;; *************** function _Write1USART *****************
  4846 ;; Defined at:
  4847 ;;		line 709 in file "main.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  data            1    wreg     unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  data            1    6[COMRAM] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;Total ram usage:        1 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    2
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_main
  4872 ;;		_readWeighingData
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text28
  4877  001382                     __ptext28:
  4878                           	opt callstack 0
  4879  001382                     _Write1USART:
  4880                           	opt callstack 28
  4881                           
  4882                           ;incstack = 0
  4883                           ;Write1USART@data stored from wreg
  4884  001382  6E39               	movwf	Write1USART@data,c
  4885                           
  4886                           ;main.c: 709: void Write1USART(char data);main.c: 710: {;main.c: 711:    TXREG1 = data;
  4887  001384  C039  FFAE         	movff	Write1USART@data,4014	;volatile
  4888  001388                     l387:
  4889  001388  B2AD               	btfsc	4013,1,c	;volatile
  4890  00138A  0012               	return	
  4891  00138C  D7FD               	goto	l387
  4892  00138E                     __end_of_Write1USART:
  4893                           	opt callstack 0
  4894                           
  4895 ;; *************** function _delay_1ms *****************
  4896 ;; Defined at:
  4897 ;;		line 615 in file "main.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  time            2    6[COMRAM] unsigned int 
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      void 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4911 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;Total ram usage:        3 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    2
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_MotorPosition_Init
  4922 ;;		_Homing_Again_Manual
  4923 ;;		_Homing_Again_Auto
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text29
  4928  0012E2                     __ptext29:
  4929                           	opt callstack 0
  4930  0012E2                     _delay_1ms:
  4931                           	opt callstack 27
  4932                           
  4933                           ;main.c: 615: void delay_1ms(unsigned int time);main.c: 616:  {;main.c: 617:    while(ti
      +                          me > 0)
  4934                           
  4935                           ;incstack = 0
  4936  0012E2  D00A               	goto	l375
  4937  0012E4                     l2668:
  4938                           
  4939                           ;main.c: 618:    {;main.c: 619:        _delay((unsigned long)((1)*(8000000/4000.0)));
  4940  0012E4  0E03               	movlw	3
  4941  0012E6  6E3B               	movwf	??_delay_1ms& (0+255),c
  4942  0012E8  0E98               	movlw	152
  4943  0012EA                     u2637:
  4944  0012EA  2EE8               	decfsz	wreg,f,c
  4945  0012EC  D7FE               	bra	u2637
  4946  0012EE  2E3B               	decfsz	??_delay_1ms& (0+255),f,c
  4947  0012F0  D7FC               	bra	u2637
  4948                           
  4949                           ;main.c: 620:       time--;
  4950  0012F2  0639               	decf	delay_1ms@time,f,c
  4951  0012F4  A0D8               	btfss	status,0,c
  4952  0012F6  063A               	decf	delay_1ms@time+1,f,c
  4953  0012F8                     l375:
  4954                           
  4955                           ;main.c: 617:    while(time > 0)
  4956  0012F8  5039               	movf	delay_1ms@time,w,c
  4957  0012FA  103A               	iorwf	delay_1ms@time+1,w,c
  4958  0012FC  B4D8               	btfsc	status,2,c
  4959  0012FE  0012               	return	
  4960  001300  D7F1               	goto	l2668
  4961  001302                     __end_of_delay_1ms:
  4962                           	opt callstack 0
  4963                           
  4964 ;; *************** function _WriteSTLED316SMode *****************
  4965 ;; Defined at:
  4966 ;;		line 993 in file "main.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  msg             1    wreg     unsigned char 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  msg             1   14[COMRAM] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        3 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    3
  4987 ;; This function calls:
  4988 ;;		_STLED316s_SPI_SendData
  4989 ;; This function is called by:
  4990 ;;		_Homing_Again_Auto
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text30
  4995  000C70                     __ptext30:
  4996                           	opt callstack 0
  4997  000C70                     _WriteSTLED316SMode:
  4998                           	opt callstack 26
  4999                           
  5000                           ;incstack = 0
  5001                           ;WriteSTLED316SMode@msg stored from wreg
  5002  000C70  6E41               	movwf	WriteSTLED316SMode@msg,c
  5003                           
  5004                           ;main.c: 993: void WriteSTLED316SMode( char msg);main.c: 994: {;main.c: 995:  LATCbits.L
      +                          ATC4 = 0;
  5005  000C72  988B               	bcf	3979,4,c	;volatile
  5006                           
  5007                           ;main.c: 997:  STLED316s_SPI_SendData (0x00 );
  5008  000C74  0E00               	movlw	0
  5009  000C76  EC47  F008         	call	_STLED316s_SPI_SendData
  5010                           
  5011                           ;main.c: 1000:  LATCbits.LATC4 = 1;
  5012  000C7A  888B               	bsf	3979,4,c	;volatile
  5013                           
  5014                           ;main.c: 1002:  LATCbits.LATC4 = 0;
  5015  000C7C  988B               	bcf	3979,4,c	;volatile
  5016                           
  5017                           ;main.c: 1004:  STLED316s_SPI_SendData (0x00);
  5018  000C7E  0E00               	movlw	0
  5019  000C80  EC47  F008         	call	_STLED316s_SPI_SendData
  5020                           
  5021                           ;main.c: 1006:  switch(msg)
  5022  000C84  D031               	goto	l2706
  5023  000C86                     l2690:
  5024                           
  5025                           ;main.c: 1009:      STLED316s_SPI_SendData (0x79);
  5026  000C86  0E79               	movlw	121
  5027  000C88  EC47  F008         	call	_STLED316s_SPI_SendData
  5028                           
  5029                           ;main.c: 1010:         STLED316s_SPI_SendData (0x3F);
  5030  000C8C  0E3F               	movlw	63
  5031  000C8E  EC47  F008         	call	_STLED316s_SPI_SendData
  5032                           
  5033                           ;main.c: 1011:        break;
  5034  000C92  D047               	goto	l460
  5035  000C94                     l2692:
  5036                           
  5037                           ;main.c: 1013:      STLED316s_SPI_SendData (0x3F);
  5038  000C94  0E3F               	movlw	63
  5039  000C96  EC47  F008         	call	_STLED316s_SPI_SendData
  5040                           
  5041                           ;main.c: 1014:         STLED316s_SPI_SendData (0x73);
  5042  000C9A  0E73               	movlw	115
  5043  000C9C  EC47  F008         	call	_STLED316s_SPI_SendData
  5044                           
  5045                           ;main.c: 1015:       break;
  5046  000CA0  D040               	goto	l460
  5047  000CA2                     l2694:
  5048                           
  5049                           ;main.c: 1017:      STLED316s_SPI_SendData (0x39);
  5050  000CA2  0E39               	movlw	57
  5051  000CA4  EC47  F008         	call	_STLED316s_SPI_SendData
  5052                           
  5053                           ;main.c: 1018:         STLED316s_SPI_SendData (0x77);
  5054  000CA8  0E77               	movlw	119
  5055  000CAA  EC47  F008         	call	_STLED316s_SPI_SendData
  5056                           
  5057                           ;main.c: 1019:        break;
  5058  000CAE  D039               	goto	l460
  5059  000CB0                     l2696:
  5060                           
  5061                           ;main.c: 1021:      STLED316s_SPI_SendData (0x00);
  5062  000CB0  0E00               	movlw	0
  5063  000CB2  EC47  F008         	call	_STLED316s_SPI_SendData
  5064                           
  5065                           ;main.c: 1022:         STLED316s_SPI_SendData (0x00);
  5066  000CB6  0E00               	movlw	0
  5067  000CB8  EC47  F008         	call	_STLED316s_SPI_SendData
  5068                           
  5069                           ;main.c: 1023:        break;
  5070  000CBC  D032               	goto	l460
  5071  000CBE                     l2698:
  5072                           
  5073                           ;main.c: 1025:      STLED316s_SPI_SendData (0x00);
  5074  000CBE  0E00               	movlw	0
  5075  000CC0  EC47  F008         	call	_STLED316s_SPI_SendData
  5076                           
  5077                           ;main.c: 1026:         STLED316s_SPI_SendData (0x3F);
  5078  000CC4  0E3F               	movlw	63
  5079  000CC6  EC47  F008         	call	_STLED316s_SPI_SendData
  5080                           
  5081                           ;main.c: 1027:         break;
  5082  000CCA  D02B               	goto	l460
  5083  000CCC                     l2700:
  5084                           
  5085                           ;main.c: 1029:      STLED316s_SPI_SendData (0x79);
  5086  000CCC  0E79               	movlw	121
  5087  000CCE  EC47  F008         	call	_STLED316s_SPI_SendData
  5088                           
  5089                           ;main.c: 1030:         STLED316s_SPI_SendData (0x06);
  5090  000CD2  0E06               	movlw	6
  5091  000CD4  EC47  F008         	call	_STLED316s_SPI_SendData
  5092                           
  5093                           ;main.c: 1031:         break;
  5094  000CD8  D024               	goto	l460
  5095  000CDA                     l2702:
  5096                           
  5097                           ;main.c: 1033:      STLED316s_SPI_SendData (0x77);
  5098  000CDA  0E77               	movlw	119
  5099  000CDC  EC47  F008         	call	_STLED316s_SPI_SendData
  5100                           
  5101                           ;main.c: 1034:         STLED316s_SPI_SendData (0x3E);
  5102  000CE0  0E3E               	movlw	62
  5103  000CE2  EC47  F008         	call	_STLED316s_SPI_SendData
  5104                           
  5105                           ;main.c: 1035:         break;
  5106  000CE6  D01D               	goto	l460
  5107  000CE8                     l2706:
  5108  000CE8  5041               	movf	WriteSTLED316SMode@msg,w,c
  5109  000CEA  6E3F               	movwf	??_WriteSTLED316SMode& (0+255),c
  5110  000CEC  6A40               	clrf	(??_WriteSTLED316SMode+1)& (0+255),c
  5111                           
  5112                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5113                           ; Switch size 1, requested type "simple"
  5114                           ; Number of cases is 1, Range of values is 0 to 0
  5115                           ; switch strategies available:
  5116                           ; Name         Instructions Cycles
  5117                           ; simple_byte            4     3 (average)
  5118                           ;	Chosen strategy is simple_byte
  5119  000CEE  5040               	movf	??_WriteSTLED316SMode+1,w,c
  5120  000CF0  0A00               	xorlw	0	; case 0
  5121  000CF2  A4D8               	btfss	status,2,c
  5122  000CF4  D016               	goto	l460
  5123                           
  5124                           ; Switch size 1, requested type "simple"
  5125                           ; Number of cases is 7, Range of values is 65 to 88
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte           22    12 (average)
  5129                           ;	Chosen strategy is simple_byte
  5130  000CF6  503F               	movf	??_WriteSTLED316SMode,w,c
  5131  000CF8  0A41               	xorlw	65	; case 65
  5132  000CFA  B4D8               	btfsc	status,2,c
  5133  000CFC  D7EE               	goto	l2702
  5134  000CFE  0A02               	xorlw	2	; case 67
  5135  000D00  B4D8               	btfsc	status,2,c
  5136  000D02  D7CF               	goto	l2694
  5137  000D04  0A06               	xorlw	6	; case 69
  5138  000D06  B4D8               	btfsc	status,2,c
  5139  000D08  D7BE               	goto	l2690
  5140  000D0A  0A02               	xorlw	2	; case 71
  5141  000D0C  B4D8               	btfsc	status,2,c
  5142  000D0E  D7D7               	goto	l2698
  5143  000D10  0A08               	xorlw	8	; case 79
  5144  000D12  B4D8               	btfsc	status,2,c
  5145  000D14  D7BF               	goto	l2692
  5146  000D16  0A1C               	xorlw	28	; case 83
  5147  000D18  B4D8               	btfsc	status,2,c
  5148  000D1A  D7D8               	goto	l2700
  5149  000D1C  0A0B               	xorlw	11	; case 88
  5150  000D1E  B4D8               	btfsc	status,2,c
  5151  000D20  D7C7               	goto	l2696
  5152  000D22                     l460:
  5153                           
  5154                           ;main.c: 1040:  LATCbits.LATC4 = 1;
  5155  000D22  888B               	bsf	3979,4,c	;volatile
  5156                           
  5157                           ;main.c: 1042:  LATCbits.LATC4 = 0;
  5158  000D24  988B               	bcf	3979,4,c	;volatile
  5159                           
  5160                           ;main.c: 1044:  STLED316s_SPI_SendData ( 0x0D );
  5161  000D26  0E0D               	movlw	13
  5162  000D28  EC47  F008         	call	_STLED316s_SPI_SendData
  5163                           
  5164                           ;main.c: 1046:  LATCbits.LATC4 = 1;
  5165  000D2C  888B               	bsf	3979,4,c	;volatile
  5166  000D2E  0012               	return		;funcret
  5167  000D30                     __end_of_WriteSTLED316SMode:
  5168                           	opt callstack 0
  5169                           
  5170 ;; *************** function _STLED316s_SPI_SendData *****************
  5171 ;; Defined at:
  5172 ;;		line 891 in file "main.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  Data            1    wreg     unsigned char 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  Data            1    8[COMRAM] unsigned char 
  5177 ;;  t               1   11[COMRAM] unsigned char 
  5178 ;;  i               1   10[COMRAM] unsigned char 
  5179 ;;  temp            1    9[COMRAM] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;Total ram usage:        6 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    2
  5196 ;; This function calls:
  5197 ;;		Nothing
  5198 ;; This function is called by:
  5199 ;;		_InitSTLED316
  5200 ;;		_WriteSTLED316SData
  5201 ;;		_WriteSTLED316SMode
  5202 ;;		_WriteSTLED316SErr
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text31
  5207  00108E                     __ptext31:
  5208                           	opt callstack 0
  5209  00108E                     _STLED316s_SPI_SendData:
  5210                           	opt callstack 27
  5211                           
  5212                           ;incstack = 0
  5213                           ;STLED316s_SPI_SendData@Data stored from wreg
  5214  00108E  6E3B               	movwf	STLED316s_SPI_SendData@Data,c
  5215                           
  5216                           ;main.c: 891: void STLED316s_SPI_SendData( unsigned char Data );main.c: 892: {;main.c: 8
      +                          93:  char i,temp,t;;main.c: 895:  for(i = 0; i < 8 ;i ++)
  5217  001090  0E00               	movlw	0
  5218  001092  6E3D               	movwf	STLED316s_SPI_SendData@i,c
  5219  001094                     l425:
  5220                           
  5221                           ;main.c: 896:  {;main.c: 897:   LATCbits.LATC3 = 0;
  5222  001094  968B               	bcf	3979,3,c	;volatile
  5223                           
  5224                           ;main.c: 898:   temp = Data & (0x1 << i);
  5225  001096  C03D  F039         	movff	STLED316s_SPI_SendData@i,??_STLED316s_SPI_SendData
  5226  00109A  0E01               	movlw	1
  5227  00109C  6E3A               	movwf	(??_STLED316s_SPI_SendData+1)& (0+255),c
  5228  00109E  2A39               	incf	??_STLED316s_SPI_SendData,f,c
  5229  0010A0  D002               	goto	u1304
  5230  0010A2                     u1305:
  5231  0010A2  90D8               	bcf	status,0,c
  5232  0010A4  363A               	rlcf	??_STLED316s_SPI_SendData+1,f,c
  5233  0010A6                     u1304:
  5234  0010A6  2E39               	decfsz	??_STLED316s_SPI_SendData,f,c
  5235  0010A8  D7FC               	goto	u1305
  5236  0010AA  503A               	movf	??_STLED316s_SPI_SendData+1,w,c
  5237  0010AC  143B               	andwf	STLED316s_SPI_SendData@Data,w,c
  5238  0010AE  6E3C               	movwf	STLED316s_SPI_SendData@temp,c
  5239                           
  5240                           ;main.c: 899:   if(temp)
  5241  0010B0  503C               	movf	STLED316s_SPI_SendData@temp,w,c
  5242  0010B2  B4D8               	btfsc	status,2,c
  5243  0010B4  D002               	goto	l427
  5244                           
  5245                           ;main.c: 900:    LATCbits.LATC5 = 1;
  5246  0010B6  8A8B               	bsf	3979,5,c	;volatile
  5247  0010B8  D001               	goto	l2464
  5248  0010BA                     l427:
  5249                           
  5250                           ;main.c: 902:    LATCbits.LATC5 = 0;
  5251  0010BA  9A8B               	bcf	3979,5,c	;volatile
  5252  0010BC                     l2464:
  5253                           
  5254                           ;main.c: 903:   for( t = 0 ; t < 5; t++);
  5255  0010BC  0E00               	movlw	0
  5256  0010BE  6E3E               	movwf	STLED316s_SPI_SendData@t,c
  5257  0010C0                     l2470:
  5258  0010C0  2A3E               	incf	STLED316s_SPI_SendData@t,f,c
  5259  0010C2  0E04               	movlw	4
  5260  0010C4  643E               	cpfsgt	STLED316s_SPI_SendData@t,c
  5261  0010C6  D7FC               	goto	l2470
  5262                           
  5263                           ;main.c: 904:   LATCbits.LATC3 = 1;
  5264  0010C8  868B               	bsf	3979,3,c	;volatile
  5265                           
  5266                           ;main.c: 905:   for( t = 0 ; t < 5 ; t++);
  5267  0010CA  0E00               	movlw	0
  5268  0010CC  6E3E               	movwf	STLED316s_SPI_SendData@t,c
  5269  0010CE                     l2480:
  5270  0010CE  2A3E               	incf	STLED316s_SPI_SendData@t,f,c
  5271  0010D0  0E04               	movlw	4
  5272  0010D2  643E               	cpfsgt	STLED316s_SPI_SendData@t,c
  5273  0010D4  D7FC               	goto	l2480
  5274                           
  5275                           ;main.c: 906:  }
  5276  0010D6  2A3D               	incf	STLED316s_SPI_SendData@i,f,c
  5277  0010D8  0E07               	movlw	7
  5278  0010DA  643D               	cpfsgt	STLED316s_SPI_SendData@i,c
  5279  0010DC  D7DB               	goto	l425
  5280  0010DE  0012               	return	
  5281  0010E0                     __end_of_STLED316s_SPI_SendData:
  5282                           	opt callstack 0
  5283                           
  5284 ;; *************** function _Read_IR *****************
  5285 ;; Defined at:
  5286 ;;		line 1108 in file "main.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, status,2
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;Total ram usage:        0 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    2
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_MotorPosition_Init
  5311 ;;		_Homing_Again_Manual
  5312 ;;		_Homing_Again_Auto
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text32
  5317  001358                     __ptext32:
  5318                           	opt callstack 0
  5319  001358                     _Read_IR:
  5320                           	opt callstack 27
  5321                           
  5322                           ;main.c: 1110:     if(PORTAbits.RA1 == 1)
  5323                           
  5324                           ;incstack = 0
  5325  001358  A280               	btfss	3968,1,c	;volatile
  5326  00135A  D003               	goto	l2720
  5327                           
  5328                           ;main.c: 1111:     {;main.c: 1112:         IR_SENSORF = 0;
  5329  00135C  0E00               	movlw	0
  5330  00135E  6E2B               	movwf	_IR_SENSORF,c	;volatile
  5331                           
  5332                           ;main.c: 1113:     }
  5333  001360  0012               	return	
  5334  001362                     l2720:
  5335                           
  5336                           ;main.c: 1115:     {;main.c: 1116:         IR_SENSORF = 1;
  5337  001362  0E01               	movlw	1
  5338  001364  6E2B               	movwf	_IR_SENSORF,c	;volatile
  5339  001366  0012               	return		;funcret
  5340  001368                     __end_of_Read_IR:
  5341                           	opt callstack 0
  5342                           
  5343 ;; *************** function _MotorON_PWM *****************
  5344 ;; Defined at:
  5345 ;;		line 796 in file "main.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    3
  5366 ;; This function calls:
  5367 ;;		_Set_RG3_PWM
  5368 ;; This function is called by:
  5369 ;;		_MotorPosition_Init
  5370 ;;		_Homing_Again_Manual
  5371 ;;		_Homing_Again_Auto
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text33
  5376  0013A6                     __ptext33:
  5377                           	opt callstack 0
  5378  0013A6                     _MotorON_PWM:
  5379                           	opt callstack 26
  5380                           
  5381                           ;main.c: 798:  LATGbits.LATG3 = 1;
  5382                           
  5383                           ;incstack = 0
  5384  0013A6  868F               	bsf	3983,3,c	;volatile
  5385                           
  5386                           ;main.c: 799:  LATGbits.LATG4 = 1;
  5387  0013A8  888F               	bsf	3983,4,c	;volatile
  5388                           
  5389                           ;main.c: 801:  Set_RG3_PWM();
  5390  0013AA  ECC7  F009         	call	_Set_RG3_PWM	;wreg free
  5391  0013AE  0012               	return		;funcret
  5392  0013B0                     __end_of_MotorON_PWM:
  5393                           	opt callstack 0
  5394                           
  5395 ;; *************** function _Set_RG3_PWM *****************
  5396 ;; Defined at:
  5397 ;;		line 783 in file "main.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, status,2
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    2
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_MotorON_PWM
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text34
  5426  00138E                     __ptext34:
  5427                           	opt callstack 0
  5428  00138E                     _Set_RG3_PWM:
  5429                           	opt callstack 26
  5430                           
  5431                           ;main.c: 785:     CCP4CON = 0x0C;
  5432                           
  5433                           ;incstack = 0
  5434  00138E  0E0C               	movlw	12
  5435  001390  6E73               	movwf	3955,c	;volatile
  5436                           
  5437                           ;main.c: 786:     CCPR4L = PWM_reg;
  5438  001392  C051  FF74         	movff	_PWM_reg,3956	;volatile
  5439                           
  5440                           ;main.c: 787:   T4CONbits.TMR4ON = 1;
  5441  001396  8476               	bsf	3958,2,c	;volatile
  5442  001398  0012               	return		;funcret
  5443  00139A                     __end_of_Set_RG3_PWM:
  5444                           	opt callstack 0
  5445                           
  5446 ;; *************** function _MotorBREAK *****************
  5447 ;; Defined at:
  5448 ;;		line 804 in file "main.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, status,2, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;Total ram usage:        0 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    3
  5469 ;; This function calls:
  5470 ;;		_Clr_RG3_PWM
  5471 ;; This function is called by:
  5472 ;;		_MotorPosition_Init
  5473 ;;		_Homing_Again_Manual
  5474 ;;		_Homing_Again_Auto
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text35
  5479  0013B0                     __ptext35:
  5480                           	opt callstack 0
  5481  0013B0                     _MotorBREAK:
  5482                           	opt callstack 26
  5483                           
  5484                           ;main.c: 807:  Clr_RG3_PWM();
  5485                           
  5486                           ;incstack = 0
  5487  0013B0  ECE9  F009         	call	_Clr_RG3_PWM	;wreg free
  5488                           
  5489                           ;main.c: 809:  LATGbits.LATG3 = 1;
  5490  0013B4  868F               	bsf	3983,3,c	;volatile
  5491                           
  5492                           ;main.c: 810:  LATGbits.LATG4 = 1;
  5493  0013B6  888F               	bsf	3983,4,c	;volatile
  5494  0013B8  0012               	return		;funcret
  5495  0013BA                     __end_of_MotorBREAK:
  5496                           	opt callstack 0
  5497                           
  5498 ;; *************** function _Clr_RG3_PWM *****************
  5499 ;; Defined at:
  5500 ;;		line 790 in file "main.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    2
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_MotorBREAK
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text36
  5529  0013D2                     __ptext36:
  5530                           	opt callstack 0
  5531  0013D2                     _Clr_RG3_PWM:
  5532                           	opt callstack 26
  5533                           
  5534                           ;main.c: 792:  CCP4CON = 0x00;
  5535                           
  5536                           ;incstack = 0
  5537  0013D2  0E00               	movlw	0
  5538  0013D4  6E73               	movwf	3955,c	;volatile
  5539                           
  5540                           ;main.c: 793:     T4CONbits.TMR4ON = 0;
  5541  0013D6  9476               	bcf	3958,2,c	;volatile
  5542  0013D8  0012               	return		;funcret
  5543  0013DA                     __end_of_Clr_RG3_PWM:
  5544                           	opt callstack 0
  5545                           
  5546 ;; *************** function _high_isr *****************
  5547 ;; Defined at:
  5548 ;;		line 533 in file "main.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  i               1    5[COMRAM] unsigned char 
  5553 ;;  c               1    4[COMRAM] unsigned char 
  5554 ;;  Temp            1    3[COMRAM] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        5 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    1
  5571 ;; This function calls:
  5572 ;;		_Read1USART
  5573 ;;		i2_Write1USART
  5574 ;; This function is called by:
  5575 ;;		Interrupt level 2
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	intcode
  5580  000008                     __pintcode:
  5581                           	opt callstack 0
  5582  000008                     _high_isr:
  5583                           	opt callstack 26
  5584                           
  5585                           ;incstack = 0
  5586  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5587  00000A  CFD9 F034          	movff	fsr2l,??_high_isr
  5588  00000E  CFDA F035          	movff	fsr2h,??_high_isr+1
  5589                           
  5590                           ;main.c: 535:     unsigned char c, i;;main.c: 536:  unsigned char Temp;;main.c: 538:    
      +                           if ((PIR1bits.RC1IF))
  5591  000012  AA9E               	btfss	3998,5,c	;volatile
  5592  000014  D080               	goto	i2l348
  5593                           
  5594                           ;main.c: 539:  {;main.c: 541:   c=Read1USART();
  5595  000016  EC81  F009         	call	_Read1USART	;wreg free
  5596  00001A  6E37               	movwf	high_isr@c,c
  5597                           
  5598                           ;main.c: 543:   if ((c == 0xA5) && ((Serial_Flag == 0)||(Busy == 1)))
  5599  00001C  0EA5               	movlw	165
  5600  00001E  1837               	xorwf	high_isr@c,w,c
  5601  000020  A4D8               	btfss	status,2,c
  5602  000022  D017               	goto	i2l3504
  5603  000024  5032               	movf	_Serial_Flag,w,c
  5604  000026  B4D8               	btfsc	status,2,c
  5605  000028  D003               	goto	i2u237_40
  5606  00002A  042E               	decf	_Busy,w,c
  5607  00002C  A4D8               	btfss	status,2,c
  5608  00002E  D011               	goto	i2l3504
  5609  000030                     i2u237_40:
  5610                           
  5611                           ;main.c: 544:   {;main.c: 545:    Serial_GData = 1;
  5612  000030  0E01               	movlw	1
  5613  000032  6E31               	movwf	_Serial_GData,c
  5614                           
  5615                           ;main.c: 546:    Serial_Count = 0;
  5616  000034  0E00               	movlw	0
  5617  000036  6E26               	movwf	_Serial_Count+1,c
  5618  000038  0E00               	movlw	0
  5619  00003A  6E25               	movwf	_Serial_Count,c
  5620                           
  5621                           ;main.c: 547:    Serial_Buffer[Serial_Count] = c;
  5622  00003C  0E01               	movlw	low _Serial_Buffer
  5623  00003E  2425               	addwf	_Serial_Count,w,c
  5624  000040  6ED9               	movwf	fsr2l,c
  5625  000042  0E00               	movlw	high _Serial_Buffer
  5626  000044  2026               	addwfc	_Serial_Count+1,w,c
  5627  000046  6EDA               	movwf	fsr2h,c
  5628  000048  C037  FFDF         	movff	high_isr@c,indf2
  5629  00004C                     i2l3502:
  5630                           
  5631                           ;main.c: 548:             Serial_Count++;
  5632  00004C  4A25               	infsnz	_Serial_Count,f,c
  5633  00004E  2A26               	incf	_Serial_Count+1,f,c
  5634                           
  5635                           ;main.c: 549:   }
  5636  000050  D067               	goto	i2l372
  5637  000052                     i2l3504:
  5638  000052  0431               	decf	_Serial_GData,w,c
  5639  000054  A4D8               	btfss	status,2,c
  5640  000056  D064               	goto	i2l372
  5641                           
  5642                           ;main.c: 551:   {;main.c: 552:    Serial_Buffer[Serial_Count] = c;
  5643  000058  0E01               	movlw	low _Serial_Buffer
  5644  00005A  2425               	addwf	_Serial_Count,w,c
  5645  00005C  6ED9               	movwf	fsr2l,c
  5646  00005E  0E00               	movlw	high _Serial_Buffer
  5647  000060  2026               	addwfc	_Serial_Count+1,w,c
  5648  000062  6EDA               	movwf	fsr2h,c
  5649  000064  C037  FFDF         	movff	high_isr@c,indf2
  5650                           
  5651                           ;main.c: 554:    if(Serial_Count<5)
  5652  000068  5026               	movf	_Serial_Count+1,w,c
  5653  00006A  E152               	bnz	i2l3562
  5654  00006C  0E05               	movlw	5
  5655  00006E  5C25               	subwf	_Serial_Count,w,c
  5656  000070  B0D8               	btfsc	status,0,c
  5657  000072  D04E               	goto	i2l3562
  5658                           
  5659                           ;main.c: 555:             {;main.c: 556:                 if (c == 0x5A)
  5660  000074  0E5A               	movlw	90
  5661  000076  1837               	xorwf	high_isr@c,w,c
  5662  000078  A4D8               	btfss	status,2,c
  5663  00007A  D7E8               	goto	i2l3502
  5664                           
  5665                           ;main.c: 557:                 {;main.c: 558:                     Temp = Serial_Buffer[1]
      +                           + Serial_Buffer[2];
  5666  00007C  5002               	movf	_Serial_Buffer+1,w,c
  5667  00007E  2403               	addwf	_Serial_Buffer+2,w,c
  5668  000080  6E36               	movwf	high_isr@Temp,c
  5669                           
  5670                           ;main.c: 560:                     if (Temp == Serial_Buffer[3])
  5671  000082  5036               	movf	high_isr@Temp,w,c
  5672  000084  1804               	xorwf	_Serial_Buffer+3,w,c
  5673  000086  A4D8               	btfss	status,2,c
  5674  000088  D029               	goto	i2l3544
  5675                           
  5676                           ;main.c: 561:                     {;main.c: 562:                         if(Busy==0 || S
      +                          erial_Buffer[2]==0xF5)
  5677  00008A  502E               	movf	_Busy,w,c
  5678  00008C  B4D8               	btfsc	status,2,c
  5679  00008E  D004               	goto	i2u243_40
  5680  000090  0EF5               	movlw	245
  5681  000092  1803               	xorwf	_Serial_Buffer+2,w,c
  5682  000094  A4D8               	btfss	status,2,c
  5683  000096  D010               	goto	i2l3530
  5684  000098                     i2u243_40:
  5685                           
  5686                           ;main.c: 563:                         {;main.c: 564:                             for (i=
      +                          0; i<5; i++)
  5687  000098  0E00               	movlw	0
  5688  00009A  6E38               	movwf	high_isr@i,c
  5689  00009C                     i2l3524:
  5690                           
  5691                           ;main.c: 565:                                 Write1USART(Serial_Buffer[i]);
  5692  00009C  0E01               	movlw	low _Serial_Buffer
  5693  00009E  2438               	addwf	high_isr@i,w,c
  5694  0000A0  6ED9               	movwf	fsr2l,c
  5695  0000A2  6ADA               	clrf	fsr2h,c
  5696  0000A4  0E00               	movlw	high _Serial_Buffer
  5697  0000A6  22DA               	addwfc	fsr2h,f,c
  5698  0000A8  50DF               	movf	indf2,w,c
  5699  0000AA  ECCD  F009         	call	i2_Write1USART
  5700  0000AE  2A38               	incf	high_isr@i,f,c
  5701  0000B0  0E04               	movlw	4
  5702  0000B2  6438               	cpfsgt	high_isr@i,c
  5703  0000B4  D7F3               	goto	i2l3524
  5704  0000B6  D009               	goto	i2u245_40
  5705  0000B8                     i2l3530:
  5706                           
  5707                           ;main.c: 568:                         {;main.c: 569:                             for (i=
      +                          0; i<5; i++)
  5708  0000B8  0E00               	movlw	0
  5709  0000BA  6E38               	movwf	high_isr@i,c
  5710  0000BC                     i2l3536:
  5711                           
  5712                           ;main.c: 570:                                 Write1USART(0x16);
  5713  0000BC  0E16               	movlw	22
  5714  0000BE  ECCD  F009         	call	i2_Write1USART
  5715  0000C2  2A38               	incf	high_isr@i,f,c
  5716  0000C4  0E04               	movlw	4
  5717  0000C6  6438               	cpfsgt	high_isr@i,c
  5718  0000C8  D7F9               	goto	i2l3536
  5719  0000CA                     i2u245_40:
  5720                           
  5721                           ;main.c: 573:                         Serial_Flag = 1;
  5722  0000CA  0E01               	movlw	1
  5723  0000CC  6E32               	movwf	_Serial_Flag,c
  5724                           
  5725                           ;main.c: 574:                         Serial_Count = 0;
  5726  0000CE  0E00               	movlw	0
  5727  0000D0  6E26               	movwf	_Serial_Count+1,c
  5728  0000D2  0E00               	movlw	0
  5729  0000D4  6E25               	movwf	_Serial_Count,c
  5730                           
  5731                           ;main.c: 575:                         OpMode = 4;
  5732  0000D6  0E04               	movlw	4
  5733  0000D8  6E52               	movwf	_OpMode,c	;volatile
  5734                           
  5735                           ;main.c: 577:                     }
  5736  0000DA  D00F               	goto	i2u246_40
  5737  0000DC                     i2l3544:
  5738                           
  5739                           ;main.c: 579:                     {;main.c: 580:                         Serial_Flag = 0
      +                          ;
  5740  0000DC  0E00               	movlw	0
  5741  0000DE  6E32               	movwf	_Serial_Flag,c
  5742                           
  5743                           ;main.c: 581:                         Serial_Count = 0;
  5744  0000E0  0E00               	movlw	0
  5745  0000E2  6E26               	movwf	_Serial_Count+1,c
  5746  0000E4  0E00               	movlw	0
  5747  0000E6  6E25               	movwf	_Serial_Count,c
  5748                           
  5749                           ;main.c: 582:                         for (i=0; i<5; i++)
  5750  0000E8  0E00               	movlw	0
  5751  0000EA  6E38               	movwf	high_isr@i,c
  5752  0000EC                     i2l3550:
  5753                           
  5754                           ;main.c: 583:                             Write1USART(0x15);
  5755  0000EC  0E15               	movlw	21
  5756  0000EE  ECCD  F009         	call	i2_Write1USART
  5757  0000F2  2A38               	incf	high_isr@i,f,c
  5758  0000F4  0E04               	movlw	4
  5759  0000F6  6438               	cpfsgt	high_isr@i,c
  5760  0000F8  D7F9               	goto	i2l3550
  5761  0000FA                     i2u246_40:
  5762                           
  5763                           ;main.c: 586:                     if(Serial_Buffer[2]==0xF5 && OpMode == 4)
  5764  0000FA  0EF5               	movlw	245
  5765  0000FC  1803               	xorwf	_Serial_Buffer+2,w,c
  5766  0000FE  A4D8               	btfss	status,2,c
  5767  000100  D7A5               	goto	i2l3502
  5768  000102  0E04               	movlw	4
  5769  000104  1852               	xorwf	_OpMode,w,c	;volatile
  5770  000106  A4D8               	btfss	status,2,c
  5771  000108  D7A1               	goto	i2l3502
  5772                           
  5773                           ;main.c: 587:                     {;main.c: 588:                         Stop = 1;
  5774  00010A  0E01               	movlw	1
  5775  00010C  6E30               	movwf	_Stop,c
  5776  00010E  D79E               	goto	i2l3502
  5777  000110                     i2l3562:
  5778                           
  5779                           ;main.c: 593:             {;main.c: 594:                 Serial_GData = 0;
  5780  000110  0E00               	movlw	0
  5781  000112  6E31               	movwf	_Serial_GData,c
  5782  000114  D79B               	goto	i2l3502
  5783  000116                     i2l348:
  5784                           
  5785                           ;main.c: 601:     {;main.c: 602:         if (RCSTA1bits.OERR == 1)
  5786  000116  A2AC               	btfss	4012,1,c	;volatile
  5787  000118  D003               	goto	i2l372
  5788                           
  5789                           ;main.c: 603:         {;main.c: 604:             RCSTA1bits.OERR = 0;
  5790  00011A  92AC               	bcf	4012,1,c	;volatile
  5791                           
  5792                           ;main.c: 605:             RCSTA1bits.CREN = 0;
  5793  00011C  98AC               	bcf	4012,4,c	;volatile
  5794                           
  5795                           ;main.c: 606:             RCSTA1bits.CREN = 1;
  5796  00011E  88AC               	bsf	4012,4,c	;volatile
  5797  000120                     i2l372:
  5798  000120  C035  FFDA         	movff	??_high_isr+1,fsr2h
  5799  000124  C034  FFD9         	movff	??_high_isr,fsr2l
  5800  000128  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5801  00012A  0011               	retfie		f
  5802  00012C                     __end_of_high_isr:
  5803                           	opt callstack 0
  5804                           
  5805 ;; *************** function i2_Write1USART *****************
  5806 ;; Defined at:
  5807 ;;		line 709 in file "main.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  data            1    wreg     unsigned char 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  data            1    0[COMRAM] unsigned char 
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;Total ram usage:        1 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_high_isr
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text38
  5835  00139A                     __ptext38:
  5836                           	opt callstack 0
  5837  00139A                     i2_Write1USART:
  5838                           	opt callstack 26
  5839                           
  5840                           ;incstack = 0
  5841                           ;i2Write1USART@data stored from wreg
  5842  00139A  6E33               	movwf	i2Write1USART@data,c
  5843                           
  5844                           ;main.c: 709: void Write1USART(char data);main.c: 710: {;main.c: 711:    TXREG1 = data;
  5845  00139C  C033  FFAE         	movff	i2Write1USART@data,4014	;volatile
  5846  0013A0                     i2l387:
  5847  0013A0  B2AD               	btfsc	4013,1,c	;volatile
  5848  0013A2  0012               	return	
  5849  0013A4  D7FD               	goto	i2l387
  5850  0013A6                     __end_ofi2_Write1USART:
  5851                           	opt callstack 0
  5852                           
  5853 ;; *************** function _Read1USART *****************
  5854 ;; Defined at:
  5855 ;;		line 719 in file "main.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  result          1    0[COMRAM] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      unsigned char 
  5862 ;; Registers used:
  5863 ;;		wreg, status,2
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;Total ram usage:        1 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_high_isr
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text39
  5883  001302                     __ptext39:
  5884                           	opt callstack 0
  5885  001302                     _Read1USART:
  5886                           	opt callstack 26
  5887                           
  5888                           ;main.c: 721:     char result;;main.c: 723:     if (RCSTA1bits.OERR)
  5889                           
  5890                           ;incstack = 0
  5891  001302  A2AC               	btfss	4012,1,c	;volatile
  5892  001304  D007               	goto	i2l393
  5893                           
  5894                           ;main.c: 724:     {;main.c: 725:         RCSTA1bits.CREN = 0;
  5895  001306  98AC               	bcf	4012,4,c	;volatile
  5896                           
  5897                           ;main.c: 726:         result = RCREG1;
  5898  001308  CFAF F033          	movff	4015,Read1USART@result	;volatile
  5899                           
  5900                           ;main.c: 727:         result = RCREG1;
  5901  00130C  CFAF F033          	movff	4015,Read1USART@result	;volatile
  5902                           
  5903                           ;main.c: 728:         RCSTA1bits.CREN = 1;
  5904  001310  88AC               	bsf	4012,4,c	;volatile
  5905                           
  5906                           ;main.c: 729:     }
  5907  001312  D002               	goto	i2l1934
  5908  001314                     i2l393:
  5909                           
  5910                           ;main.c: 731:     {;main.c: 732:         result = RCREG1;
  5911  001314  CFAF F033          	movff	4015,Read1USART@result	;volatile
  5912  001318                     i2l1934:
  5913                           
  5914                           ;main.c: 735:     return result;
  5915  001318  5033               	movf	Read1USART@result,w,c
  5916  00131A  0012               	return		;funcret
  5917  00131C                     __end_of_Read1USART:
  5918                           	opt callstack 0
  5919  0000                     
  5920                           	psect	rparam
  5921  0000                     
  5922                           	psect	temp
  5923  000053                     btemp:
  5924                           	opt callstack 0
  5925  000053                     	ds	1
  5926  0000                     int$flags	set	btemp
  5927  0000                     wtemp8	set	btemp+1
  5928  0000                     ttemp5	set	btemp+1
  5929  0000                     ttemp6	set	btemp+4
  5930  0000                     ttemp7	set	btemp+8
  5931                           tosu	equ	0xFFF
  5932                           tosh	equ	0xFFE
  5933                           tosl	equ	0xFFD
  5934                           stkptr	equ	0xFFC
  5935                           pclatu	equ	0xFFB
  5936                           pclath	equ	0xFFA
  5937                           pcl	equ	0xFF9
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           indf0	equ	0xFEF
  5945                           postinc0	equ	0xFEE
  5946                           postdec0	equ	0xFED
  5947                           preinc0	equ	0xFEC
  5948                           plusw0	equ	0xFEB
  5949                           fsr0h	equ	0xFEA
  5950                           fsr0l	equ	0xFE9
  5951                           wreg	equ	0xFE8
  5952                           indf1	equ	0xFE7
  5953                           postinc1	equ	0xFE6
  5954                           postdec1	equ	0xFE5
  5955                           preinc1	equ	0xFE4
  5956                           plusw1	equ	0xFE3
  5957                           fsr1h	equ	0xFE2
  5958                           fsr1l	equ	0xFE1
  5959                           bsr	equ	0xFE0
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           preinc2	equ	0xFDC
  5964                           plusw2	equ	0xFDB
  5965                           fsr2h	equ	0xFDA
  5966                           fsr2l	equ	0xFD9
  5967                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      82
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_read_i2c
    _main->_write_i2c
    _write_i2c->___aldiv
    _read_i2c->___aldiv
    _i2c_Write->_i2c_Wait
    _i2c_Stop->_i2c_Wait
    _i2c_Start->_i2c_Wait
    _i2c_Restart->_i2c_Wait
    _i2c_Read->_i2c_Wait
    _i2c_Address->_i2c_Wait
    _WriteSTLED316SErr->_STLED316s_SPI_SendData
    _ToggleVIB_Mode->_WriteSTLED316SData
    _MotorPosition_Init->_delay_1ms
    _InitSTLED316->_STLED316s_SPI_SendData
    _Homing_Again_Manual->_WriteSTLED316SData
    _WriteSTLED316SData->___awdiv
    _Homing_Again_Auto->_WriteSTLED316SMode
    _readWeighingData->_flushOut
    _WriteSTLED316SMode->_STLED316s_SPI_SendData

Critical Paths under _high_isr in COMRAM

    _high_isr->_Read1USART
    _high_isr->i2_Write1USART

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   15634
                                             26 COMRAM     2     2      0
                  _Homing_Again_Auto
                _Homing_Again_Manual
                       _InitSTLED316
                 _MotorPosition_Init
                     _ToggleVIB_Mode
                        _Write1USART
                 _WriteSTLED316SData
                  _WriteSTLED316SErr
                              _flush
                           _flushOut
                           _i2c_Init
                               _init
                          _initMotor
                          _initUSART
                           _read_i2c
                          _write_i2c
 ---------------------------------------------------------------------------------
 (1) _write_i2c                                            6     0      6    2356
                                             20 COMRAM     6     0      6
                            ___aldiv
                        _i2c_Address
                          _i2c_Start
                           _i2c_Stop
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (1) _read_i2c                                             6     2      4    1718
                                             20 COMRAM     6     2      4
                            ___aldiv
                        _i2c_Address
                           _i2c_Read
                        _i2c_Restart
                          _i2c_Start
                           _i2c_Stop
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (2) _i2c_Write                                            1     1      0      22
                                              7 COMRAM     1     1      0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Stop                                             0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Start                                            0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Restart                                          0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Read                                             4     2      2      45
                                              7 COMRAM     4     2      2
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Address                                          3     2      1     296
                                              7 COMRAM     3     2      1
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (3) _i2c_Wait                                             1     1      0       0
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              6 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flush                                                2     2      0      68
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _WriteSTLED316SErr                                    3     3      0     227
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (1) _ToggleVIB_Mode                                       0     0      0    2406
                 _WriteSTLED316SData
 ---------------------------------------------------------------------------------
 (1) _MotorPosition_Init                                   2     2      0    1011
                                              9 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                          _delay_1ms
 ---------------------------------------------------------------------------------
 (1) _InitSTLED316                                         5     5      0     381
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (1) _Homing_Again_Manual                                  2     2      0    3575
                                             23 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                 _WriteSTLED316SData
                          _delay_1ms
                   _readWeighingData
 ---------------------------------------------------------------------------------
 (1) _WriteSTLED316SData                                   9     6      3    2406
                                             14 COMRAM     9     6      3
                            _Get7Seg
             _STLED316s_SPI_SendData
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              6 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Get7Seg                                              5     3      2     207
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Homing_Again_Auto                                    2     2      0    1396
                                             15 COMRAM     2     2      0
                         _MotorBREAK
                        _MotorON_PWM
                            _Read_IR
                 _WriteSTLED316SMode
                          _delay_1ms
                   _readWeighingData
 ---------------------------------------------------------------------------------
 (2) _readWeighingData                                     2     2      0     158
                                              8 COMRAM     2     2      0
                        _Write1USART
                           _flushOut
 ---------------------------------------------------------------------------------
 (1) _flushOut                                             2     2      0      68
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Write1USART                                          1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _delay_1ms                                            3     1      2    1011
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteSTLED316SMode                                   3     3      0     227
                                             12 COMRAM     3     3      0
             _STLED316s_SPI_SendData
 ---------------------------------------------------------------------------------
 (2) _STLED316s_SPI_SendData                               6     6      0     205
                                              6 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Read_IR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorON_PWM                                          0     0      0       0
                        _Set_RG3_PWM
 ---------------------------------------------------------------------------------
 (3) _Set_RG3_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorBREAK                                           0     0      0       0
                        _Clr_RG3_PWM
 ---------------------------------------------------------------------------------
 (3) _Clr_RG3_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                             5     5      0     309
                                              1 COMRAM     5     5      0
                         _Read1USART
                      i2_Write1USART
 ---------------------------------------------------------------------------------
 (5) i2_Write1USART                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Read1USART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Homing_Again_Auto
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _WriteSTLED316SMode
       _STLED316s_SPI_SendData
     _delay_1ms
     _readWeighingData
       _Write1USART
       _flushOut
   _Homing_Again_Manual
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _WriteSTLED316SData
       _Get7Seg
       _STLED316s_SPI_SendData
       ___awdiv
       ___awmod
     _delay_1ms
     _readWeighingData
       _Write1USART
       _flushOut
   _InitSTLED316
     _STLED316s_SPI_SendData
   _MotorPosition_Init
     _MotorBREAK
       _Clr_RG3_PWM
     _MotorON_PWM
       _Set_RG3_PWM
     _Read_IR
     _delay_1ms
   _ToggleVIB_Mode
     _WriteSTLED316SData
       _Get7Seg
       _STLED316s_SPI_SendData
       ___awdiv
       ___awmod
   _Write1USART
   _WriteSTLED316SData
     _Get7Seg
     _STLED316s_SPI_SendData
     ___awdiv
     ___awmod
   _WriteSTLED316SErr
     _STLED316s_SPI_SendData
   _flush
   _flushOut
   _i2c_Init
   _init
   _initMotor
   _initUSART
   _read_i2c
     ___aldiv
     _i2c_Address
       _i2c_Wait
     _i2c_Read
       _i2c_Wait
     _i2c_Restart
       _i2c_Wait
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Write
       _i2c_Wait
   _write_i2c
     ___aldiv
     _i2c_Address
       _i2c_Wait
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Write
       _i2c_Wait

 _high_isr (ROOT)
   _Read1USART
   i2_Write1USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      20       5       20.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      52       1       87.2%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      12        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 18 16:48:47 2020

                              _i 0011                    ??_i2c_Address 003B  
                   ___awdiv@sign 003E                    ?_InitSTLED316 0033  
                   __CFG_CP0$OFF 000000                      i2c_Read@ack 003C  
                            l180 12B2                              l252 02AA  
                            l244 01AA                              l280 044E  
                            l425 1094                              l281 044A  
                            l273 040E                              l265 03DC  
                            l506 0884                              l427 10BA  
                            l179 12B0                              l267 03E0  
                            l460 0D22                              l533 0A7C  
                            l285 046A                              l277 042A  
                            l269 03F0                              l375 12F8  
                            l528 09F8                              l473 0C62  
                            l387 1388                              l498 127E  
                            _PR4 000F77                              _NUM 0015  
         __size_ofi2_Write1USART 000C                     ___awmod@sign 003E  
                            wreg 000FE8                       _TXSTA1bits 000FAD  
                  ??_i2c_Restart 003A                             l3010 0BE2  
                           l3012 0BF0                             l3102 0AD2  
                           l3014 0BFE                             l3006 0BC6  
                           l3022 0C28                             l3104 0AD6  
                           l3016 0C0C                             l3008 0BD4  
                           l3042 09DC                             l3018 0C1A  
                           l3114 120E                             l2500 0EE6  
                           l3220 033E                             l2510 0EFA  
                           l2502 0EEA                             l3310 0526  
                           l3222 0346                             l3214 0320  
                           l2504 0EEE                             l2600 0FBA  
                           l3320 054A                             l3216 0328  
                           l3160 01AC                             l3082 0A8A  
                           l3058 0A26                             l2506 0EF2  
                           l2514 0F00                             l3218 0336  
                           l3226 0350                             l2700 0CCC  
                           l2436 123E                             l2508 0EF6  
                           l2516 0F50                             l2532 0E60  
                           l3404 06E4                             l3412 06F2  
                           l3340 0588                             l3324 0556  
                           l3244 03D8                             l3228 0380  
                           l3172 020A                             l2470 10C0  
                           l2702 0CDA                             l3086 0A90  
                           l3430 0760                             l3406 06E8  
                           l3414 0716                             l3342 0590  
                           l3350 05AA                             l3326 055C  
                           l2720 1362                             l2480 10CE  
                           l2464 10BC                             l2544 0E86  
                           l2560 0EB8                             l3432 0768  
                           l3424 0742                             l3408 06EC  
                           l3344 0598                             l3336 0578  
                           l3352 05E0                             l3184 025C  
                           l2706 0CE8                             l2490 0ED2  
                           l2546 0E8E                             l2538 0E70  
                           l3426 074A                             l3442 07C0  
                           l3418 0732                             l3346 05A0  
                           l3338 0580                             l2492 0ED6  
                           l2564 0EC6                             l2556 0EAE  
                           l2580 0F74                             l2652 0DA6  
                           l2900 1270                             l3428 0758  
                           l3436 0772                             l3284 04AC  
                           l3460 082C                             l3276 049A  
                           l3196 02B0                             l2494 0EDA  
                           l2654 0DA8                             l2750 0B18  
                           l3438 07A2                             l3358 0600  
                           l3294 04D0                             l3462 0832  
                           l2728 1194                             l2496 0EDE  
                           l2592 0FA2                             l2584 0F82  
                           l2576 0F68                             l2904 1280  
                           l2744 0B00                             l3384 06AA  
                           l3456 07F0                             l2690 0C86  
                           l2498 0EE2                             l2586 0F8A  
                           l2930 08B2                             l2914 0868  
                           l3394 06CE                             l3458 0824  
                           l2692 0C94                             l2668 12E4  
                           l2596 0FAC                             l2756 0B3A  
                           l2772 0B88                             l2694 0CA2  
                           l2758 0B46                             l3398 06D4  
                           l2696 0CB0                             l2960 0926  
                           l2776 0B9E                             l2768 0B7A  
                           l2698 0CBE                             l2970 094C  
                           l2972 0962                             l2878 104A  
                           l2992 09AC                             l2976 0968  
                           l2994 09B0                             u2030 03F4  
                           u1304 10A6                             u2120 044E  
                           u1305 10A2                             u2140 045E  
                           u2060 0412                             u2150 046E  
                           u1520 11BA                             u1440 0F8E  
                           u1600 1054                             u1290 1264  
                           u2170 04A4                             u2090 042E  
                           u1380 0E92                             u1560 0B4A  
                           u1730 0970                             u1650 08BC  
                           u2507 016E                             u1820 0A96  
                           u1900 01E6                             u2517 0694  
                           u1750 0980                             u2607 0A18  
                           u2527 103C                             u1840 0AA6  
                           u1920 0236                             u2617 0A6E  
                           u2537 1078                             _PEN2 007B5A  
                           u2627 0AC6                             u2547 0874  
                           u1595 0DE6                             u1780 0A30  
                           u1860 1234                             u2637 12EA  
                           u2557 08A4                             u2567 0918  
                           u2577 0956                             u1890 01DA  
                           u2587 09A0                             u2597 09E8  
                           _SEN2 007B58                             _Busy 002E  
                           _Stop 0030                             _data 002C  
                           _main 0130                             _init 10E0  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
             _MotorPosition_Init 102C                             btemp 0053  
                           start 012C                  __end_of_Get7Seg 0F54  
                  __CFG_IESO$OFF 000000      __end_of_Homing_Again_Manual 09BE  
                   ___param_bank 000000                     high_isr@Temp 0036  
            ?_MotorPosition_Init 0033                  __end_of_Read_IR 1368  
                 ??_InitSTLED316 003F                    __CFG_PLLDIV$1 000000  
                   _BAUDCON1bits 000F7E                  __end_of___aldiv 0BB0  
                          ?_main 0033                            ?_init 0033  
                __end_of___awdiv 0ED0                  __end_of___awmod 0FC4  
                ___awdiv@divisor 003B                            _T4CON 000F76  
                 __CFG_DEBUG$OFF 000000                            _RCEN2 007B5B  
                          i2l372 0120                            i2l348 0116  
                          i2l393 1314                            i2l387 13A0  
                ___awdiv@counter 003D                            _RSEN2 007B59  
                          _ETemp 001F                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                          _TRISF 000F97                            _TRISG 000F98  
            __end_of_i2c_Address 1346                   __CFG_FCMEN$OFF 000000  
           ??_MotorPosition_Init 003C                            _flush 1206  
                    _Clr_RG3_PWM 13D2                       _Read1USART 1302  
                          tablat 000FF5         ??_STLED316s_SPI_SendData 0039  
            __end_of_i2c_Restart 13D2                            ttemp5 0054  
                          ttemp6 0057                            ttemp7 005B  
                          status 000FD8                            wtemp8 0054  
                  i2_Write1USART 139A                    ??_Set_RG3_PWM 0039  
                __initialization 11C0                     __end_of_main 0850  
                   __end_of_init 112C                 __end_of_i2c_Init 1332  
               __end_of_i2c_Read 12BC                 __end_of_i2c_Wait 1358  
               __end_of_i2c_Stop 13C2        __size_of_readWeighingData 004A  
                         ??_main 004D                           ??_init 0039  
                  __activetblptr 000002                           _ACKEN2 007B5C  
                         _ACKDT2 007B5D                           ?_flush 0033  
                         _CCPR4L 000F74                 ___awdiv@dividend 0039  
             __size_of_i2c_Start 0008                        ??_Get7Seg 003B  
             __size_of_i2c_Write 000C                           i2l3502 004C  
                 __CFG_WDTEN$OFF 000000                           i2l3504 0052  
                         i2l3530 00B8                           i2l3524 009C  
                         i2l1934 1318                           i2l3550 00EC  
                         i2l3536 00BC                           i2l3544 00DC  
                         i2l3562 0110                           _RCREG1 000FAF  
                         _SPBRG1 000FB0                           _TRISD5 007CAD  
                         _TRISD6 007CAE                   ?i2_Write1USART 0033  
                         _TXREG1 000FAE                    ??_MotorON_PWM 0039  
                     _MotorBREAK 13B0                        ??_Read_IR 0039  
                read_i2c@address 0047                           _OpMode 0052  
                 __CFG_XINST$OFF 000000                 __end_of_high_isr 012C  
                      ??___aldiv 0041                        ??___awdiv 003D  
                 __CFG_STVREN$ON 000000                        ??___awmod 003D  
                 _PWM_Duty_Cycle 0027                 __end_of_flushOut 1266  
            __end_of_Set_RG3_PWM 139A                 __end_of_read_i2c 102C  
                    _i2c_Address 1332                           clear_0 11E6  
                         clear_1 11F2                 ___awdiv@quotient 003F  
                ___awmod@divisor 003B                  ___awmod@counter 003D  
               Read1USART@result 0033       __end_of_WriteSTLED316SData 0DC2  
     __end_of_WriteSTLED316SMode 0D30                           flush@i 0039  
                  i2c_Write@data 003A                     __pdataCOMRAM 004F  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                      _i2c_Restart 13CA  
                    ?_Read1USART 0033             __end_of_InitSTLED316 0E4C  
                     __accesstop 0060          __end_of__initialization 11F8  
__size_of_STLED316s_SPI_SendData 0052                _WriteSTLED316SErr 0BB0  
                  ___rparam_used 000001               ?_WriteSTLED316SErr 0033  
                 __pcstackCOMRAM 0033              __end_of_MotorON_PWM 13B0  
                  __end_of_flush 1236               __size_of_delay_1ms 0020  
              __end_of_i2c_Start 13CA              ??_WriteSTLED316SErr 003F  
              __end_of_i2c_Write 1382                          ??_flush 0039  
                      ?_i2c_Init 0033                        ?_i2c_Read 003A  
                     __pbssBANK0 0060                        ?_i2c_Wait 0033  
                ??i2_Write1USART 0033                        ?_i2c_Stop 0033  
             __size_of_initUSART 0026        __end_of_WriteSTLED316SErr 0C70  
                  ??_Write1USART 0039               __size_of_initMotor 000E  
                    ?_MotorBREAK 0033                      _Set_RG3_PWM 138E  
        __size_of_ToggleVIB_Mode 002C                          _CCP4CON 000F73  
            __size_of_Read1USART 001A           _STLED316s_SPI_SendData 108E  
               _readWeighingData 1176               i2c_Address@address 003B  
                __CFG_WDTPS$2048 000000                          _SPBRGH1 000F7F  
                        _SSP2ADD 000F6E                          _SSP2BUF 000F6F  
                        _NUM_REC 0013                     ?_Clr_RG3_PWM 0033  
                      ?_high_isr 0033                       ??_i2c_Init 0039  
                     ??_i2c_Read 003C                          _PWM_reg 0051  
                     ??_i2c_Wait 0039                          _Get7Seg 0ED0  
                     ??_i2c_Stop 003A                __end_of_delay_1ms 1302  
              i2Write1USART@data 0033                        ?_flushOut 0033  
                      ?_read_i2c 0047                      _Serial_Flag 0032  
             __size_of_write_i2c 004A                      _MotorON_PWM 13A6  
                        _Read_IR 1358            WriteSTLED316SMode@msg 0041  
                        __Hparam 0000                          __Lparam 0000  
            __end_of_Write1USART 138E       WriteSTLED316SData@NUM_DIG0 0044  
     WriteSTLED316SData@NUM_DIG1 0046                          ___aldiv 0AE4  
                    _Motor_Speed 001D                          ___awdiv 0E4C  
                        ___awmod 0F54                     Get7Seg@Digit 0039  
   __size_of_Homing_Again_Manual 016E                          __pcinit 11C0  
                        __ramtop 1000                __end_of_initUSART 12E2  
                        __ptext0 0130                          __ptext1 112C  
                        __ptext2 0FC4                          __ptext3 1376  
                        __ptext4 13BA                          __ptext5 13C2  
                        __ptext6 13CA                          __ptext7 1292  
                        __ptext8 1332                          __ptext9 1346  
              __end_of_initMotor 1376                        _T3CONbits 000F79  
            __size_of_MotorBREAK 000A                 ___awmod@dividend 0039  
               ___aldiv@dividend 0039                        _T4CONbits 000F76  
                  delay_1ms@time 0039                __CFG_MSSPMSK$MSK5 000000  
          __size_of_InitSTLED316 008A      __size_of_MotorPosition_Init 0062  
                     _pause_Time 002A                        _EAdd_High 0023  
                     ??_high_isr 0034             end_of_initialization 11F8  
     __size_of_WriteSTLED316SErr 00C0             i2c_Address@l_address 003C  
                     ??_flushOut 0039                       ??_read_i2c 004B  
                  __Lmediumconst 0000          WriteSTLED316SData@data3 0048  
        WriteSTLED316SData@data4 0049                 ___aldiv@quotient 0043  
                        postdec1 000FE5                          postinc0 000FEE  
                   ?_i2c_Address 003A                     _InitSTLED316 0DC2  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
              __end_of_write_i2c 1176                 __CFG_CPUDIV$OSC1 000000  
                      _TRISCbits 000F94                     ?_i2c_Restart 0033  
                   ??_Read1USART 0033               _WriteSTLED316SData 0D30  
             _WriteSTLED316SMode 0C70                      _Write1USART 1382  
            ?_WriteSTLED316SData 0041              ?_WriteSTLED316SMode 0033  
                 _ToggleVIB_Mode 1266                        _Device_ID 0019  
                    _Vmotor_Time 004F                    __pidataCOMRAM 13DA  
             __end_of_Read1USART 131C                    _Serial_Buffer 0001  
                      _i2c_Start 13C2                        _i2c_Write 1376  
           ??_WriteSTLED316SData 0044              start_initialization 11C0  
           ??_WriteSTLED316SMode 003F             __size_of_Clr_RG3_PWM 0008  
       __end_of_readWeighingData 11C0                __size_of_i2c_Init 0016  
              __size_of_i2c_Read 002A                __size_of_i2c_Wait 0012  
                   ??_MotorBREAK 0039                __size_of_i2c_Stop 0008  
         __end_of_ToggleVIB_Mode 1292                     ?_Set_RG3_PWM 0033  
        ?_STLED316s_SPI_SendData 0033                       ?_i2c_Start 0033  
                     ?_i2c_Write 0033                      __pbssCOMRAM 0001  
             __end_of_MotorBREAK 13BA              __CFG_CCP2MX$DEFAULT 000000  
                       ?_Get7Seg 0039              _Homing_Again_Manual 0850  
              __size_of_high_isr 0124            __end_ofi2_Write1USART 13A6  
                   ?_MotorON_PWM 0033                         ?_Read_IR 0033  
              __size_of_flushOut 0030                        _delay_1ms 12E2  
              __size_of_read_i2c 0068                _Homing_Again_Auto 09BE  
                ?_ToggleVIB_Mode 0033   __end_of_STLED316s_SPI_SendData 10E0  
             ?_Homing_Again_Auto 0033                        __pintcode 0008  
                       ?___aldiv 0039                         ?___awdiv 0039  
                       ?___awmod 0039             ?_Homing_Again_Manual 0033  
            ??_Homing_Again_Auto 0042             __size_of_i2c_Address 0014  
           WriteSTLED316SErr@msg 0041                        _initUSART 12BC  
                      _initMotor 1368                      Get7Seg@Data 003D  
                 __size_of_flush 0030                  Write1USART@data 0039  
           __size_of_i2c_Restart 0008                  ___aldiv@divisor 003D  
                ___aldiv@counter 0041        __end_of_Homing_Again_Auto 0AE4  
                       _LATAbits 000F89                         _EAdd_Low 0021  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                       _LATGbits 000F8F                         _IPR1bits 000F9F  
                       _PIE1bits 000F9D                       ?_delay_1ms 0039  
              readWeighingData@i 003B                         i2u243_40 0098  
                       i2u245_40 00CA                         i2u237_40 0030  
                       i2u246_40 00FA                         _PIR1bits 000F9E  
                       _RCONbits 000FD0                         _SSP2CON1 000F6C  
                       _SSP2CON2 000F6B                         _SSP2STAT 000F6D  
          ??_Homing_Again_Manual 004A                       _ADCON0bits 000FC2  
                     _ADCON1bits 000FC1                        high_isr@c 0037  
                      high_isr@i 0038                      ??_i2c_Start 003A  
                    ??_i2c_Write 003A       __end_of_MotorPosition_Init 108E  
                     ?_initUSART 0033            _delay_motor_stop_time 0028  
                     ?_initMotor 0033                     _Serial_GData 0031  
                      _write_i2c 112C                        copy_data0 11D4  
         InitSTLED316@Brightness 0041                     _Serial_Count 0025  
                       _i2c_Init 131C                         _i2c_Read 1292  
                       _i2c_Wait 1346                         _i2c_Stop 13BA  
               __size_of_Get7Seg 0084                     ?_Write1USART 0033  
                      flushOut@i 0039                       _ANCON0bits 000FC1  
                       __Hrparam 0000                 __size_of_Read_IR 0010  
                       __Lrparam 0000             __size_of_Set_RG3_PWM 000C  
               __size_of___aldiv 00CC                 __size_of___awdiv 0084  
               __size_of___awmod 0070                   _vibration_mode 002D  
                       __ptext10 0AE4                         __ptext11 12BC  
                       __ptext20 0850                         __ptext12 1368  
                       __ptext21 0D30                         __ptext13 10E0  
                       __ptext30 0C70                         __ptext22 0F54  
                       __ptext14 131C                         __ptext31 108E  
                       __ptext23 0E4C                         __ptext15 1206  
                       __ptext32 1358                         __ptext24 0ED0  
                       __ptext16 0BB0                         __ptext33 13A6  
                       __ptext25 09BE                         __ptext17 1266  
                       __ptext34 138E                         __ptext26 1176  
                       __ptext18 102C                         __ptext35 13B0  
                       __ptext27 1236                         __ptext19 0DC2  
                       __ptext36 13D2                         __ptext28 1382  
                       __ptext29 12E2                         __ptext38 139A  
                       __ptext39 1302                       ?_write_i2c 0047  
               write_i2c@address 0047                         _high_isr 0008  
              read_i2c@read_byte 004B                         _flushOut 1236  
                       _read_i2c 0FC4                    __size_of_main 0720  
     __size_of_Homing_Again_Auto 0126                    __size_of_init 004C  
              ?_readWeighingData 0033                      ??_delay_1ms 003B  
             ??_readWeighingData 003B                         _vib_Time 0029  
           __size_of_MotorON_PWM 000A            _Motor_Stop_Delay_Time 001B  
                       int$flags 0053                _Serial_Buffer_Out 0060  
     STLED316s_SPI_SendData@Data 003B                       _INTCONbits 000FF2  
                    ??_initUSART 0039      __size_of_WriteSTLED316SData 0092  
     STLED316s_SPI_SendData@temp 003C      __size_of_WriteSTLED316SMode 00C0  
                    ??_initMotor 0039                    ??_Clr_RG3_PWM 0039  
           __CFG_FOSC$INTOSCPLLO 000000                         intlevel2 0000  
                   _motor_status 002F                 ??_ToggleVIB_Mode 004A  
                i2c_Address@mode 003A                       _RCSTA1bits 000FAC  
                     _OSCCONbits 000FD3         WriteSTLED316SData@v_mode 0043  
       WriteSTLED316SData@number 0041                       _IR_SENSORF 002B  
               _Motor_Pause_Time 0017               _Serial_Temp_Buffer 0070  
        STLED316s_SPI_SendData@i 003D          STLED316s_SPI_SendData@t 003E  
                   ___aldiv@sign 0042                       _WDTCONbits 000FC0  
                    ??_write_i2c 004D              i2c_Read@i2cReadData 003D  
                  write_i2c@data 004B              __end_of_Clr_RG3_PWM 13DA  
           __size_of_Write1USART 000C  
